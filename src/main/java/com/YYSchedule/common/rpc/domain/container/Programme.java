/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.YYSchedule.common.rpc.domain.container;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * programme data
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-06-17")
public class Programme implements org.apache.thrift.TBase<Programme, Programme._Fields>, java.io.Serializable, Cloneable, Comparable<Programme> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Programme");

  private static final org.apache.thrift.protocol.TField COMMITTER_FIELD_DESC = new org.apache.thrift.protocol.TField("committer", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROGRAMME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("programmeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TASK_PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskPhase", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SCRIPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("scriptName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("script", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SCRIPT_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("scriptMd5", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EXECUTABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("executableName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXECUTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("executable", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EXECUTABLE_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("executableMd5", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ENV_VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("envVariables", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MIN_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("minMem", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField MIN_FS_FIELD_DESC = new org.apache.thrift.protocol.TField("minFs", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProgrammeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProgrammeTupleSchemeFactory();

  public java.lang.String committer; // required
  public java.lang.String programmeName; // required
  /**
   * 
   * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public com.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase; // required
  public java.lang.String scriptName; // required
  public java.nio.ByteBuffer script; // required
  public java.lang.String scriptMd5; // required
  public java.lang.String executableName; // required
  public java.nio.ByteBuffer executable; // required
  public java.lang.String executableMd5; // required
  public java.lang.String envVariables; // optional
  public java.lang.String description; // optional
  public int minMem; // optional
  public int minFs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMITTER((short)1, "committer"),
    PROGRAMME_NAME((short)2, "programmeName"),
    /**
     * 
     * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
     */
    TASK_PHASE((short)3, "taskPhase"),
    SCRIPT_NAME((short)4, "scriptName"),
    SCRIPT((short)5, "script"),
    SCRIPT_MD5((short)6, "scriptMd5"),
    EXECUTABLE_NAME((short)7, "executableName"),
    EXECUTABLE((short)8, "executable"),
    EXECUTABLE_MD5((short)9, "executableMd5"),
    ENV_VARIABLES((short)10, "envVariables"),
    DESCRIPTION((short)11, "description"),
    MIN_MEM((short)12, "minMem"),
    MIN_FS((short)13, "minFs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMITTER
          return COMMITTER;
        case 2: // PROGRAMME_NAME
          return PROGRAMME_NAME;
        case 3: // TASK_PHASE
          return TASK_PHASE;
        case 4: // SCRIPT_NAME
          return SCRIPT_NAME;
        case 5: // SCRIPT
          return SCRIPT;
        case 6: // SCRIPT_MD5
          return SCRIPT_MD5;
        case 7: // EXECUTABLE_NAME
          return EXECUTABLE_NAME;
        case 8: // EXECUTABLE
          return EXECUTABLE;
        case 9: // EXECUTABLE_MD5
          return EXECUTABLE_MD5;
        case 10: // ENV_VARIABLES
          return ENV_VARIABLES;
        case 11: // DESCRIPTION
          return DESCRIPTION;
        case 12: // MIN_MEM
          return MIN_MEM;
        case 13: // MIN_FS
          return MIN_FS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MINMEM_ISSET_ID = 0;
  private static final int __MINFS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ENV_VARIABLES,_Fields.DESCRIPTION,_Fields.MIN_MEM,_Fields.MIN_FS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMITTER, new org.apache.thrift.meta_data.FieldMetaData("committer", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROGRAMME_NAME, new org.apache.thrift.meta_data.FieldMetaData("programmeName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_PHASE, new org.apache.thrift.meta_data.FieldMetaData("taskPhase", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.YYSchedule.common.rpc.domain.task.TaskPhase.class)));
    tmpMap.put(_Fields.SCRIPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("scriptName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRIPT, new org.apache.thrift.meta_data.FieldMetaData("script", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SCRIPT_MD5, new org.apache.thrift.meta_data.FieldMetaData("scriptMd5", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("executableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTABLE, new org.apache.thrift.meta_data.FieldMetaData("executable", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.EXECUTABLE_MD5, new org.apache.thrift.meta_data.FieldMetaData("executableMd5", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENV_VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("envVariables", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_MEM, new org.apache.thrift.meta_data.FieldMetaData("minMem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_FS, new org.apache.thrift.meta_data.FieldMetaData("minFs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Programme.class, metaDataMap);
  }

  public Programme() {
  }

  public Programme(
    java.lang.String committer,
    java.lang.String programmeName,
    com.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase,
    java.lang.String scriptName,
    java.nio.ByteBuffer script,
    java.lang.String scriptMd5,
    java.lang.String executableName,
    java.nio.ByteBuffer executable,
    java.lang.String executableMd5)
  {
    this();
    this.committer = committer;
    this.programmeName = programmeName;
    this.taskPhase = taskPhase;
    this.scriptName = scriptName;
    this.script = org.apache.thrift.TBaseHelper.copyBinary(script);
    this.scriptMd5 = scriptMd5;
    this.executableName = executableName;
    this.executable = org.apache.thrift.TBaseHelper.copyBinary(executable);
    this.executableMd5 = executableMd5;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Programme(Programme other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCommitter()) {
      this.committer = other.committer;
    }
    if (other.isSetProgrammeName()) {
      this.programmeName = other.programmeName;
    }
    if (other.isSetTaskPhase()) {
      this.taskPhase = other.taskPhase;
    }
    if (other.isSetScriptName()) {
      this.scriptName = other.scriptName;
    }
    if (other.isSetScript()) {
      this.script = org.apache.thrift.TBaseHelper.copyBinary(other.script);
    }
    if (other.isSetScriptMd5()) {
      this.scriptMd5 = other.scriptMd5;
    }
    if (other.isSetExecutableName()) {
      this.executableName = other.executableName;
    }
    if (other.isSetExecutable()) {
      this.executable = org.apache.thrift.TBaseHelper.copyBinary(other.executable);
    }
    if (other.isSetExecutableMd5()) {
      this.executableMd5 = other.executableMd5;
    }
    if (other.isSetEnvVariables()) {
      this.envVariables = other.envVariables;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.minMem = other.minMem;
    this.minFs = other.minFs;
  }

  public Programme deepCopy() {
    return new Programme(this);
  }

  @Override
  public void clear() {
    this.committer = null;
    this.programmeName = null;
    this.taskPhase = null;
    this.scriptName = null;
    this.script = null;
    this.scriptMd5 = null;
    this.executableName = null;
    this.executable = null;
    this.executableMd5 = null;
    this.envVariables = null;
    this.description = null;
    setMinMemIsSet(false);
    this.minMem = 0;
    setMinFsIsSet(false);
    this.minFs = 0;
  }

  public java.lang.String getCommitter() {
    return this.committer;
  }

  public Programme setCommitter(java.lang.String committer) {
    this.committer = committer;
    return this;
  }

  public void unsetCommitter() {
    this.committer = null;
  }

  /** Returns true if field committer is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitter() {
    return this.committer != null;
  }

  public void setCommitterIsSet(boolean value) {
    if (!value) {
      this.committer = null;
    }
  }

  public java.lang.String getProgrammeName() {
    return this.programmeName;
  }

  public Programme setProgrammeName(java.lang.String programmeName) {
    this.programmeName = programmeName;
    return this;
  }

  public void unsetProgrammeName() {
    this.programmeName = null;
  }

  /** Returns true if field programmeName is set (has been assigned a value) and false otherwise */
  public boolean isSetProgrammeName() {
    return this.programmeName != null;
  }

  public void setProgrammeNameIsSet(boolean value) {
    if (!value) {
      this.programmeName = null;
    }
  }

  /**
   * 
   * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public com.YYSchedule.common.rpc.domain.task.TaskPhase getTaskPhase() {
    return this.taskPhase;
  }

  /**
   * 
   * @see com.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public Programme setTaskPhase(com.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase) {
    this.taskPhase = taskPhase;
    return this;
  }

  public void unsetTaskPhase() {
    this.taskPhase = null;
  }

  /** Returns true if field taskPhase is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskPhase() {
    return this.taskPhase != null;
  }

  public void setTaskPhaseIsSet(boolean value) {
    if (!value) {
      this.taskPhase = null;
    }
  }

  public java.lang.String getScriptName() {
    return this.scriptName;
  }

  public Programme setScriptName(java.lang.String scriptName) {
    this.scriptName = scriptName;
    return this;
  }

  public void unsetScriptName() {
    this.scriptName = null;
  }

  /** Returns true if field scriptName is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptName() {
    return this.scriptName != null;
  }

  public void setScriptNameIsSet(boolean value) {
    if (!value) {
      this.scriptName = null;
    }
  }

  public byte[] getScript() {
    setScript(org.apache.thrift.TBaseHelper.rightSize(script));
    return script == null ? null : script.array();
  }

  public java.nio.ByteBuffer bufferForScript() {
    return org.apache.thrift.TBaseHelper.copyBinary(script);
  }

  public Programme setScript(byte[] script) {
    this.script = script == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(script.clone());
    return this;
  }

  public Programme setScript(java.nio.ByteBuffer script) {
    this.script = org.apache.thrift.TBaseHelper.copyBinary(script);
    return this;
  }

  public void unsetScript() {
    this.script = null;
  }

  /** Returns true if field script is set (has been assigned a value) and false otherwise */
  public boolean isSetScript() {
    return this.script != null;
  }

  public void setScriptIsSet(boolean value) {
    if (!value) {
      this.script = null;
    }
  }

  public java.lang.String getScriptMd5() {
    return this.scriptMd5;
  }

  public Programme setScriptMd5(java.lang.String scriptMd5) {
    this.scriptMd5 = scriptMd5;
    return this;
  }

  public void unsetScriptMd5() {
    this.scriptMd5 = null;
  }

  /** Returns true if field scriptMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptMd5() {
    return this.scriptMd5 != null;
  }

  public void setScriptMd5IsSet(boolean value) {
    if (!value) {
      this.scriptMd5 = null;
    }
  }

  public java.lang.String getExecutableName() {
    return this.executableName;
  }

  public Programme setExecutableName(java.lang.String executableName) {
    this.executableName = executableName;
    return this;
  }

  public void unsetExecutableName() {
    this.executableName = null;
  }

  /** Returns true if field executableName is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutableName() {
    return this.executableName != null;
  }

  public void setExecutableNameIsSet(boolean value) {
    if (!value) {
      this.executableName = null;
    }
  }

  public byte[] getExecutable() {
    setExecutable(org.apache.thrift.TBaseHelper.rightSize(executable));
    return executable == null ? null : executable.array();
  }

  public java.nio.ByteBuffer bufferForExecutable() {
    return org.apache.thrift.TBaseHelper.copyBinary(executable);
  }

  public Programme setExecutable(byte[] executable) {
    this.executable = executable == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(executable.clone());
    return this;
  }

  public Programme setExecutable(java.nio.ByteBuffer executable) {
    this.executable = org.apache.thrift.TBaseHelper.copyBinary(executable);
    return this;
  }

  public void unsetExecutable() {
    this.executable = null;
  }

  /** Returns true if field executable is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutable() {
    return this.executable != null;
  }

  public void setExecutableIsSet(boolean value) {
    if (!value) {
      this.executable = null;
    }
  }

  public java.lang.String getExecutableMd5() {
    return this.executableMd5;
  }

  public Programme setExecutableMd5(java.lang.String executableMd5) {
    this.executableMd5 = executableMd5;
    return this;
  }

  public void unsetExecutableMd5() {
    this.executableMd5 = null;
  }

  /** Returns true if field executableMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutableMd5() {
    return this.executableMd5 != null;
  }

  public void setExecutableMd5IsSet(boolean value) {
    if (!value) {
      this.executableMd5 = null;
    }
  }

  public java.lang.String getEnvVariables() {
    return this.envVariables;
  }

  public Programme setEnvVariables(java.lang.String envVariables) {
    this.envVariables = envVariables;
    return this;
  }

  public void unsetEnvVariables() {
    this.envVariables = null;
  }

  /** Returns true if field envVariables is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvVariables() {
    return this.envVariables != null;
  }

  public void setEnvVariablesIsSet(boolean value) {
    if (!value) {
      this.envVariables = null;
    }
  }

  public java.lang.String getDescription() {
    return this.description;
  }

  public Programme setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getMinMem() {
    return this.minMem;
  }

  public Programme setMinMem(int minMem) {
    this.minMem = minMem;
    setMinMemIsSet(true);
    return this;
  }

  public void unsetMinMem() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINMEM_ISSET_ID);
  }

  /** Returns true if field minMem is set (has been assigned a value) and false otherwise */
  public boolean isSetMinMem() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINMEM_ISSET_ID);
  }

  public void setMinMemIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINMEM_ISSET_ID, value);
  }

  public int getMinFs() {
    return this.minFs;
  }

  public Programme setMinFs(int minFs) {
    this.minFs = minFs;
    setMinFsIsSet(true);
    return this;
  }

  public void unsetMinFs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINFS_ISSET_ID);
  }

  /** Returns true if field minFs is set (has been assigned a value) and false otherwise */
  public boolean isSetMinFs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINFS_ISSET_ID);
  }

  public void setMinFsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINFS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case COMMITTER:
      if (value == null) {
        unsetCommitter();
      } else {
        setCommitter((java.lang.String)value);
      }
      break;

    case PROGRAMME_NAME:
      if (value == null) {
        unsetProgrammeName();
      } else {
        setProgrammeName((java.lang.String)value);
      }
      break;

    case TASK_PHASE:
      if (value == null) {
        unsetTaskPhase();
      } else {
        setTaskPhase((com.YYSchedule.common.rpc.domain.task.TaskPhase)value);
      }
      break;

    case SCRIPT_NAME:
      if (value == null) {
        unsetScriptName();
      } else {
        setScriptName((java.lang.String)value);
      }
      break;

    case SCRIPT:
      if (value == null) {
        unsetScript();
      } else {
        if (value instanceof byte[]) {
          setScript((byte[])value);
        } else {
          setScript((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SCRIPT_MD5:
      if (value == null) {
        unsetScriptMd5();
      } else {
        setScriptMd5((java.lang.String)value);
      }
      break;

    case EXECUTABLE_NAME:
      if (value == null) {
        unsetExecutableName();
      } else {
        setExecutableName((java.lang.String)value);
      }
      break;

    case EXECUTABLE:
      if (value == null) {
        unsetExecutable();
      } else {
        if (value instanceof byte[]) {
          setExecutable((byte[])value);
        } else {
          setExecutable((java.nio.ByteBuffer)value);
        }
      }
      break;

    case EXECUTABLE_MD5:
      if (value == null) {
        unsetExecutableMd5();
      } else {
        setExecutableMd5((java.lang.String)value);
      }
      break;

    case ENV_VARIABLES:
      if (value == null) {
        unsetEnvVariables();
      } else {
        setEnvVariables((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case MIN_MEM:
      if (value == null) {
        unsetMinMem();
      } else {
        setMinMem((java.lang.Integer)value);
      }
      break;

    case MIN_FS:
      if (value == null) {
        unsetMinFs();
      } else {
        setMinFs((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMITTER:
      return getCommitter();

    case PROGRAMME_NAME:
      return getProgrammeName();

    case TASK_PHASE:
      return getTaskPhase();

    case SCRIPT_NAME:
      return getScriptName();

    case SCRIPT:
      return getScript();

    case SCRIPT_MD5:
      return getScriptMd5();

    case EXECUTABLE_NAME:
      return getExecutableName();

    case EXECUTABLE:
      return getExecutable();

    case EXECUTABLE_MD5:
      return getExecutableMd5();

    case ENV_VARIABLES:
      return getEnvVariables();

    case DESCRIPTION:
      return getDescription();

    case MIN_MEM:
      return getMinMem();

    case MIN_FS:
      return getMinFs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COMMITTER:
      return isSetCommitter();
    case PROGRAMME_NAME:
      return isSetProgrammeName();
    case TASK_PHASE:
      return isSetTaskPhase();
    case SCRIPT_NAME:
      return isSetScriptName();
    case SCRIPT:
      return isSetScript();
    case SCRIPT_MD5:
      return isSetScriptMd5();
    case EXECUTABLE_NAME:
      return isSetExecutableName();
    case EXECUTABLE:
      return isSetExecutable();
    case EXECUTABLE_MD5:
      return isSetExecutableMd5();
    case ENV_VARIABLES:
      return isSetEnvVariables();
    case DESCRIPTION:
      return isSetDescription();
    case MIN_MEM:
      return isSetMinMem();
    case MIN_FS:
      return isSetMinFs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Programme)
      return this.equals((Programme)that);
    return false;
  }

  public boolean equals(Programme that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_committer = true && this.isSetCommitter();
    boolean that_present_committer = true && that.isSetCommitter();
    if (this_present_committer || that_present_committer) {
      if (!(this_present_committer && that_present_committer))
        return false;
      if (!this.committer.equals(that.committer))
        return false;
    }

    boolean this_present_programmeName = true && this.isSetProgrammeName();
    boolean that_present_programmeName = true && that.isSetProgrammeName();
    if (this_present_programmeName || that_present_programmeName) {
      if (!(this_present_programmeName && that_present_programmeName))
        return false;
      if (!this.programmeName.equals(that.programmeName))
        return false;
    }

    boolean this_present_taskPhase = true && this.isSetTaskPhase();
    boolean that_present_taskPhase = true && that.isSetTaskPhase();
    if (this_present_taskPhase || that_present_taskPhase) {
      if (!(this_present_taskPhase && that_present_taskPhase))
        return false;
      if (!this.taskPhase.equals(that.taskPhase))
        return false;
    }

    boolean this_present_scriptName = true && this.isSetScriptName();
    boolean that_present_scriptName = true && that.isSetScriptName();
    if (this_present_scriptName || that_present_scriptName) {
      if (!(this_present_scriptName && that_present_scriptName))
        return false;
      if (!this.scriptName.equals(that.scriptName))
        return false;
    }

    boolean this_present_script = true && this.isSetScript();
    boolean that_present_script = true && that.isSetScript();
    if (this_present_script || that_present_script) {
      if (!(this_present_script && that_present_script))
        return false;
      if (!this.script.equals(that.script))
        return false;
    }

    boolean this_present_scriptMd5 = true && this.isSetScriptMd5();
    boolean that_present_scriptMd5 = true && that.isSetScriptMd5();
    if (this_present_scriptMd5 || that_present_scriptMd5) {
      if (!(this_present_scriptMd5 && that_present_scriptMd5))
        return false;
      if (!this.scriptMd5.equals(that.scriptMd5))
        return false;
    }

    boolean this_present_executableName = true && this.isSetExecutableName();
    boolean that_present_executableName = true && that.isSetExecutableName();
    if (this_present_executableName || that_present_executableName) {
      if (!(this_present_executableName && that_present_executableName))
        return false;
      if (!this.executableName.equals(that.executableName))
        return false;
    }

    boolean this_present_executable = true && this.isSetExecutable();
    boolean that_present_executable = true && that.isSetExecutable();
    if (this_present_executable || that_present_executable) {
      if (!(this_present_executable && that_present_executable))
        return false;
      if (!this.executable.equals(that.executable))
        return false;
    }

    boolean this_present_executableMd5 = true && this.isSetExecutableMd5();
    boolean that_present_executableMd5 = true && that.isSetExecutableMd5();
    if (this_present_executableMd5 || that_present_executableMd5) {
      if (!(this_present_executableMd5 && that_present_executableMd5))
        return false;
      if (!this.executableMd5.equals(that.executableMd5))
        return false;
    }

    boolean this_present_envVariables = true && this.isSetEnvVariables();
    boolean that_present_envVariables = true && that.isSetEnvVariables();
    if (this_present_envVariables || that_present_envVariables) {
      if (!(this_present_envVariables && that_present_envVariables))
        return false;
      if (!this.envVariables.equals(that.envVariables))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_minMem = true && this.isSetMinMem();
    boolean that_present_minMem = true && that.isSetMinMem();
    if (this_present_minMem || that_present_minMem) {
      if (!(this_present_minMem && that_present_minMem))
        return false;
      if (this.minMem != that.minMem)
        return false;
    }

    boolean this_present_minFs = true && this.isSetMinFs();
    boolean that_present_minFs = true && that.isSetMinFs();
    if (this_present_minFs || that_present_minFs) {
      if (!(this_present_minFs && that_present_minFs))
        return false;
      if (this.minFs != that.minFs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCommitter()) ? 131071 : 524287);
    if (isSetCommitter())
      hashCode = hashCode * 8191 + committer.hashCode();

    hashCode = hashCode * 8191 + ((isSetProgrammeName()) ? 131071 : 524287);
    if (isSetProgrammeName())
      hashCode = hashCode * 8191 + programmeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTaskPhase()) ? 131071 : 524287);
    if (isSetTaskPhase())
      hashCode = hashCode * 8191 + taskPhase.getValue();

    hashCode = hashCode * 8191 + ((isSetScriptName()) ? 131071 : 524287);
    if (isSetScriptName())
      hashCode = hashCode * 8191 + scriptName.hashCode();

    hashCode = hashCode * 8191 + ((isSetScript()) ? 131071 : 524287);
    if (isSetScript())
      hashCode = hashCode * 8191 + script.hashCode();

    hashCode = hashCode * 8191 + ((isSetScriptMd5()) ? 131071 : 524287);
    if (isSetScriptMd5())
      hashCode = hashCode * 8191 + scriptMd5.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecutableName()) ? 131071 : 524287);
    if (isSetExecutableName())
      hashCode = hashCode * 8191 + executableName.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecutable()) ? 131071 : 524287);
    if (isSetExecutable())
      hashCode = hashCode * 8191 + executable.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecutableMd5()) ? 131071 : 524287);
    if (isSetExecutableMd5())
      hashCode = hashCode * 8191 + executableMd5.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnvVariables()) ? 131071 : 524287);
    if (isSetEnvVariables())
      hashCode = hashCode * 8191 + envVariables.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetMinMem()) ? 131071 : 524287);
    if (isSetMinMem())
      hashCode = hashCode * 8191 + minMem;

    hashCode = hashCode * 8191 + ((isSetMinFs()) ? 131071 : 524287);
    if (isSetMinFs())
      hashCode = hashCode * 8191 + minFs;

    return hashCode;
  }

  @Override
  public int compareTo(Programme other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCommitter()).compareTo(other.isSetCommitter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.committer, other.committer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProgrammeName()).compareTo(other.isSetProgrammeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgrammeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programmeName, other.programmeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaskPhase()).compareTo(other.isSetTaskPhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskPhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskPhase, other.taskPhase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScriptName()).compareTo(other.isSetScriptName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scriptName, other.scriptName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScript()).compareTo(other.isSetScript());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScript()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.script, other.script);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScriptMd5()).compareTo(other.isSetScriptMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scriptMd5, other.scriptMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecutableName()).compareTo(other.isSetExecutableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executableName, other.executableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecutable()).compareTo(other.isSetExecutable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executable, other.executable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecutableMd5()).compareTo(other.isSetExecutableMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutableMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executableMd5, other.executableMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnvVariables()).compareTo(other.isSetEnvVariables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvVariables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.envVariables, other.envVariables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMinMem()).compareTo(other.isSetMinMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minMem, other.minMem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMinFs()).compareTo(other.isSetMinFs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinFs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minFs, other.minFs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Programme(");
    boolean first = true;

    sb.append("committer:");
    if (this.committer == null) {
      sb.append("null");
    } else {
      sb.append(this.committer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("programmeName:");
    if (this.programmeName == null) {
      sb.append("null");
    } else {
      sb.append(this.programmeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskPhase:");
    if (this.taskPhase == null) {
      sb.append("null");
    } else {
      sb.append(this.taskPhase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scriptName:");
    if (this.scriptName == null) {
      sb.append("null");
    } else {
      sb.append(this.scriptName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("script:");
    if (this.script == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.script, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scriptMd5:");
    if (this.scriptMd5 == null) {
      sb.append("null");
    } else {
      sb.append(this.scriptMd5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executableName:");
    if (this.executableName == null) {
      sb.append("null");
    } else {
      sb.append(this.executableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executable:");
    if (this.executable == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.executable, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executableMd5:");
    if (this.executableMd5 == null) {
      sb.append("null");
    } else {
      sb.append(this.executableMd5);
    }
    first = false;
    if (isSetEnvVariables()) {
      if (!first) sb.append(", ");
      sb.append("envVariables:");
      if (this.envVariables == null) {
        sb.append("null");
      } else {
        sb.append(this.envVariables);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetMinMem()) {
      if (!first) sb.append(", ");
      sb.append("minMem:");
      sb.append(this.minMem);
      first = false;
    }
    if (isSetMinFs()) {
      if (!first) sb.append(", ");
      sb.append("minFs:");
      sb.append(this.minFs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (committer == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'committer' was not present! Struct: " + toString());
    }
    if (programmeName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'programmeName' was not present! Struct: " + toString());
    }
    if (taskPhase == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskPhase' was not present! Struct: " + toString());
    }
    if (scriptName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scriptName' was not present! Struct: " + toString());
    }
    if (script == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'script' was not present! Struct: " + toString());
    }
    if (scriptMd5 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scriptMd5' was not present! Struct: " + toString());
    }
    if (executableName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executableName' was not present! Struct: " + toString());
    }
    if (executable == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executable' was not present! Struct: " + toString());
    }
    if (executableMd5 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executableMd5' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProgrammeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProgrammeStandardScheme getScheme() {
      return new ProgrammeStandardScheme();
    }
  }

  private static class ProgrammeStandardScheme extends org.apache.thrift.scheme.StandardScheme<Programme> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Programme struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMITTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.committer = iprot.readString();
              struct.setCommitterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROGRAMME_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.programmeName = iprot.readString();
              struct.setProgrammeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASK_PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskPhase = com.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
              struct.setTaskPhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCRIPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scriptName = iprot.readString();
              struct.setScriptNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SCRIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.script = iprot.readBinary();
              struct.setScriptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SCRIPT_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scriptMd5 = iprot.readString();
              struct.setScriptMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXECUTABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executableName = iprot.readString();
              struct.setExecutableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXECUTABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executable = iprot.readBinary();
              struct.setExecutableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXECUTABLE_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executableMd5 = iprot.readString();
              struct.setExecutableMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ENV_VARIABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.envVariables = iprot.readString();
              struct.setEnvVariablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MIN_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minMem = iprot.readI32();
              struct.setMinMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MIN_FS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minFs = iprot.readI32();
              struct.setMinFsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Programme struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.committer != null) {
        oprot.writeFieldBegin(COMMITTER_FIELD_DESC);
        oprot.writeString(struct.committer);
        oprot.writeFieldEnd();
      }
      if (struct.programmeName != null) {
        oprot.writeFieldBegin(PROGRAMME_NAME_FIELD_DESC);
        oprot.writeString(struct.programmeName);
        oprot.writeFieldEnd();
      }
      if (struct.taskPhase != null) {
        oprot.writeFieldBegin(TASK_PHASE_FIELD_DESC);
        oprot.writeI32(struct.taskPhase.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.scriptName != null) {
        oprot.writeFieldBegin(SCRIPT_NAME_FIELD_DESC);
        oprot.writeString(struct.scriptName);
        oprot.writeFieldEnd();
      }
      if (struct.script != null) {
        oprot.writeFieldBegin(SCRIPT_FIELD_DESC);
        oprot.writeBinary(struct.script);
        oprot.writeFieldEnd();
      }
      if (struct.scriptMd5 != null) {
        oprot.writeFieldBegin(SCRIPT_MD5_FIELD_DESC);
        oprot.writeString(struct.scriptMd5);
        oprot.writeFieldEnd();
      }
      if (struct.executableName != null) {
        oprot.writeFieldBegin(EXECUTABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.executableName);
        oprot.writeFieldEnd();
      }
      if (struct.executable != null) {
        oprot.writeFieldBegin(EXECUTABLE_FIELD_DESC);
        oprot.writeBinary(struct.executable);
        oprot.writeFieldEnd();
      }
      if (struct.executableMd5 != null) {
        oprot.writeFieldBegin(EXECUTABLE_MD5_FIELD_DESC);
        oprot.writeString(struct.executableMd5);
        oprot.writeFieldEnd();
      }
      if (struct.envVariables != null) {
        if (struct.isSetEnvVariables()) {
          oprot.writeFieldBegin(ENV_VARIABLES_FIELD_DESC);
          oprot.writeString(struct.envVariables);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMinMem()) {
        oprot.writeFieldBegin(MIN_MEM_FIELD_DESC);
        oprot.writeI32(struct.minMem);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinFs()) {
        oprot.writeFieldBegin(MIN_FS_FIELD_DESC);
        oprot.writeI32(struct.minFs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProgrammeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProgrammeTupleScheme getScheme() {
      return new ProgrammeTupleScheme();
    }
  }

  private static class ProgrammeTupleScheme extends org.apache.thrift.scheme.TupleScheme<Programme> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Programme struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.committer);
      oprot.writeString(struct.programmeName);
      oprot.writeI32(struct.taskPhase.getValue());
      oprot.writeString(struct.scriptName);
      oprot.writeBinary(struct.script);
      oprot.writeString(struct.scriptMd5);
      oprot.writeString(struct.executableName);
      oprot.writeBinary(struct.executable);
      oprot.writeString(struct.executableMd5);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEnvVariables()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetMinMem()) {
        optionals.set(2);
      }
      if (struct.isSetMinFs()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEnvVariables()) {
        oprot.writeString(struct.envVariables);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetMinMem()) {
        oprot.writeI32(struct.minMem);
      }
      if (struct.isSetMinFs()) {
        oprot.writeI32(struct.minFs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Programme struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.committer = iprot.readString();
      struct.setCommitterIsSet(true);
      struct.programmeName = iprot.readString();
      struct.setProgrammeNameIsSet(true);
      struct.taskPhase = com.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
      struct.setTaskPhaseIsSet(true);
      struct.scriptName = iprot.readString();
      struct.setScriptNameIsSet(true);
      struct.script = iprot.readBinary();
      struct.setScriptIsSet(true);
      struct.scriptMd5 = iprot.readString();
      struct.setScriptMd5IsSet(true);
      struct.executableName = iprot.readString();
      struct.setExecutableNameIsSet(true);
      struct.executable = iprot.readBinary();
      struct.setExecutableIsSet(true);
      struct.executableMd5 = iprot.readString();
      struct.setExecutableMd5IsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.envVariables = iprot.readString();
        struct.setEnvVariablesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.minMem = iprot.readI32();
        struct.setMinMemIsSet(true);
      }
      if (incoming.get(3)) {
        struct.minFs = iprot.readI32();
        struct.setMinFsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

