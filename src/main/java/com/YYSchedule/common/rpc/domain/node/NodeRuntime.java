/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.YYSchedule.common.rpc.domain.node;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-07-26")
public class NodeRuntime implements org.apache.thrift.TBase<NodeRuntime, NodeRuntime._Fields>, java.io.Serializable, Cloneable, Comparable<NodeRuntime> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeRuntime");

  private static final org.apache.thrift.protocol.TField CPU_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuCount", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CPU_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuCores", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CPU_MHZ_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuMhz", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CPU_USED_PERC_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuUsedPerc", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField FREE_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("freeMem", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField JVM_FREE_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmFreeMem", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NodeRuntimeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NodeRuntimeTupleSchemeFactory();

  public int cpuCount; // required
  public int cpuCores; // required
  public int cpuMhz; // required
  public double cpuUsedPerc; // required
  public long freeMem; // required
  public long jvmFreeMem; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CPU_COUNT((short)1, "cpuCount"),
    CPU_CORES((short)2, "cpuCores"),
    CPU_MHZ((short)3, "cpuMhz"),
    CPU_USED_PERC((short)4, "cpuUsedPerc"),
    FREE_MEM((short)5, "freeMem"),
    JVM_FREE_MEM((short)6, "jvmFreeMem");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CPU_COUNT
          return CPU_COUNT;
        case 2: // CPU_CORES
          return CPU_CORES;
        case 3: // CPU_MHZ
          return CPU_MHZ;
        case 4: // CPU_USED_PERC
          return CPU_USED_PERC;
        case 5: // FREE_MEM
          return FREE_MEM;
        case 6: // JVM_FREE_MEM
          return JVM_FREE_MEM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CPUCOUNT_ISSET_ID = 0;
  private static final int __CPUCORES_ISSET_ID = 1;
  private static final int __CPUMHZ_ISSET_ID = 2;
  private static final int __CPUUSEDPERC_ISSET_ID = 3;
  private static final int __FREEMEM_ISSET_ID = 4;
  private static final int __JVMFREEMEM_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CPU_COUNT, new org.apache.thrift.meta_data.FieldMetaData("cpuCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPU_CORES, new org.apache.thrift.meta_data.FieldMetaData("cpuCores", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPU_MHZ, new org.apache.thrift.meta_data.FieldMetaData("cpuMhz", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPU_USED_PERC, new org.apache.thrift.meta_data.FieldMetaData("cpuUsedPerc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FREE_MEM, new org.apache.thrift.meta_data.FieldMetaData("freeMem", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JVM_FREE_MEM, new org.apache.thrift.meta_data.FieldMetaData("jvmFreeMem", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeRuntime.class, metaDataMap);
  }

  public NodeRuntime() {
  }

  public NodeRuntime(
    int cpuCount,
    int cpuCores,
    int cpuMhz,
    double cpuUsedPerc,
    long freeMem,
    long jvmFreeMem)
  {
    this();
    this.cpuCount = cpuCount;
    setCpuCountIsSet(true);
    this.cpuCores = cpuCores;
    setCpuCoresIsSet(true);
    this.cpuMhz = cpuMhz;
    setCpuMhzIsSet(true);
    this.cpuUsedPerc = cpuUsedPerc;
    setCpuUsedPercIsSet(true);
    this.freeMem = freeMem;
    setFreeMemIsSet(true);
    this.jvmFreeMem = jvmFreeMem;
    setJvmFreeMemIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeRuntime(NodeRuntime other) {
    __isset_bitfield = other.__isset_bitfield;
    this.cpuCount = other.cpuCount;
    this.cpuCores = other.cpuCores;
    this.cpuMhz = other.cpuMhz;
    this.cpuUsedPerc = other.cpuUsedPerc;
    this.freeMem = other.freeMem;
    this.jvmFreeMem = other.jvmFreeMem;
  }

  public NodeRuntime deepCopy() {
    return new NodeRuntime(this);
  }

  @Override
  public void clear() {
    setCpuCountIsSet(false);
    this.cpuCount = 0;
    setCpuCoresIsSet(false);
    this.cpuCores = 0;
    setCpuMhzIsSet(false);
    this.cpuMhz = 0;
    setCpuUsedPercIsSet(false);
    this.cpuUsedPerc = 0.0;
    setFreeMemIsSet(false);
    this.freeMem = 0;
    setJvmFreeMemIsSet(false);
    this.jvmFreeMem = 0;
  }

  public int getCpuCount() {
    return this.cpuCount;
  }

  public NodeRuntime setCpuCount(int cpuCount) {
    this.cpuCount = cpuCount;
    setCpuCountIsSet(true);
    return this;
  }

  public void unsetCpuCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPUCOUNT_ISSET_ID);
  }

  /** Returns true if field cpuCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPUCOUNT_ISSET_ID);
  }

  public void setCpuCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPUCOUNT_ISSET_ID, value);
  }

  public int getCpuCores() {
    return this.cpuCores;
  }

  public NodeRuntime setCpuCores(int cpuCores) {
    this.cpuCores = cpuCores;
    setCpuCoresIsSet(true);
    return this;
  }

  public void unsetCpuCores() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPUCORES_ISSET_ID);
  }

  /** Returns true if field cpuCores is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuCores() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPUCORES_ISSET_ID);
  }

  public void setCpuCoresIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPUCORES_ISSET_ID, value);
  }

  public int getCpuMhz() {
    return this.cpuMhz;
  }

  public NodeRuntime setCpuMhz(int cpuMhz) {
    this.cpuMhz = cpuMhz;
    setCpuMhzIsSet(true);
    return this;
  }

  public void unsetCpuMhz() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPUMHZ_ISSET_ID);
  }

  /** Returns true if field cpuMhz is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuMhz() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPUMHZ_ISSET_ID);
  }

  public void setCpuMhzIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPUMHZ_ISSET_ID, value);
  }

  public double getCpuUsedPerc() {
    return this.cpuUsedPerc;
  }

  public NodeRuntime setCpuUsedPerc(double cpuUsedPerc) {
    this.cpuUsedPerc = cpuUsedPerc;
    setCpuUsedPercIsSet(true);
    return this;
  }

  public void unsetCpuUsedPerc() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPUUSEDPERC_ISSET_ID);
  }

  /** Returns true if field cpuUsedPerc is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuUsedPerc() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPUUSEDPERC_ISSET_ID);
  }

  public void setCpuUsedPercIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPUUSEDPERC_ISSET_ID, value);
  }

  public long getFreeMem() {
    return this.freeMem;
  }

  public NodeRuntime setFreeMem(long freeMem) {
    this.freeMem = freeMem;
    setFreeMemIsSet(true);
    return this;
  }

  public void unsetFreeMem() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FREEMEM_ISSET_ID);
  }

  /** Returns true if field freeMem is set (has been assigned a value) and false otherwise */
  public boolean isSetFreeMem() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FREEMEM_ISSET_ID);
  }

  public void setFreeMemIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FREEMEM_ISSET_ID, value);
  }

  public long getJvmFreeMem() {
    return this.jvmFreeMem;
  }

  public NodeRuntime setJvmFreeMem(long jvmFreeMem) {
    this.jvmFreeMem = jvmFreeMem;
    setJvmFreeMemIsSet(true);
    return this;
  }

  public void unsetJvmFreeMem() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JVMFREEMEM_ISSET_ID);
  }

  /** Returns true if field jvmFreeMem is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmFreeMem() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JVMFREEMEM_ISSET_ID);
  }

  public void setJvmFreeMemIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JVMFREEMEM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CPU_COUNT:
      if (value == null) {
        unsetCpuCount();
      } else {
        setCpuCount((java.lang.Integer)value);
      }
      break;

    case CPU_CORES:
      if (value == null) {
        unsetCpuCores();
      } else {
        setCpuCores((java.lang.Integer)value);
      }
      break;

    case CPU_MHZ:
      if (value == null) {
        unsetCpuMhz();
      } else {
        setCpuMhz((java.lang.Integer)value);
      }
      break;

    case CPU_USED_PERC:
      if (value == null) {
        unsetCpuUsedPerc();
      } else {
        setCpuUsedPerc((java.lang.Double)value);
      }
      break;

    case FREE_MEM:
      if (value == null) {
        unsetFreeMem();
      } else {
        setFreeMem((java.lang.Long)value);
      }
      break;

    case JVM_FREE_MEM:
      if (value == null) {
        unsetJvmFreeMem();
      } else {
        setJvmFreeMem((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CPU_COUNT:
      return getCpuCount();

    case CPU_CORES:
      return getCpuCores();

    case CPU_MHZ:
      return getCpuMhz();

    case CPU_USED_PERC:
      return getCpuUsedPerc();

    case FREE_MEM:
      return getFreeMem();

    case JVM_FREE_MEM:
      return getJvmFreeMem();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CPU_COUNT:
      return isSetCpuCount();
    case CPU_CORES:
      return isSetCpuCores();
    case CPU_MHZ:
      return isSetCpuMhz();
    case CPU_USED_PERC:
      return isSetCpuUsedPerc();
    case FREE_MEM:
      return isSetFreeMem();
    case JVM_FREE_MEM:
      return isSetJvmFreeMem();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeRuntime)
      return this.equals((NodeRuntime)that);
    return false;
  }

  public boolean equals(NodeRuntime that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cpuCount = true;
    boolean that_present_cpuCount = true;
    if (this_present_cpuCount || that_present_cpuCount) {
      if (!(this_present_cpuCount && that_present_cpuCount))
        return false;
      if (this.cpuCount != that.cpuCount)
        return false;
    }

    boolean this_present_cpuCores = true;
    boolean that_present_cpuCores = true;
    if (this_present_cpuCores || that_present_cpuCores) {
      if (!(this_present_cpuCores && that_present_cpuCores))
        return false;
      if (this.cpuCores != that.cpuCores)
        return false;
    }

    boolean this_present_cpuMhz = true;
    boolean that_present_cpuMhz = true;
    if (this_present_cpuMhz || that_present_cpuMhz) {
      if (!(this_present_cpuMhz && that_present_cpuMhz))
        return false;
      if (this.cpuMhz != that.cpuMhz)
        return false;
    }

    boolean this_present_cpuUsedPerc = true;
    boolean that_present_cpuUsedPerc = true;
    if (this_present_cpuUsedPerc || that_present_cpuUsedPerc) {
      if (!(this_present_cpuUsedPerc && that_present_cpuUsedPerc))
        return false;
      if (this.cpuUsedPerc != that.cpuUsedPerc)
        return false;
    }

    boolean this_present_freeMem = true;
    boolean that_present_freeMem = true;
    if (this_present_freeMem || that_present_freeMem) {
      if (!(this_present_freeMem && that_present_freeMem))
        return false;
      if (this.freeMem != that.freeMem)
        return false;
    }

    boolean this_present_jvmFreeMem = true;
    boolean that_present_jvmFreeMem = true;
    if (this_present_jvmFreeMem || that_present_jvmFreeMem) {
      if (!(this_present_jvmFreeMem && that_present_jvmFreeMem))
        return false;
      if (this.jvmFreeMem != that.jvmFreeMem)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + cpuCount;

    hashCode = hashCode * 8191 + cpuCores;

    hashCode = hashCode * 8191 + cpuMhz;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cpuUsedPerc);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(freeMem);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(jvmFreeMem);

    return hashCode;
  }

  @Override
  public int compareTo(NodeRuntime other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCpuCount()).compareTo(other.isSetCpuCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuCount, other.cpuCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCpuCores()).compareTo(other.isSetCpuCores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuCores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuCores, other.cpuCores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCpuMhz()).compareTo(other.isSetCpuMhz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuMhz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuMhz, other.cpuMhz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCpuUsedPerc()).compareTo(other.isSetCpuUsedPerc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuUsedPerc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuUsedPerc, other.cpuUsedPerc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFreeMem()).compareTo(other.isSetFreeMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreeMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freeMem, other.freeMem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJvmFreeMem()).compareTo(other.isSetJvmFreeMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmFreeMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmFreeMem, other.jvmFreeMem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NodeRuntime(");
    boolean first = true;

    sb.append("cpuCount:");
    sb.append(this.cpuCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuCores:");
    sb.append(this.cpuCores);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuMhz:");
    sb.append(this.cpuMhz);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuUsedPerc:");
    sb.append(this.cpuUsedPerc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freeMem:");
    sb.append(this.freeMem);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmFreeMem:");
    sb.append(this.jvmFreeMem);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'cpuCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'cpuCores' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'cpuMhz' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'cpuUsedPerc' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'freeMem' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'jvmFreeMem' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeRuntimeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodeRuntimeStandardScheme getScheme() {
      return new NodeRuntimeStandardScheme();
    }
  }

  private static class NodeRuntimeStandardScheme extends org.apache.thrift.scheme.StandardScheme<NodeRuntime> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeRuntime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CPU_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpuCount = iprot.readI32();
              struct.setCpuCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CPU_CORES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpuCores = iprot.readI32();
              struct.setCpuCoresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CPU_MHZ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpuMhz = iprot.readI32();
              struct.setCpuMhzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CPU_USED_PERC
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpuUsedPerc = iprot.readDouble();
              struct.setCpuUsedPercIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FREE_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.freeMem = iprot.readI64();
              struct.setFreeMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // JVM_FREE_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.jvmFreeMem = iprot.readI64();
              struct.setJvmFreeMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCpuCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpuCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCpuCores()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpuCores' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCpuMhz()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpuMhz' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCpuUsedPerc()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpuUsedPerc' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFreeMem()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'freeMem' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetJvmFreeMem()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jvmFreeMem' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeRuntime struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CPU_COUNT_FIELD_DESC);
      oprot.writeI32(struct.cpuCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CPU_CORES_FIELD_DESC);
      oprot.writeI32(struct.cpuCores);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CPU_MHZ_FIELD_DESC);
      oprot.writeI32(struct.cpuMhz);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CPU_USED_PERC_FIELD_DESC);
      oprot.writeDouble(struct.cpuUsedPerc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREE_MEM_FIELD_DESC);
      oprot.writeI64(struct.freeMem);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(JVM_FREE_MEM_FIELD_DESC);
      oprot.writeI64(struct.jvmFreeMem);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeRuntimeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodeRuntimeTupleScheme getScheme() {
      return new NodeRuntimeTupleScheme();
    }
  }

  private static class NodeRuntimeTupleScheme extends org.apache.thrift.scheme.TupleScheme<NodeRuntime> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeRuntime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.cpuCount);
      oprot.writeI32(struct.cpuCores);
      oprot.writeI32(struct.cpuMhz);
      oprot.writeDouble(struct.cpuUsedPerc);
      oprot.writeI64(struct.freeMem);
      oprot.writeI64(struct.jvmFreeMem);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeRuntime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.cpuCount = iprot.readI32();
      struct.setCpuCountIsSet(true);
      struct.cpuCores = iprot.readI32();
      struct.setCpuCoresIsSet(true);
      struct.cpuMhz = iprot.readI32();
      struct.setCpuMhzIsSet(true);
      struct.cpuUsedPerc = iprot.readDouble();
      struct.setCpuUsedPercIsSet(true);
      struct.freeMem = iprot.readI64();
      struct.setFreeMemIsSet(true);
      struct.jvmFreeMem = iprot.readI64();
      struct.setJvmFreeMemIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

