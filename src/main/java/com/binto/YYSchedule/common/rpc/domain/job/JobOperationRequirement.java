/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.binto.YYSchedule.common.rpc.domain.job;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * job operation requirement
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-06-11")
public class JobOperationRequirement implements org.apache.thrift.TBase<JobOperationRequirement, JobOperationRequirement._Fields>, java.io.Serializable, Cloneable, Comparable<JobOperationRequirement> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobOperationRequirement");

  private static final org.apache.thrift.protocol.TField TASK_PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskPhase", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField COMPLEXITY_FIELD_DESC = new org.apache.thrift.protocol.TField("complexity", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JobOperationRequirementStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JobOperationRequirementTupleSchemeFactory();

  /**
   * 
   * @see com.binto.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public com.binto.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase; // required
  public long timeout; // optional
  public long complexity; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.task.TaskPhase
     */
    TASK_PHASE((short)1, "taskPhase"),
    TIMEOUT((short)2, "timeout"),
    COMPLEXITY((short)3, "complexity");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_PHASE
          return TASK_PHASE;
        case 2: // TIMEOUT
          return TIMEOUT;
        case 3: // COMPLEXITY
          return COMPLEXITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMEOUT_ISSET_ID = 0;
  private static final int __COMPLEXITY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TIMEOUT,_Fields.COMPLEXITY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_PHASE, new org.apache.thrift.meta_data.FieldMetaData("taskPhase", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.binto.YYSchedule.common.rpc.domain.task.TaskPhase.class)));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPLEXITY, new org.apache.thrift.meta_data.FieldMetaData("complexity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobOperationRequirement.class, metaDataMap);
  }

  public JobOperationRequirement() {
  }

  public JobOperationRequirement(
    com.binto.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase)
  {
    this();
    this.taskPhase = taskPhase;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobOperationRequirement(JobOperationRequirement other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTaskPhase()) {
      this.taskPhase = other.taskPhase;
    }
    this.timeout = other.timeout;
    this.complexity = other.complexity;
  }

  public JobOperationRequirement deepCopy() {
    return new JobOperationRequirement(this);
  }

  @Override
  public void clear() {
    this.taskPhase = null;
    setTimeoutIsSet(false);
    this.timeout = 0;
    setComplexityIsSet(false);
    this.complexity = 0;
  }

  /**
   * 
   * @see com.binto.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public com.binto.YYSchedule.common.rpc.domain.task.TaskPhase getTaskPhase() {
    return this.taskPhase;
  }

  /**
   * 
   * @see com.binto.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public JobOperationRequirement setTaskPhase(com.binto.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase) {
    this.taskPhase = taskPhase;
    return this;
  }

  public void unsetTaskPhase() {
    this.taskPhase = null;
  }

  /** Returns true if field taskPhase is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskPhase() {
    return this.taskPhase != null;
  }

  public void setTaskPhaseIsSet(boolean value) {
    if (!value) {
      this.taskPhase = null;
    }
  }

  public long getTimeout() {
    return this.timeout;
  }

  public JobOperationRequirement setTimeout(long timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public long getComplexity() {
    return this.complexity;
  }

  public JobOperationRequirement setComplexity(long complexity) {
    this.complexity = complexity;
    setComplexityIsSet(true);
    return this;
  }

  public void unsetComplexity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPLEXITY_ISSET_ID);
  }

  /** Returns true if field complexity is set (has been assigned a value) and false otherwise */
  public boolean isSetComplexity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPLEXITY_ISSET_ID);
  }

  public void setComplexityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPLEXITY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TASK_PHASE:
      if (value == null) {
        unsetTaskPhase();
      } else {
        setTaskPhase((com.binto.YYSchedule.common.rpc.domain.task.TaskPhase)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((java.lang.Long)value);
      }
      break;

    case COMPLEXITY:
      if (value == null) {
        unsetComplexity();
      } else {
        setComplexity((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_PHASE:
      return getTaskPhase();

    case TIMEOUT:
      return getTimeout();

    case COMPLEXITY:
      return getComplexity();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TASK_PHASE:
      return isSetTaskPhase();
    case TIMEOUT:
      return isSetTimeout();
    case COMPLEXITY:
      return isSetComplexity();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof JobOperationRequirement)
      return this.equals((JobOperationRequirement)that);
    return false;
  }

  public boolean equals(JobOperationRequirement that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_taskPhase = true && this.isSetTaskPhase();
    boolean that_present_taskPhase = true && that.isSetTaskPhase();
    if (this_present_taskPhase || that_present_taskPhase) {
      if (!(this_present_taskPhase && that_present_taskPhase))
        return false;
      if (!this.taskPhase.equals(that.taskPhase))
        return false;
    }

    boolean this_present_timeout = true && this.isSetTimeout();
    boolean that_present_timeout = true && that.isSetTimeout();
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_complexity = true && this.isSetComplexity();
    boolean that_present_complexity = true && that.isSetComplexity();
    if (this_present_complexity || that_present_complexity) {
      if (!(this_present_complexity && that_present_complexity))
        return false;
      if (this.complexity != that.complexity)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTaskPhase()) ? 131071 : 524287);
    if (isSetTaskPhase())
      hashCode = hashCode * 8191 + taskPhase.getValue();

    hashCode = hashCode * 8191 + ((isSetTimeout()) ? 131071 : 524287);
    if (isSetTimeout())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeout);

    hashCode = hashCode * 8191 + ((isSetComplexity()) ? 131071 : 524287);
    if (isSetComplexity())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(complexity);

    return hashCode;
  }

  @Override
  public int compareTo(JobOperationRequirement other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTaskPhase()).compareTo(other.isSetTaskPhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskPhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskPhase, other.taskPhase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeout()).compareTo(other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComplexity()).compareTo(other.isSetComplexity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComplexity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complexity, other.complexity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JobOperationRequirement(");
    boolean first = true;

    sb.append("taskPhase:");
    if (this.taskPhase == null) {
      sb.append("null");
    } else {
      sb.append(this.taskPhase);
    }
    first = false;
    if (isSetTimeout()) {
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
    }
    if (isSetComplexity()) {
      if (!first) sb.append(", ");
      sb.append("complexity:");
      sb.append(this.complexity);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (taskPhase == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskPhase' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobOperationRequirementStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobOperationRequirementStandardScheme getScheme() {
      return new JobOperationRequirementStandardScheme();
    }
  }

  private static class JobOperationRequirementStandardScheme extends org.apache.thrift.scheme.StandardScheme<JobOperationRequirement> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobOperationRequirement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskPhase = com.binto.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
              struct.setTaskPhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeout = iprot.readI64();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPLEXITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.complexity = iprot.readI64();
              struct.setComplexityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobOperationRequirement struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskPhase != null) {
        oprot.writeFieldBegin(TASK_PHASE_FIELD_DESC);
        oprot.writeI32(struct.taskPhase.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeout()) {
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI64(struct.timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetComplexity()) {
        oprot.writeFieldBegin(COMPLEXITY_FIELD_DESC);
        oprot.writeI64(struct.complexity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobOperationRequirementTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JobOperationRequirementTupleScheme getScheme() {
      return new JobOperationRequirementTupleScheme();
    }
  }

  private static class JobOperationRequirementTupleScheme extends org.apache.thrift.scheme.TupleScheme<JobOperationRequirement> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobOperationRequirement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.taskPhase.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTimeout()) {
        optionals.set(0);
      }
      if (struct.isSetComplexity()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTimeout()) {
        oprot.writeI64(struct.timeout);
      }
      if (struct.isSetComplexity()) {
        oprot.writeI64(struct.complexity);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobOperationRequirement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.taskPhase = com.binto.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
      struct.setTaskPhaseIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.timeout = iprot.readI64();
        struct.setTimeoutIsSet(true);
      }
      if (incoming.get(1)) {
        struct.complexity = iprot.readI64();
        struct.setComplexityIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

