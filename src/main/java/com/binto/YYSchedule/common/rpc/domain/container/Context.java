/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.binto.YYSchedule.common.rpc.domain.container;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * container context info
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-06-11")
public class Context implements org.apache.thrift.TBase<Context, Context._Fields>, java.io.Serializable, Cloneable, Comparable<Context> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Context");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TASK_PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskPhase", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField COMPLEXITY_FIELD_DESC = new org.apache.thrift.protocol.TField("complexity", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField PROGRAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("programId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PROGRAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("programName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SCRIPT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("scriptName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SCRIPT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("scriptPath", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SCRIPT_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("scriptMd5", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField EXECUTABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("executableName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField EXECUTABLE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("executablePath", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField EXECUTABLE_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("executableMd5", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ENV_VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("envVariables", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("parameter", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField RESULT_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("resultAddress", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField FUNCTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("functionName", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ContextStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ContextTupleSchemeFactory();

  public long taskId; // required
  /**
   * 
   * @see com.binto.YYSchedule.common.rpc.domain.job.JobPriority
   */
  public com.binto.YYSchedule.common.rpc.domain.job.JobPriority priority; // required
  /**
   * 
   * @see com.binto.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public com.binto.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase; // required
  public long timeout; // optional
  public long complexity; // optional
  public long programId; // required
  public java.lang.String programName; // required
  public java.lang.String scriptName; // required
  public java.lang.String scriptPath; // required
  public java.lang.String scriptMd5; // required
  public java.lang.String executableName; // required
  public java.lang.String executablePath; // required
  public java.lang.String executableMd5; // required
  public java.lang.String envVariables; // optional
  public com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter parameter; // optional
  public java.lang.String resultAddress; // optional
  public java.lang.String functionName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.job.JobPriority
     */
    PRIORITY((short)2, "priority"),
    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.task.TaskPhase
     */
    TASK_PHASE((short)3, "taskPhase"),
    TIMEOUT((short)4, "timeout"),
    COMPLEXITY((short)5, "complexity"),
    PROGRAM_ID((short)6, "programId"),
    PROGRAM_NAME((short)7, "programName"),
    SCRIPT_NAME((short)8, "scriptName"),
    SCRIPT_PATH((short)9, "scriptPath"),
    SCRIPT_MD5((short)10, "scriptMd5"),
    EXECUTABLE_NAME((short)11, "executableName"),
    EXECUTABLE_PATH((short)12, "executablePath"),
    EXECUTABLE_MD5((short)13, "executableMd5"),
    ENV_VARIABLES((short)14, "envVariables"),
    PARAMETER((short)15, "parameter"),
    RESULT_ADDRESS((short)16, "resultAddress"),
    FUNCTION_NAME((short)17, "functionName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // PRIORITY
          return PRIORITY;
        case 3: // TASK_PHASE
          return TASK_PHASE;
        case 4: // TIMEOUT
          return TIMEOUT;
        case 5: // COMPLEXITY
          return COMPLEXITY;
        case 6: // PROGRAM_ID
          return PROGRAM_ID;
        case 7: // PROGRAM_NAME
          return PROGRAM_NAME;
        case 8: // SCRIPT_NAME
          return SCRIPT_NAME;
        case 9: // SCRIPT_PATH
          return SCRIPT_PATH;
        case 10: // SCRIPT_MD5
          return SCRIPT_MD5;
        case 11: // EXECUTABLE_NAME
          return EXECUTABLE_NAME;
        case 12: // EXECUTABLE_PATH
          return EXECUTABLE_PATH;
        case 13: // EXECUTABLE_MD5
          return EXECUTABLE_MD5;
        case 14: // ENV_VARIABLES
          return ENV_VARIABLES;
        case 15: // PARAMETER
          return PARAMETER;
        case 16: // RESULT_ADDRESS
          return RESULT_ADDRESS;
        case 17: // FUNCTION_NAME
          return FUNCTION_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKID_ISSET_ID = 0;
  private static final int __TIMEOUT_ISSET_ID = 1;
  private static final int __COMPLEXITY_ISSET_ID = 2;
  private static final int __PROGRAMID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TIMEOUT,_Fields.COMPLEXITY,_Fields.ENV_VARIABLES,_Fields.PARAMETER,_Fields.RESULT_ADDRESS,_Fields.FUNCTION_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.binto.YYSchedule.common.rpc.domain.job.JobPriority.class)));
    tmpMap.put(_Fields.TASK_PHASE, new org.apache.thrift.meta_data.FieldMetaData("taskPhase", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.binto.YYSchedule.common.rpc.domain.task.TaskPhase.class)));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPLEXITY, new org.apache.thrift.meta_data.FieldMetaData("complexity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROGRAM_ID, new org.apache.thrift.meta_data.FieldMetaData("programId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROGRAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("programName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRIPT_NAME, new org.apache.thrift.meta_data.FieldMetaData("scriptName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRIPT_PATH, new org.apache.thrift.meta_data.FieldMetaData("scriptPath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCRIPT_MD5, new org.apache.thrift.meta_data.FieldMetaData("scriptMd5", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("executableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTABLE_PATH, new org.apache.thrift.meta_data.FieldMetaData("executablePath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTABLE_MD5, new org.apache.thrift.meta_data.FieldMetaData("executableMd5", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENV_VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("envVariables", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("parameter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter.class)));
    tmpMap.put(_Fields.RESULT_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("resultAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FUNCTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("functionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Context.class, metaDataMap);
  }

  public Context() {
  }

  public Context(
    long taskId,
    com.binto.YYSchedule.common.rpc.domain.job.JobPriority priority,
    com.binto.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase,
    long programId,
    java.lang.String programName,
    java.lang.String scriptName,
    java.lang.String scriptPath,
    java.lang.String scriptMd5,
    java.lang.String executableName,
    java.lang.String executablePath,
    java.lang.String executableMd5)
  {
    this();
    this.taskId = taskId;
    setTaskIdIsSet(true);
    this.priority = priority;
    this.taskPhase = taskPhase;
    this.programId = programId;
    setProgramIdIsSet(true);
    this.programName = programName;
    this.scriptName = scriptName;
    this.scriptPath = scriptPath;
    this.scriptMd5 = scriptMd5;
    this.executableName = executableName;
    this.executablePath = executablePath;
    this.executableMd5 = executableMd5;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Context(Context other) {
    __isset_bitfield = other.__isset_bitfield;
    this.taskId = other.taskId;
    if (other.isSetPriority()) {
      this.priority = other.priority;
    }
    if (other.isSetTaskPhase()) {
      this.taskPhase = other.taskPhase;
    }
    this.timeout = other.timeout;
    this.complexity = other.complexity;
    this.programId = other.programId;
    if (other.isSetProgramName()) {
      this.programName = other.programName;
    }
    if (other.isSetScriptName()) {
      this.scriptName = other.scriptName;
    }
    if (other.isSetScriptPath()) {
      this.scriptPath = other.scriptPath;
    }
    if (other.isSetScriptMd5()) {
      this.scriptMd5 = other.scriptMd5;
    }
    if (other.isSetExecutableName()) {
      this.executableName = other.executableName;
    }
    if (other.isSetExecutablePath()) {
      this.executablePath = other.executablePath;
    }
    if (other.isSetExecutableMd5()) {
      this.executableMd5 = other.executableMd5;
    }
    if (other.isSetEnvVariables()) {
      this.envVariables = other.envVariables;
    }
    if (other.isSetParameter()) {
      this.parameter = new com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter(other.parameter);
    }
    if (other.isSetResultAddress()) {
      this.resultAddress = other.resultAddress;
    }
    if (other.isSetFunctionName()) {
      this.functionName = other.functionName;
    }
  }

  public Context deepCopy() {
    return new Context(this);
  }

  @Override
  public void clear() {
    setTaskIdIsSet(false);
    this.taskId = 0;
    this.priority = null;
    this.taskPhase = null;
    setTimeoutIsSet(false);
    this.timeout = 0;
    setComplexityIsSet(false);
    this.complexity = 0;
    setProgramIdIsSet(false);
    this.programId = 0;
    this.programName = null;
    this.scriptName = null;
    this.scriptPath = null;
    this.scriptMd5 = null;
    this.executableName = null;
    this.executablePath = null;
    this.executableMd5 = null;
    this.envVariables = null;
    this.parameter = null;
    this.resultAddress = null;
    this.functionName = null;
  }

  public long getTaskId() {
    return this.taskId;
  }

  public Context setTaskId(long taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.binto.YYSchedule.common.rpc.domain.job.JobPriority
   */
  public com.binto.YYSchedule.common.rpc.domain.job.JobPriority getPriority() {
    return this.priority;
  }

  /**
   * 
   * @see com.binto.YYSchedule.common.rpc.domain.job.JobPriority
   */
  public Context setPriority(com.binto.YYSchedule.common.rpc.domain.job.JobPriority priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  /**
   * 
   * @see com.binto.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public com.binto.YYSchedule.common.rpc.domain.task.TaskPhase getTaskPhase() {
    return this.taskPhase;
  }

  /**
   * 
   * @see com.binto.YYSchedule.common.rpc.domain.task.TaskPhase
   */
  public Context setTaskPhase(com.binto.YYSchedule.common.rpc.domain.task.TaskPhase taskPhase) {
    this.taskPhase = taskPhase;
    return this;
  }

  public void unsetTaskPhase() {
    this.taskPhase = null;
  }

  /** Returns true if field taskPhase is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskPhase() {
    return this.taskPhase != null;
  }

  public void setTaskPhaseIsSet(boolean value) {
    if (!value) {
      this.taskPhase = null;
    }
  }

  public long getTimeout() {
    return this.timeout;
  }

  public Context setTimeout(long timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public long getComplexity() {
    return this.complexity;
  }

  public Context setComplexity(long complexity) {
    this.complexity = complexity;
    setComplexityIsSet(true);
    return this;
  }

  public void unsetComplexity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPLEXITY_ISSET_ID);
  }

  /** Returns true if field complexity is set (has been assigned a value) and false otherwise */
  public boolean isSetComplexity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPLEXITY_ISSET_ID);
  }

  public void setComplexityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPLEXITY_ISSET_ID, value);
  }

  public long getProgramId() {
    return this.programId;
  }

  public Context setProgramId(long programId) {
    this.programId = programId;
    setProgramIdIsSet(true);
    return this;
  }

  public void unsetProgramId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROGRAMID_ISSET_ID);
  }

  /** Returns true if field programId is set (has been assigned a value) and false otherwise */
  public boolean isSetProgramId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROGRAMID_ISSET_ID);
  }

  public void setProgramIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROGRAMID_ISSET_ID, value);
  }

  public java.lang.String getProgramName() {
    return this.programName;
  }

  public Context setProgramName(java.lang.String programName) {
    this.programName = programName;
    return this;
  }

  public void unsetProgramName() {
    this.programName = null;
  }

  /** Returns true if field programName is set (has been assigned a value) and false otherwise */
  public boolean isSetProgramName() {
    return this.programName != null;
  }

  public void setProgramNameIsSet(boolean value) {
    if (!value) {
      this.programName = null;
    }
  }

  public java.lang.String getScriptName() {
    return this.scriptName;
  }

  public Context setScriptName(java.lang.String scriptName) {
    this.scriptName = scriptName;
    return this;
  }

  public void unsetScriptName() {
    this.scriptName = null;
  }

  /** Returns true if field scriptName is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptName() {
    return this.scriptName != null;
  }

  public void setScriptNameIsSet(boolean value) {
    if (!value) {
      this.scriptName = null;
    }
  }

  public java.lang.String getScriptPath() {
    return this.scriptPath;
  }

  public Context setScriptPath(java.lang.String scriptPath) {
    this.scriptPath = scriptPath;
    return this;
  }

  public void unsetScriptPath() {
    this.scriptPath = null;
  }

  /** Returns true if field scriptPath is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptPath() {
    return this.scriptPath != null;
  }

  public void setScriptPathIsSet(boolean value) {
    if (!value) {
      this.scriptPath = null;
    }
  }

  public java.lang.String getScriptMd5() {
    return this.scriptMd5;
  }

  public Context setScriptMd5(java.lang.String scriptMd5) {
    this.scriptMd5 = scriptMd5;
    return this;
  }

  public void unsetScriptMd5() {
    this.scriptMd5 = null;
  }

  /** Returns true if field scriptMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetScriptMd5() {
    return this.scriptMd5 != null;
  }

  public void setScriptMd5IsSet(boolean value) {
    if (!value) {
      this.scriptMd5 = null;
    }
  }

  public java.lang.String getExecutableName() {
    return this.executableName;
  }

  public Context setExecutableName(java.lang.String executableName) {
    this.executableName = executableName;
    return this;
  }

  public void unsetExecutableName() {
    this.executableName = null;
  }

  /** Returns true if field executableName is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutableName() {
    return this.executableName != null;
  }

  public void setExecutableNameIsSet(boolean value) {
    if (!value) {
      this.executableName = null;
    }
  }

  public java.lang.String getExecutablePath() {
    return this.executablePath;
  }

  public Context setExecutablePath(java.lang.String executablePath) {
    this.executablePath = executablePath;
    return this;
  }

  public void unsetExecutablePath() {
    this.executablePath = null;
  }

  /** Returns true if field executablePath is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutablePath() {
    return this.executablePath != null;
  }

  public void setExecutablePathIsSet(boolean value) {
    if (!value) {
      this.executablePath = null;
    }
  }

  public java.lang.String getExecutableMd5() {
    return this.executableMd5;
  }

  public Context setExecutableMd5(java.lang.String executableMd5) {
    this.executableMd5 = executableMd5;
    return this;
  }

  public void unsetExecutableMd5() {
    this.executableMd5 = null;
  }

  /** Returns true if field executableMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutableMd5() {
    return this.executableMd5 != null;
  }

  public void setExecutableMd5IsSet(boolean value) {
    if (!value) {
      this.executableMd5 = null;
    }
  }

  public java.lang.String getEnvVariables() {
    return this.envVariables;
  }

  public Context setEnvVariables(java.lang.String envVariables) {
    this.envVariables = envVariables;
    return this;
  }

  public void unsetEnvVariables() {
    this.envVariables = null;
  }

  /** Returns true if field envVariables is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvVariables() {
    return this.envVariables != null;
  }

  public void setEnvVariablesIsSet(boolean value) {
    if (!value) {
      this.envVariables = null;
    }
  }

  public com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter getParameter() {
    return this.parameter;
  }

  public Context setParameter(com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter parameter) {
    this.parameter = parameter;
    return this;
  }

  public void unsetParameter() {
    this.parameter = null;
  }

  /** Returns true if field parameter is set (has been assigned a value) and false otherwise */
  public boolean isSetParameter() {
    return this.parameter != null;
  }

  public void setParameterIsSet(boolean value) {
    if (!value) {
      this.parameter = null;
    }
  }

  public java.lang.String getResultAddress() {
    return this.resultAddress;
  }

  public Context setResultAddress(java.lang.String resultAddress) {
    this.resultAddress = resultAddress;
    return this;
  }

  public void unsetResultAddress() {
    this.resultAddress = null;
  }

  /** Returns true if field resultAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetResultAddress() {
    return this.resultAddress != null;
  }

  public void setResultAddressIsSet(boolean value) {
    if (!value) {
      this.resultAddress = null;
    }
  }

  public java.lang.String getFunctionName() {
    return this.functionName;
  }

  public Context setFunctionName(java.lang.String functionName) {
    this.functionName = functionName;
    return this;
  }

  public void unsetFunctionName() {
    this.functionName = null;
  }

  /** Returns true if field functionName is set (has been assigned a value) and false otherwise */
  public boolean isSetFunctionName() {
    return this.functionName != null;
  }

  public void setFunctionNameIsSet(boolean value) {
    if (!value) {
      this.functionName = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((java.lang.Long)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((com.binto.YYSchedule.common.rpc.domain.job.JobPriority)value);
      }
      break;

    case TASK_PHASE:
      if (value == null) {
        unsetTaskPhase();
      } else {
        setTaskPhase((com.binto.YYSchedule.common.rpc.domain.task.TaskPhase)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((java.lang.Long)value);
      }
      break;

    case COMPLEXITY:
      if (value == null) {
        unsetComplexity();
      } else {
        setComplexity((java.lang.Long)value);
      }
      break;

    case PROGRAM_ID:
      if (value == null) {
        unsetProgramId();
      } else {
        setProgramId((java.lang.Long)value);
      }
      break;

    case PROGRAM_NAME:
      if (value == null) {
        unsetProgramName();
      } else {
        setProgramName((java.lang.String)value);
      }
      break;

    case SCRIPT_NAME:
      if (value == null) {
        unsetScriptName();
      } else {
        setScriptName((java.lang.String)value);
      }
      break;

    case SCRIPT_PATH:
      if (value == null) {
        unsetScriptPath();
      } else {
        setScriptPath((java.lang.String)value);
      }
      break;

    case SCRIPT_MD5:
      if (value == null) {
        unsetScriptMd5();
      } else {
        setScriptMd5((java.lang.String)value);
      }
      break;

    case EXECUTABLE_NAME:
      if (value == null) {
        unsetExecutableName();
      } else {
        setExecutableName((java.lang.String)value);
      }
      break;

    case EXECUTABLE_PATH:
      if (value == null) {
        unsetExecutablePath();
      } else {
        setExecutablePath((java.lang.String)value);
      }
      break;

    case EXECUTABLE_MD5:
      if (value == null) {
        unsetExecutableMd5();
      } else {
        setExecutableMd5((java.lang.String)value);
      }
      break;

    case ENV_VARIABLES:
      if (value == null) {
        unsetEnvVariables();
      } else {
        setEnvVariables((java.lang.String)value);
      }
      break;

    case PARAMETER:
      if (value == null) {
        unsetParameter();
      } else {
        setParameter((com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter)value);
      }
      break;

    case RESULT_ADDRESS:
      if (value == null) {
        unsetResultAddress();
      } else {
        setResultAddress((java.lang.String)value);
      }
      break;

    case FUNCTION_NAME:
      if (value == null) {
        unsetFunctionName();
      } else {
        setFunctionName((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return getTaskId();

    case PRIORITY:
      return getPriority();

    case TASK_PHASE:
      return getTaskPhase();

    case TIMEOUT:
      return getTimeout();

    case COMPLEXITY:
      return getComplexity();

    case PROGRAM_ID:
      return getProgramId();

    case PROGRAM_NAME:
      return getProgramName();

    case SCRIPT_NAME:
      return getScriptName();

    case SCRIPT_PATH:
      return getScriptPath();

    case SCRIPT_MD5:
      return getScriptMd5();

    case EXECUTABLE_NAME:
      return getExecutableName();

    case EXECUTABLE_PATH:
      return getExecutablePath();

    case EXECUTABLE_MD5:
      return getExecutableMd5();

    case ENV_VARIABLES:
      return getEnvVariables();

    case PARAMETER:
      return getParameter();

    case RESULT_ADDRESS:
      return getResultAddress();

    case FUNCTION_NAME:
      return getFunctionName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case PRIORITY:
      return isSetPriority();
    case TASK_PHASE:
      return isSetTaskPhase();
    case TIMEOUT:
      return isSetTimeout();
    case COMPLEXITY:
      return isSetComplexity();
    case PROGRAM_ID:
      return isSetProgramId();
    case PROGRAM_NAME:
      return isSetProgramName();
    case SCRIPT_NAME:
      return isSetScriptName();
    case SCRIPT_PATH:
      return isSetScriptPath();
    case SCRIPT_MD5:
      return isSetScriptMd5();
    case EXECUTABLE_NAME:
      return isSetExecutableName();
    case EXECUTABLE_PATH:
      return isSetExecutablePath();
    case EXECUTABLE_MD5:
      return isSetExecutableMd5();
    case ENV_VARIABLES:
      return isSetEnvVariables();
    case PARAMETER:
      return isSetParameter();
    case RESULT_ADDRESS:
      return isSetResultAddress();
    case FUNCTION_NAME:
      return isSetFunctionName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Context)
      return this.equals((Context)that);
    return false;
  }

  public boolean equals(Context that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_taskId = true;
    boolean that_present_taskId = true;
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_taskPhase = true && this.isSetTaskPhase();
    boolean that_present_taskPhase = true && that.isSetTaskPhase();
    if (this_present_taskPhase || that_present_taskPhase) {
      if (!(this_present_taskPhase && that_present_taskPhase))
        return false;
      if (!this.taskPhase.equals(that.taskPhase))
        return false;
    }

    boolean this_present_timeout = true && this.isSetTimeout();
    boolean that_present_timeout = true && that.isSetTimeout();
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_complexity = true && this.isSetComplexity();
    boolean that_present_complexity = true && that.isSetComplexity();
    if (this_present_complexity || that_present_complexity) {
      if (!(this_present_complexity && that_present_complexity))
        return false;
      if (this.complexity != that.complexity)
        return false;
    }

    boolean this_present_programId = true;
    boolean that_present_programId = true;
    if (this_present_programId || that_present_programId) {
      if (!(this_present_programId && that_present_programId))
        return false;
      if (this.programId != that.programId)
        return false;
    }

    boolean this_present_programName = true && this.isSetProgramName();
    boolean that_present_programName = true && that.isSetProgramName();
    if (this_present_programName || that_present_programName) {
      if (!(this_present_programName && that_present_programName))
        return false;
      if (!this.programName.equals(that.programName))
        return false;
    }

    boolean this_present_scriptName = true && this.isSetScriptName();
    boolean that_present_scriptName = true && that.isSetScriptName();
    if (this_present_scriptName || that_present_scriptName) {
      if (!(this_present_scriptName && that_present_scriptName))
        return false;
      if (!this.scriptName.equals(that.scriptName))
        return false;
    }

    boolean this_present_scriptPath = true && this.isSetScriptPath();
    boolean that_present_scriptPath = true && that.isSetScriptPath();
    if (this_present_scriptPath || that_present_scriptPath) {
      if (!(this_present_scriptPath && that_present_scriptPath))
        return false;
      if (!this.scriptPath.equals(that.scriptPath))
        return false;
    }

    boolean this_present_scriptMd5 = true && this.isSetScriptMd5();
    boolean that_present_scriptMd5 = true && that.isSetScriptMd5();
    if (this_present_scriptMd5 || that_present_scriptMd5) {
      if (!(this_present_scriptMd5 && that_present_scriptMd5))
        return false;
      if (!this.scriptMd5.equals(that.scriptMd5))
        return false;
    }

    boolean this_present_executableName = true && this.isSetExecutableName();
    boolean that_present_executableName = true && that.isSetExecutableName();
    if (this_present_executableName || that_present_executableName) {
      if (!(this_present_executableName && that_present_executableName))
        return false;
      if (!this.executableName.equals(that.executableName))
        return false;
    }

    boolean this_present_executablePath = true && this.isSetExecutablePath();
    boolean that_present_executablePath = true && that.isSetExecutablePath();
    if (this_present_executablePath || that_present_executablePath) {
      if (!(this_present_executablePath && that_present_executablePath))
        return false;
      if (!this.executablePath.equals(that.executablePath))
        return false;
    }

    boolean this_present_executableMd5 = true && this.isSetExecutableMd5();
    boolean that_present_executableMd5 = true && that.isSetExecutableMd5();
    if (this_present_executableMd5 || that_present_executableMd5) {
      if (!(this_present_executableMd5 && that_present_executableMd5))
        return false;
      if (!this.executableMd5.equals(that.executableMd5))
        return false;
    }

    boolean this_present_envVariables = true && this.isSetEnvVariables();
    boolean that_present_envVariables = true && that.isSetEnvVariables();
    if (this_present_envVariables || that_present_envVariables) {
      if (!(this_present_envVariables && that_present_envVariables))
        return false;
      if (!this.envVariables.equals(that.envVariables))
        return false;
    }

    boolean this_present_parameter = true && this.isSetParameter();
    boolean that_present_parameter = true && that.isSetParameter();
    if (this_present_parameter || that_present_parameter) {
      if (!(this_present_parameter && that_present_parameter))
        return false;
      if (!this.parameter.equals(that.parameter))
        return false;
    }

    boolean this_present_resultAddress = true && this.isSetResultAddress();
    boolean that_present_resultAddress = true && that.isSetResultAddress();
    if (this_present_resultAddress || that_present_resultAddress) {
      if (!(this_present_resultAddress && that_present_resultAddress))
        return false;
      if (!this.resultAddress.equals(that.resultAddress))
        return false;
    }

    boolean this_present_functionName = true && this.isSetFunctionName();
    boolean that_present_functionName = true && that.isSetFunctionName();
    if (this_present_functionName || that_present_functionName) {
      if (!(this_present_functionName && that_present_functionName))
        return false;
      if (!this.functionName.equals(that.functionName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(taskId);

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + priority.getValue();

    hashCode = hashCode * 8191 + ((isSetTaskPhase()) ? 131071 : 524287);
    if (isSetTaskPhase())
      hashCode = hashCode * 8191 + taskPhase.getValue();

    hashCode = hashCode * 8191 + ((isSetTimeout()) ? 131071 : 524287);
    if (isSetTimeout())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeout);

    hashCode = hashCode * 8191 + ((isSetComplexity()) ? 131071 : 524287);
    if (isSetComplexity())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(complexity);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(programId);

    hashCode = hashCode * 8191 + ((isSetProgramName()) ? 131071 : 524287);
    if (isSetProgramName())
      hashCode = hashCode * 8191 + programName.hashCode();

    hashCode = hashCode * 8191 + ((isSetScriptName()) ? 131071 : 524287);
    if (isSetScriptName())
      hashCode = hashCode * 8191 + scriptName.hashCode();

    hashCode = hashCode * 8191 + ((isSetScriptPath()) ? 131071 : 524287);
    if (isSetScriptPath())
      hashCode = hashCode * 8191 + scriptPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetScriptMd5()) ? 131071 : 524287);
    if (isSetScriptMd5())
      hashCode = hashCode * 8191 + scriptMd5.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecutableName()) ? 131071 : 524287);
    if (isSetExecutableName())
      hashCode = hashCode * 8191 + executableName.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecutablePath()) ? 131071 : 524287);
    if (isSetExecutablePath())
      hashCode = hashCode * 8191 + executablePath.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecutableMd5()) ? 131071 : 524287);
    if (isSetExecutableMd5())
      hashCode = hashCode * 8191 + executableMd5.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnvVariables()) ? 131071 : 524287);
    if (isSetEnvVariables())
      hashCode = hashCode * 8191 + envVariables.hashCode();

    hashCode = hashCode * 8191 + ((isSetParameter()) ? 131071 : 524287);
    if (isSetParameter())
      hashCode = hashCode * 8191 + parameter.hashCode();

    hashCode = hashCode * 8191 + ((isSetResultAddress()) ? 131071 : 524287);
    if (isSetResultAddress())
      hashCode = hashCode * 8191 + resultAddress.hashCode();

    hashCode = hashCode * 8191 + ((isSetFunctionName()) ? 131071 : 524287);
    if (isSetFunctionName())
      hashCode = hashCode * 8191 + functionName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Context other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaskPhase()).compareTo(other.isSetTaskPhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskPhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskPhase, other.taskPhase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeout()).compareTo(other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComplexity()).compareTo(other.isSetComplexity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComplexity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complexity, other.complexity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProgramId()).compareTo(other.isSetProgramId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgramId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programId, other.programId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProgramName()).compareTo(other.isSetProgramName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgramName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programName, other.programName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScriptName()).compareTo(other.isSetScriptName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scriptName, other.scriptName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScriptPath()).compareTo(other.isSetScriptPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scriptPath, other.scriptPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScriptMd5()).compareTo(other.isSetScriptMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScriptMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scriptMd5, other.scriptMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecutableName()).compareTo(other.isSetExecutableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executableName, other.executableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecutablePath()).compareTo(other.isSetExecutablePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutablePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executablePath, other.executablePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecutableMd5()).compareTo(other.isSetExecutableMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutableMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executableMd5, other.executableMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnvVariables()).compareTo(other.isSetEnvVariables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvVariables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.envVariables, other.envVariables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParameter()).compareTo(other.isSetParameter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameter, other.parameter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResultAddress()).compareTo(other.isSetResultAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultAddress, other.resultAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFunctionName()).compareTo(other.isSetFunctionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunctionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functionName, other.functionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Context(");
    boolean first = true;

    sb.append("taskId:");
    sb.append(this.taskId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    if (this.priority == null) {
      sb.append("null");
    } else {
      sb.append(this.priority);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskPhase:");
    if (this.taskPhase == null) {
      sb.append("null");
    } else {
      sb.append(this.taskPhase);
    }
    first = false;
    if (isSetTimeout()) {
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
    }
    if (isSetComplexity()) {
      if (!first) sb.append(", ");
      sb.append("complexity:");
      sb.append(this.complexity);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("programId:");
    sb.append(this.programId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("programName:");
    if (this.programName == null) {
      sb.append("null");
    } else {
      sb.append(this.programName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scriptName:");
    if (this.scriptName == null) {
      sb.append("null");
    } else {
      sb.append(this.scriptName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scriptPath:");
    if (this.scriptPath == null) {
      sb.append("null");
    } else {
      sb.append(this.scriptPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scriptMd5:");
    if (this.scriptMd5 == null) {
      sb.append("null");
    } else {
      sb.append(this.scriptMd5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executableName:");
    if (this.executableName == null) {
      sb.append("null");
    } else {
      sb.append(this.executableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executablePath:");
    if (this.executablePath == null) {
      sb.append("null");
    } else {
      sb.append(this.executablePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executableMd5:");
    if (this.executableMd5 == null) {
      sb.append("null");
    } else {
      sb.append(this.executableMd5);
    }
    first = false;
    if (isSetEnvVariables()) {
      if (!first) sb.append(", ");
      sb.append("envVariables:");
      if (this.envVariables == null) {
        sb.append("null");
      } else {
        sb.append(this.envVariables);
      }
      first = false;
    }
    if (isSetParameter()) {
      if (!first) sb.append(", ");
      sb.append("parameter:");
      if (this.parameter == null) {
        sb.append("null");
      } else {
        sb.append(this.parameter);
      }
      first = false;
    }
    if (isSetResultAddress()) {
      if (!first) sb.append(", ");
      sb.append("resultAddress:");
      if (this.resultAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.resultAddress);
      }
      first = false;
    }
    if (isSetFunctionName()) {
      if (!first) sb.append(", ");
      sb.append("functionName:");
      if (this.functionName == null) {
        sb.append("null");
      } else {
        sb.append(this.functionName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'taskId' because it's a primitive and you chose the non-beans generator.
    if (priority == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'priority' was not present! Struct: " + toString());
    }
    if (taskPhase == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskPhase' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'programId' because it's a primitive and you chose the non-beans generator.
    if (programName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'programName' was not present! Struct: " + toString());
    }
    if (scriptName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scriptName' was not present! Struct: " + toString());
    }
    if (scriptPath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scriptPath' was not present! Struct: " + toString());
    }
    if (scriptMd5 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scriptMd5' was not present! Struct: " + toString());
    }
    if (executableName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executableName' was not present! Struct: " + toString());
    }
    if (executablePath == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executablePath' was not present! Struct: " + toString());
    }
    if (executableMd5 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executableMd5' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (parameter != null) {
      parameter.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContextStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContextStandardScheme getScheme() {
      return new ContextStandardScheme();
    }
  }

  private static class ContextStandardScheme extends org.apache.thrift.scheme.StandardScheme<Context> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Context struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.taskId = iprot.readI64();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = com.binto.YYSchedule.common.rpc.domain.job.JobPriority.findByValue(iprot.readI32());
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASK_PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskPhase = com.binto.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
              struct.setTaskPhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeout = iprot.readI64();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPLEXITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.complexity = iprot.readI64();
              struct.setComplexityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROGRAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.programId = iprot.readI64();
              struct.setProgramIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROGRAM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.programName = iprot.readString();
              struct.setProgramNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SCRIPT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scriptName = iprot.readString();
              struct.setScriptNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SCRIPT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scriptPath = iprot.readString();
              struct.setScriptPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SCRIPT_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scriptMd5 = iprot.readString();
              struct.setScriptMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXECUTABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executableName = iprot.readString();
              struct.setExecutableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXECUTABLE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executablePath = iprot.readString();
              struct.setExecutablePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EXECUTABLE_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executableMd5 = iprot.readString();
              struct.setExecutableMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ENV_VARIABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.envVariables = iprot.readString();
              struct.setEnvVariablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PARAMETER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.parameter = new com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter();
              struct.parameter.read(iprot);
              struct.setParameterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RESULT_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultAddress = iprot.readString();
              struct.setResultAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FUNCTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.functionName = iprot.readString();
              struct.setFunctionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTaskId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProgramId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'programId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Context struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI64(struct.taskId);
      oprot.writeFieldEnd();
      if (struct.priority != null) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.priority.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.taskPhase != null) {
        oprot.writeFieldBegin(TASK_PHASE_FIELD_DESC);
        oprot.writeI32(struct.taskPhase.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeout()) {
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI64(struct.timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetComplexity()) {
        oprot.writeFieldBegin(COMPLEXITY_FIELD_DESC);
        oprot.writeI64(struct.complexity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROGRAM_ID_FIELD_DESC);
      oprot.writeI64(struct.programId);
      oprot.writeFieldEnd();
      if (struct.programName != null) {
        oprot.writeFieldBegin(PROGRAM_NAME_FIELD_DESC);
        oprot.writeString(struct.programName);
        oprot.writeFieldEnd();
      }
      if (struct.scriptName != null) {
        oprot.writeFieldBegin(SCRIPT_NAME_FIELD_DESC);
        oprot.writeString(struct.scriptName);
        oprot.writeFieldEnd();
      }
      if (struct.scriptPath != null) {
        oprot.writeFieldBegin(SCRIPT_PATH_FIELD_DESC);
        oprot.writeString(struct.scriptPath);
        oprot.writeFieldEnd();
      }
      if (struct.scriptMd5 != null) {
        oprot.writeFieldBegin(SCRIPT_MD5_FIELD_DESC);
        oprot.writeString(struct.scriptMd5);
        oprot.writeFieldEnd();
      }
      if (struct.executableName != null) {
        oprot.writeFieldBegin(EXECUTABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.executableName);
        oprot.writeFieldEnd();
      }
      if (struct.executablePath != null) {
        oprot.writeFieldBegin(EXECUTABLE_PATH_FIELD_DESC);
        oprot.writeString(struct.executablePath);
        oprot.writeFieldEnd();
      }
      if (struct.executableMd5 != null) {
        oprot.writeFieldBegin(EXECUTABLE_MD5_FIELD_DESC);
        oprot.writeString(struct.executableMd5);
        oprot.writeFieldEnd();
      }
      if (struct.envVariables != null) {
        if (struct.isSetEnvVariables()) {
          oprot.writeFieldBegin(ENV_VARIABLES_FIELD_DESC);
          oprot.writeString(struct.envVariables);
          oprot.writeFieldEnd();
        }
      }
      if (struct.parameter != null) {
        if (struct.isSetParameter()) {
          oprot.writeFieldBegin(PARAMETER_FIELD_DESC);
          struct.parameter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resultAddress != null) {
        if (struct.isSetResultAddress()) {
          oprot.writeFieldBegin(RESULT_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.resultAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.functionName != null) {
        if (struct.isSetFunctionName()) {
          oprot.writeFieldBegin(FUNCTION_NAME_FIELD_DESC);
          oprot.writeString(struct.functionName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContextTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContextTupleScheme getScheme() {
      return new ContextTupleScheme();
    }
  }

  private static class ContextTupleScheme extends org.apache.thrift.scheme.TupleScheme<Context> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Context struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.taskId);
      oprot.writeI32(struct.priority.getValue());
      oprot.writeI32(struct.taskPhase.getValue());
      oprot.writeI64(struct.programId);
      oprot.writeString(struct.programName);
      oprot.writeString(struct.scriptName);
      oprot.writeString(struct.scriptPath);
      oprot.writeString(struct.scriptMd5);
      oprot.writeString(struct.executableName);
      oprot.writeString(struct.executablePath);
      oprot.writeString(struct.executableMd5);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTimeout()) {
        optionals.set(0);
      }
      if (struct.isSetComplexity()) {
        optionals.set(1);
      }
      if (struct.isSetEnvVariables()) {
        optionals.set(2);
      }
      if (struct.isSetParameter()) {
        optionals.set(3);
      }
      if (struct.isSetResultAddress()) {
        optionals.set(4);
      }
      if (struct.isSetFunctionName()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTimeout()) {
        oprot.writeI64(struct.timeout);
      }
      if (struct.isSetComplexity()) {
        oprot.writeI64(struct.complexity);
      }
      if (struct.isSetEnvVariables()) {
        oprot.writeString(struct.envVariables);
      }
      if (struct.isSetParameter()) {
        struct.parameter.write(oprot);
      }
      if (struct.isSetResultAddress()) {
        oprot.writeString(struct.resultAddress);
      }
      if (struct.isSetFunctionName()) {
        oprot.writeString(struct.functionName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Context struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.taskId = iprot.readI64();
      struct.setTaskIdIsSet(true);
      struct.priority = com.binto.YYSchedule.common.rpc.domain.job.JobPriority.findByValue(iprot.readI32());
      struct.setPriorityIsSet(true);
      struct.taskPhase = com.binto.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
      struct.setTaskPhaseIsSet(true);
      struct.programId = iprot.readI64();
      struct.setProgramIdIsSet(true);
      struct.programName = iprot.readString();
      struct.setProgramNameIsSet(true);
      struct.scriptName = iprot.readString();
      struct.setScriptNameIsSet(true);
      struct.scriptPath = iprot.readString();
      struct.setScriptPathIsSet(true);
      struct.scriptMd5 = iprot.readString();
      struct.setScriptMd5IsSet(true);
      struct.executableName = iprot.readString();
      struct.setExecutableNameIsSet(true);
      struct.executablePath = iprot.readString();
      struct.setExecutablePathIsSet(true);
      struct.executableMd5 = iprot.readString();
      struct.setExecutableMd5IsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.timeout = iprot.readI64();
        struct.setTimeoutIsSet(true);
      }
      if (incoming.get(1)) {
        struct.complexity = iprot.readI64();
        struct.setComplexityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.envVariables = iprot.readString();
        struct.setEnvVariablesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.parameter = new com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter();
        struct.parameter.read(iprot);
        struct.setParameterIsSet(true);
      }
      if (incoming.get(4)) {
        struct.resultAddress = iprot.readString();
        struct.setResultAddressIsSet(true);
      }
      if (incoming.get(5)) {
        struct.functionName = iprot.readString();
        struct.setFunctionNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

