/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.binto.YYSchedule.common.rpc.domain.node;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * node info
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-06-11")
public class NodeInfo implements org.apache.thrift.TBase<NodeInfo, NodeInfo._Fields>, java.io.Serializable, Cloneable, Comparable<NodeInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeInfo");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CPU_VENDOR_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuVendor", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CPU_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuModel", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MEM_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("memSize", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fsName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fsType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FS_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("fsFormat", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FS_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fsSize", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField OS_ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("osArch", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("osName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField OS_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("osDesc", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField OS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osVersion", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField JVM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField JVM_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmVersion", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField JVM_MAX_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmMaxMem", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeType", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("domain", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField MAC_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("macAddress", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField INTERNET_CONNECTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("internetConnectivity", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddress", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField RPC_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcPort", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField PROC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("procName", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField CPU_PERC_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuPerc", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField MEM_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("memUsed", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField JVM_ALLOC_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("jvmAllocMem", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField FS_AVAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fsAvail", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField FS_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("fsUsed", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField FS_USED_PERC_FIELD_DESC = new org.apache.thrift.protocol.TField("fsUsedPerc", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField NODE_PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("nodePayload", org.apache.thrift.protocol.TType.STRUCT, (short)32);
  private static final org.apache.thrift.protocol.TField CONFIG_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("configUpdated", org.apache.thrift.protocol.TType.I64, (short)33);
  private static final org.apache.thrift.protocol.TField PAYLOAD_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("payloadUpdated", org.apache.thrift.protocol.TType.I64, (short)34);
  private static final org.apache.thrift.protocol.TField VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("valid", org.apache.thrift.protocol.TType.I32, (short)35);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NodeInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NodeInfoTupleSchemeFactory();

  public java.lang.String nodeId; // required
  public java.lang.String cpuVendor; // required
  public java.lang.String cpuModel; // required
  public int memSize; // required
  public java.lang.String fsName; // required
  public java.lang.String fsType; // required
  public java.lang.String fsFormat; // required
  public int fsSize; // required
  public java.lang.String osArch; // required
  public java.lang.String osName; // required
  public java.lang.String osDesc; // required
  public java.lang.String osVersion; // required
  public java.lang.String jvmName; // required
  public java.lang.String jvmVersion; // required
  public int jvmMaxMem; // required
  public int nodeType; // required
  public java.lang.String domain; // required
  public java.lang.String macAddress; // required
  public int internetConnectivity; // required
  public java.lang.String ipAddress; // required
  public int rpcPort; // required
  public int pid; // optional
  public java.lang.String user; // optional
  public java.lang.String startTime; // optional
  public java.lang.String procName; // optional
  public double cpuPerc; // optional
  public int memUsed; // optional
  public int jvmAllocMem; // optional
  public int fsAvail; // optional
  public int fsUsed; // optional
  public double fsUsedPerc; // optional
  public NodePayload nodePayload; // required
  public long configUpdated; // required
  public long payloadUpdated; // required
  public int valid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "nodeId"),
    CPU_VENDOR((short)2, "cpuVendor"),
    CPU_MODEL((short)3, "cpuModel"),
    MEM_SIZE((short)4, "memSize"),
    FS_NAME((short)5, "fsName"),
    FS_TYPE((short)6, "fsType"),
    FS_FORMAT((short)7, "fsFormat"),
    FS_SIZE((short)8, "fsSize"),
    OS_ARCH((short)9, "osArch"),
    OS_NAME((short)10, "osName"),
    OS_DESC((short)11, "osDesc"),
    OS_VERSION((short)12, "osVersion"),
    JVM_NAME((short)13, "jvmName"),
    JVM_VERSION((short)14, "jvmVersion"),
    JVM_MAX_MEM((short)15, "jvmMaxMem"),
    NODE_TYPE((short)16, "nodeType"),
    DOMAIN((short)17, "domain"),
    MAC_ADDRESS((short)18, "macAddress"),
    INTERNET_CONNECTIVITY((short)19, "internetConnectivity"),
    IP_ADDRESS((short)20, "ipAddress"),
    RPC_PORT((short)21, "rpcPort"),
    PID((short)22, "pid"),
    USER((short)23, "user"),
    START_TIME((short)24, "startTime"),
    PROC_NAME((short)25, "procName"),
    CPU_PERC((short)26, "cpuPerc"),
    MEM_USED((short)27, "memUsed"),
    JVM_ALLOC_MEM((short)28, "jvmAllocMem"),
    FS_AVAIL((short)29, "fsAvail"),
    FS_USED((short)30, "fsUsed"),
    FS_USED_PERC((short)31, "fsUsedPerc"),
    NODE_PAYLOAD((short)32, "nodePayload"),
    CONFIG_UPDATED((short)33, "configUpdated"),
    PAYLOAD_UPDATED((short)34, "payloadUpdated"),
    VALID((short)35, "valid");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // CPU_VENDOR
          return CPU_VENDOR;
        case 3: // CPU_MODEL
          return CPU_MODEL;
        case 4: // MEM_SIZE
          return MEM_SIZE;
        case 5: // FS_NAME
          return FS_NAME;
        case 6: // FS_TYPE
          return FS_TYPE;
        case 7: // FS_FORMAT
          return FS_FORMAT;
        case 8: // FS_SIZE
          return FS_SIZE;
        case 9: // OS_ARCH
          return OS_ARCH;
        case 10: // OS_NAME
          return OS_NAME;
        case 11: // OS_DESC
          return OS_DESC;
        case 12: // OS_VERSION
          return OS_VERSION;
        case 13: // JVM_NAME
          return JVM_NAME;
        case 14: // JVM_VERSION
          return JVM_VERSION;
        case 15: // JVM_MAX_MEM
          return JVM_MAX_MEM;
        case 16: // NODE_TYPE
          return NODE_TYPE;
        case 17: // DOMAIN
          return DOMAIN;
        case 18: // MAC_ADDRESS
          return MAC_ADDRESS;
        case 19: // INTERNET_CONNECTIVITY
          return INTERNET_CONNECTIVITY;
        case 20: // IP_ADDRESS
          return IP_ADDRESS;
        case 21: // RPC_PORT
          return RPC_PORT;
        case 22: // PID
          return PID;
        case 23: // USER
          return USER;
        case 24: // START_TIME
          return START_TIME;
        case 25: // PROC_NAME
          return PROC_NAME;
        case 26: // CPU_PERC
          return CPU_PERC;
        case 27: // MEM_USED
          return MEM_USED;
        case 28: // JVM_ALLOC_MEM
          return JVM_ALLOC_MEM;
        case 29: // FS_AVAIL
          return FS_AVAIL;
        case 30: // FS_USED
          return FS_USED;
        case 31: // FS_USED_PERC
          return FS_USED_PERC;
        case 32: // NODE_PAYLOAD
          return NODE_PAYLOAD;
        case 33: // CONFIG_UPDATED
          return CONFIG_UPDATED;
        case 34: // PAYLOAD_UPDATED
          return PAYLOAD_UPDATED;
        case 35: // VALID
          return VALID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMSIZE_ISSET_ID = 0;
  private static final int __FSSIZE_ISSET_ID = 1;
  private static final int __JVMMAXMEM_ISSET_ID = 2;
  private static final int __NODETYPE_ISSET_ID = 3;
  private static final int __INTERNETCONNECTIVITY_ISSET_ID = 4;
  private static final int __RPCPORT_ISSET_ID = 5;
  private static final int __PID_ISSET_ID = 6;
  private static final int __CPUPERC_ISSET_ID = 7;
  private static final int __MEMUSED_ISSET_ID = 8;
  private static final int __JVMALLOCMEM_ISSET_ID = 9;
  private static final int __FSAVAIL_ISSET_ID = 10;
  private static final int __FSUSED_ISSET_ID = 11;
  private static final int __FSUSEDPERC_ISSET_ID = 12;
  private static final int __CONFIGUPDATED_ISSET_ID = 13;
  private static final int __PAYLOADUPDATED_ISSET_ID = 14;
  private static final int __VALID_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PID,_Fields.USER,_Fields.START_TIME,_Fields.PROC_NAME,_Fields.CPU_PERC,_Fields.MEM_USED,_Fields.JVM_ALLOC_MEM,_Fields.FS_AVAIL,_Fields.FS_USED,_Fields.FS_USED_PERC};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_VENDOR, new org.apache.thrift.meta_data.FieldMetaData("cpuVendor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_MODEL, new org.apache.thrift.meta_data.FieldMetaData("cpuModel", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEM_SIZE, new org.apache.thrift.meta_data.FieldMetaData("memSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FS_NAME, new org.apache.thrift.meta_data.FieldMetaData("fsName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fsType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FS_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("fsFormat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FS_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fsSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OS_ARCH, new org.apache.thrift.meta_data.FieldMetaData("osArch", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_NAME, new org.apache.thrift.meta_data.FieldMetaData("osName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_DESC, new org.apache.thrift.meta_data.FieldMetaData("osDesc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("osVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JVM_NAME, new org.apache.thrift.meta_data.FieldMetaData("jvmName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JVM_VERSION, new org.apache.thrift.meta_data.FieldMetaData("jvmVersion", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JVM_MAX_MEM, new org.apache.thrift.meta_data.FieldMetaData("jvmMaxMem", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nodeType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("domain", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("macAddress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERNET_CONNECTIVITY, new org.apache.thrift.meta_data.FieldMetaData("internetConnectivity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ipAddress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RPC_PORT, new org.apache.thrift.meta_data.FieldMetaData("rpcPort", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROC_NAME, new org.apache.thrift.meta_data.FieldMetaData("procName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_PERC, new org.apache.thrift.meta_data.FieldMetaData("cpuPerc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEM_USED, new org.apache.thrift.meta_data.FieldMetaData("memUsed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.JVM_ALLOC_MEM, new org.apache.thrift.meta_data.FieldMetaData("jvmAllocMem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FS_AVAIL, new org.apache.thrift.meta_data.FieldMetaData("fsAvail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FS_USED, new org.apache.thrift.meta_data.FieldMetaData("fsUsed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FS_USED_PERC, new org.apache.thrift.meta_data.FieldMetaData("fsUsedPerc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NODE_PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("nodePayload", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodePayload.class)));
    tmpMap.put(_Fields.CONFIG_UPDATED, new org.apache.thrift.meta_data.FieldMetaData("configUpdated", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAYLOAD_UPDATED, new org.apache.thrift.meta_data.FieldMetaData("payloadUpdated", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VALID, new org.apache.thrift.meta_data.FieldMetaData("valid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeInfo.class, metaDataMap);
  }

  public NodeInfo() {
  }

  public NodeInfo(
    java.lang.String nodeId,
    java.lang.String cpuVendor,
    java.lang.String cpuModel,
    int memSize,
    java.lang.String fsName,
    java.lang.String fsType,
    java.lang.String fsFormat,
    int fsSize,
    java.lang.String osArch,
    java.lang.String osName,
    java.lang.String osDesc,
    java.lang.String osVersion,
    java.lang.String jvmName,
    java.lang.String jvmVersion,
    int jvmMaxMem,
    int nodeType,
    java.lang.String domain,
    java.lang.String macAddress,
    int internetConnectivity,
    java.lang.String ipAddress,
    int rpcPort,
    NodePayload nodePayload,
    long configUpdated,
    long payloadUpdated,
    int valid)
  {
    this();
    this.nodeId = nodeId;
    this.cpuVendor = cpuVendor;
    this.cpuModel = cpuModel;
    this.memSize = memSize;
    setMemSizeIsSet(true);
    this.fsName = fsName;
    this.fsType = fsType;
    this.fsFormat = fsFormat;
    this.fsSize = fsSize;
    setFsSizeIsSet(true);
    this.osArch = osArch;
    this.osName = osName;
    this.osDesc = osDesc;
    this.osVersion = osVersion;
    this.jvmName = jvmName;
    this.jvmVersion = jvmVersion;
    this.jvmMaxMem = jvmMaxMem;
    setJvmMaxMemIsSet(true);
    this.nodeType = nodeType;
    setNodeTypeIsSet(true);
    this.domain = domain;
    this.macAddress = macAddress;
    this.internetConnectivity = internetConnectivity;
    setInternetConnectivityIsSet(true);
    this.ipAddress = ipAddress;
    this.rpcPort = rpcPort;
    setRpcPortIsSet(true);
    this.nodePayload = nodePayload;
    this.configUpdated = configUpdated;
    setConfigUpdatedIsSet(true);
    this.payloadUpdated = payloadUpdated;
    setPayloadUpdatedIsSet(true);
    this.valid = valid;
    setValidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeInfo(NodeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNodeId()) {
      this.nodeId = other.nodeId;
    }
    if (other.isSetCpuVendor()) {
      this.cpuVendor = other.cpuVendor;
    }
    if (other.isSetCpuModel()) {
      this.cpuModel = other.cpuModel;
    }
    this.memSize = other.memSize;
    if (other.isSetFsName()) {
      this.fsName = other.fsName;
    }
    if (other.isSetFsType()) {
      this.fsType = other.fsType;
    }
    if (other.isSetFsFormat()) {
      this.fsFormat = other.fsFormat;
    }
    this.fsSize = other.fsSize;
    if (other.isSetOsArch()) {
      this.osArch = other.osArch;
    }
    if (other.isSetOsName()) {
      this.osName = other.osName;
    }
    if (other.isSetOsDesc()) {
      this.osDesc = other.osDesc;
    }
    if (other.isSetOsVersion()) {
      this.osVersion = other.osVersion;
    }
    if (other.isSetJvmName()) {
      this.jvmName = other.jvmName;
    }
    if (other.isSetJvmVersion()) {
      this.jvmVersion = other.jvmVersion;
    }
    this.jvmMaxMem = other.jvmMaxMem;
    this.nodeType = other.nodeType;
    if (other.isSetDomain()) {
      this.domain = other.domain;
    }
    if (other.isSetMacAddress()) {
      this.macAddress = other.macAddress;
    }
    this.internetConnectivity = other.internetConnectivity;
    if (other.isSetIpAddress()) {
      this.ipAddress = other.ipAddress;
    }
    this.rpcPort = other.rpcPort;
    this.pid = other.pid;
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetProcName()) {
      this.procName = other.procName;
    }
    this.cpuPerc = other.cpuPerc;
    this.memUsed = other.memUsed;
    this.jvmAllocMem = other.jvmAllocMem;
    this.fsAvail = other.fsAvail;
    this.fsUsed = other.fsUsed;
    this.fsUsedPerc = other.fsUsedPerc;
    if (other.isSetNodePayload()) {
      this.nodePayload = new NodePayload(other.nodePayload);
    }
    this.configUpdated = other.configUpdated;
    this.payloadUpdated = other.payloadUpdated;
    this.valid = other.valid;
  }

  public NodeInfo deepCopy() {
    return new NodeInfo(this);
  }

  @Override
  public void clear() {
    this.nodeId = null;
    this.cpuVendor = null;
    this.cpuModel = null;
    setMemSizeIsSet(false);
    this.memSize = 0;
    this.fsName = null;
    this.fsType = null;
    this.fsFormat = null;
    setFsSizeIsSet(false);
    this.fsSize = 0;
    this.osArch = null;
    this.osName = null;
    this.osDesc = null;
    this.osVersion = null;
    this.jvmName = null;
    this.jvmVersion = null;
    setJvmMaxMemIsSet(false);
    this.jvmMaxMem = 0;
    setNodeTypeIsSet(false);
    this.nodeType = 0;
    this.domain = null;
    this.macAddress = null;
    setInternetConnectivityIsSet(false);
    this.internetConnectivity = 0;
    this.ipAddress = null;
    setRpcPortIsSet(false);
    this.rpcPort = 0;
    setPidIsSet(false);
    this.pid = 0;
    this.user = null;
    this.startTime = null;
    this.procName = null;
    setCpuPercIsSet(false);
    this.cpuPerc = 0.0;
    setMemUsedIsSet(false);
    this.memUsed = 0;
    setJvmAllocMemIsSet(false);
    this.jvmAllocMem = 0;
    setFsAvailIsSet(false);
    this.fsAvail = 0;
    setFsUsedIsSet(false);
    this.fsUsed = 0;
    setFsUsedPercIsSet(false);
    this.fsUsedPerc = 0.0;
    this.nodePayload = null;
    setConfigUpdatedIsSet(false);
    this.configUpdated = 0;
    setPayloadUpdatedIsSet(false);
    this.payloadUpdated = 0;
    setValidIsSet(false);
    this.valid = 0;
  }

  public java.lang.String getNodeId() {
    return this.nodeId;
  }

  public NodeInfo setNodeId(java.lang.String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  public void unsetNodeId() {
    this.nodeId = null;
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return this.nodeId != null;
  }

  public void setNodeIdIsSet(boolean value) {
    if (!value) {
      this.nodeId = null;
    }
  }

  public java.lang.String getCpuVendor() {
    return this.cpuVendor;
  }

  public NodeInfo setCpuVendor(java.lang.String cpuVendor) {
    this.cpuVendor = cpuVendor;
    return this;
  }

  public void unsetCpuVendor() {
    this.cpuVendor = null;
  }

  /** Returns true if field cpuVendor is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuVendor() {
    return this.cpuVendor != null;
  }

  public void setCpuVendorIsSet(boolean value) {
    if (!value) {
      this.cpuVendor = null;
    }
  }

  public java.lang.String getCpuModel() {
    return this.cpuModel;
  }

  public NodeInfo setCpuModel(java.lang.String cpuModel) {
    this.cpuModel = cpuModel;
    return this;
  }

  public void unsetCpuModel() {
    this.cpuModel = null;
  }

  /** Returns true if field cpuModel is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuModel() {
    return this.cpuModel != null;
  }

  public void setCpuModelIsSet(boolean value) {
    if (!value) {
      this.cpuModel = null;
    }
  }

  public int getMemSize() {
    return this.memSize;
  }

  public NodeInfo setMemSize(int memSize) {
    this.memSize = memSize;
    setMemSizeIsSet(true);
    return this;
  }

  public void unsetMemSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEMSIZE_ISSET_ID);
  }

  /** Returns true if field memSize is set (has been assigned a value) and false otherwise */
  public boolean isSetMemSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEMSIZE_ISSET_ID);
  }

  public void setMemSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEMSIZE_ISSET_ID, value);
  }

  public java.lang.String getFsName() {
    return this.fsName;
  }

  public NodeInfo setFsName(java.lang.String fsName) {
    this.fsName = fsName;
    return this;
  }

  public void unsetFsName() {
    this.fsName = null;
  }

  /** Returns true if field fsName is set (has been assigned a value) and false otherwise */
  public boolean isSetFsName() {
    return this.fsName != null;
  }

  public void setFsNameIsSet(boolean value) {
    if (!value) {
      this.fsName = null;
    }
  }

  public java.lang.String getFsType() {
    return this.fsType;
  }

  public NodeInfo setFsType(java.lang.String fsType) {
    this.fsType = fsType;
    return this;
  }

  public void unsetFsType() {
    this.fsType = null;
  }

  /** Returns true if field fsType is set (has been assigned a value) and false otherwise */
  public boolean isSetFsType() {
    return this.fsType != null;
  }

  public void setFsTypeIsSet(boolean value) {
    if (!value) {
      this.fsType = null;
    }
  }

  public java.lang.String getFsFormat() {
    return this.fsFormat;
  }

  public NodeInfo setFsFormat(java.lang.String fsFormat) {
    this.fsFormat = fsFormat;
    return this;
  }

  public void unsetFsFormat() {
    this.fsFormat = null;
  }

  /** Returns true if field fsFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetFsFormat() {
    return this.fsFormat != null;
  }

  public void setFsFormatIsSet(boolean value) {
    if (!value) {
      this.fsFormat = null;
    }
  }

  public int getFsSize() {
    return this.fsSize;
  }

  public NodeInfo setFsSize(int fsSize) {
    this.fsSize = fsSize;
    setFsSizeIsSet(true);
    return this;
  }

  public void unsetFsSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FSSIZE_ISSET_ID);
  }

  /** Returns true if field fsSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFsSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FSSIZE_ISSET_ID);
  }

  public void setFsSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FSSIZE_ISSET_ID, value);
  }

  public java.lang.String getOsArch() {
    return this.osArch;
  }

  public NodeInfo setOsArch(java.lang.String osArch) {
    this.osArch = osArch;
    return this;
  }

  public void unsetOsArch() {
    this.osArch = null;
  }

  /** Returns true if field osArch is set (has been assigned a value) and false otherwise */
  public boolean isSetOsArch() {
    return this.osArch != null;
  }

  public void setOsArchIsSet(boolean value) {
    if (!value) {
      this.osArch = null;
    }
  }

  public java.lang.String getOsName() {
    return this.osName;
  }

  public NodeInfo setOsName(java.lang.String osName) {
    this.osName = osName;
    return this;
  }

  public void unsetOsName() {
    this.osName = null;
  }

  /** Returns true if field osName is set (has been assigned a value) and false otherwise */
  public boolean isSetOsName() {
    return this.osName != null;
  }

  public void setOsNameIsSet(boolean value) {
    if (!value) {
      this.osName = null;
    }
  }

  public java.lang.String getOsDesc() {
    return this.osDesc;
  }

  public NodeInfo setOsDesc(java.lang.String osDesc) {
    this.osDesc = osDesc;
    return this;
  }

  public void unsetOsDesc() {
    this.osDesc = null;
  }

  /** Returns true if field osDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetOsDesc() {
    return this.osDesc != null;
  }

  public void setOsDescIsSet(boolean value) {
    if (!value) {
      this.osDesc = null;
    }
  }

  public java.lang.String getOsVersion() {
    return this.osVersion;
  }

  public NodeInfo setOsVersion(java.lang.String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  public void unsetOsVersion() {
    this.osVersion = null;
  }

  /** Returns true if field osVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsVersion() {
    return this.osVersion != null;
  }

  public void setOsVersionIsSet(boolean value) {
    if (!value) {
      this.osVersion = null;
    }
  }

  public java.lang.String getJvmName() {
    return this.jvmName;
  }

  public NodeInfo setJvmName(java.lang.String jvmName) {
    this.jvmName = jvmName;
    return this;
  }

  public void unsetJvmName() {
    this.jvmName = null;
  }

  /** Returns true if field jvmName is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmName() {
    return this.jvmName != null;
  }

  public void setJvmNameIsSet(boolean value) {
    if (!value) {
      this.jvmName = null;
    }
  }

  public java.lang.String getJvmVersion() {
    return this.jvmVersion;
  }

  public NodeInfo setJvmVersion(java.lang.String jvmVersion) {
    this.jvmVersion = jvmVersion;
    return this;
  }

  public void unsetJvmVersion() {
    this.jvmVersion = null;
  }

  /** Returns true if field jvmVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmVersion() {
    return this.jvmVersion != null;
  }

  public void setJvmVersionIsSet(boolean value) {
    if (!value) {
      this.jvmVersion = null;
    }
  }

  public int getJvmMaxMem() {
    return this.jvmMaxMem;
  }

  public NodeInfo setJvmMaxMem(int jvmMaxMem) {
    this.jvmMaxMem = jvmMaxMem;
    setJvmMaxMemIsSet(true);
    return this;
  }

  public void unsetJvmMaxMem() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JVMMAXMEM_ISSET_ID);
  }

  /** Returns true if field jvmMaxMem is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmMaxMem() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JVMMAXMEM_ISSET_ID);
  }

  public void setJvmMaxMemIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JVMMAXMEM_ISSET_ID, value);
  }

  public int getNodeType() {
    return this.nodeType;
  }

  public NodeInfo setNodeType(int nodeType) {
    this.nodeType = nodeType;
    setNodeTypeIsSet(true);
    return this;
  }

  public void unsetNodeType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODETYPE_ISSET_ID);
  }

  /** Returns true if field nodeType is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODETYPE_ISSET_ID);
  }

  public void setNodeTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODETYPE_ISSET_ID, value);
  }

  public java.lang.String getDomain() {
    return this.domain;
  }

  public NodeInfo setDomain(java.lang.String domain) {
    this.domain = domain;
    return this;
  }

  public void unsetDomain() {
    this.domain = null;
  }

  /** Returns true if field domain is set (has been assigned a value) and false otherwise */
  public boolean isSetDomain() {
    return this.domain != null;
  }

  public void setDomainIsSet(boolean value) {
    if (!value) {
      this.domain = null;
    }
  }

  public java.lang.String getMacAddress() {
    return this.macAddress;
  }

  public NodeInfo setMacAddress(java.lang.String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  public void unsetMacAddress() {
    this.macAddress = null;
  }

  /** Returns true if field macAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetMacAddress() {
    return this.macAddress != null;
  }

  public void setMacAddressIsSet(boolean value) {
    if (!value) {
      this.macAddress = null;
    }
  }

  public int getInternetConnectivity() {
    return this.internetConnectivity;
  }

  public NodeInfo setInternetConnectivity(int internetConnectivity) {
    this.internetConnectivity = internetConnectivity;
    setInternetConnectivityIsSet(true);
    return this;
  }

  public void unsetInternetConnectivity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERNETCONNECTIVITY_ISSET_ID);
  }

  /** Returns true if field internetConnectivity is set (has been assigned a value) and false otherwise */
  public boolean isSetInternetConnectivity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERNETCONNECTIVITY_ISSET_ID);
  }

  public void setInternetConnectivityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERNETCONNECTIVITY_ISSET_ID, value);
  }

  public java.lang.String getIpAddress() {
    return this.ipAddress;
  }

  public NodeInfo setIpAddress(java.lang.String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  public void unsetIpAddress() {
    this.ipAddress = null;
  }

  /** Returns true if field ipAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetIpAddress() {
    return this.ipAddress != null;
  }

  public void setIpAddressIsSet(boolean value) {
    if (!value) {
      this.ipAddress = null;
    }
  }

  public int getRpcPort() {
    return this.rpcPort;
  }

  public NodeInfo setRpcPort(int rpcPort) {
    this.rpcPort = rpcPort;
    setRpcPortIsSet(true);
    return this;
  }

  public void unsetRpcPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RPCPORT_ISSET_ID);
  }

  /** Returns true if field rpcPort is set (has been assigned a value) and false otherwise */
  public boolean isSetRpcPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RPCPORT_ISSET_ID);
  }

  public void setRpcPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RPCPORT_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public NodeInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public java.lang.String getUser() {
    return this.user;
  }

  public NodeInfo setUser(java.lang.String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public java.lang.String getStartTime() {
    return this.startTime;
  }

  public NodeInfo setStartTime(java.lang.String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public java.lang.String getProcName() {
    return this.procName;
  }

  public NodeInfo setProcName(java.lang.String procName) {
    this.procName = procName;
    return this;
  }

  public void unsetProcName() {
    this.procName = null;
  }

  /** Returns true if field procName is set (has been assigned a value) and false otherwise */
  public boolean isSetProcName() {
    return this.procName != null;
  }

  public void setProcNameIsSet(boolean value) {
    if (!value) {
      this.procName = null;
    }
  }

  public double getCpuPerc() {
    return this.cpuPerc;
  }

  public NodeInfo setCpuPerc(double cpuPerc) {
    this.cpuPerc = cpuPerc;
    setCpuPercIsSet(true);
    return this;
  }

  public void unsetCpuPerc() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPUPERC_ISSET_ID);
  }

  /** Returns true if field cpuPerc is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuPerc() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPUPERC_ISSET_ID);
  }

  public void setCpuPercIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPUPERC_ISSET_ID, value);
  }

  public int getMemUsed() {
    return this.memUsed;
  }

  public NodeInfo setMemUsed(int memUsed) {
    this.memUsed = memUsed;
    setMemUsedIsSet(true);
    return this;
  }

  public void unsetMemUsed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEMUSED_ISSET_ID);
  }

  /** Returns true if field memUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetMemUsed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEMUSED_ISSET_ID);
  }

  public void setMemUsedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEMUSED_ISSET_ID, value);
  }

  public int getJvmAllocMem() {
    return this.jvmAllocMem;
  }

  public NodeInfo setJvmAllocMem(int jvmAllocMem) {
    this.jvmAllocMem = jvmAllocMem;
    setJvmAllocMemIsSet(true);
    return this;
  }

  public void unsetJvmAllocMem() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JVMALLOCMEM_ISSET_ID);
  }

  /** Returns true if field jvmAllocMem is set (has been assigned a value) and false otherwise */
  public boolean isSetJvmAllocMem() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JVMALLOCMEM_ISSET_ID);
  }

  public void setJvmAllocMemIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JVMALLOCMEM_ISSET_ID, value);
  }

  public int getFsAvail() {
    return this.fsAvail;
  }

  public NodeInfo setFsAvail(int fsAvail) {
    this.fsAvail = fsAvail;
    setFsAvailIsSet(true);
    return this;
  }

  public void unsetFsAvail() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FSAVAIL_ISSET_ID);
  }

  /** Returns true if field fsAvail is set (has been assigned a value) and false otherwise */
  public boolean isSetFsAvail() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FSAVAIL_ISSET_ID);
  }

  public void setFsAvailIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FSAVAIL_ISSET_ID, value);
  }

  public int getFsUsed() {
    return this.fsUsed;
  }

  public NodeInfo setFsUsed(int fsUsed) {
    this.fsUsed = fsUsed;
    setFsUsedIsSet(true);
    return this;
  }

  public void unsetFsUsed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FSUSED_ISSET_ID);
  }

  /** Returns true if field fsUsed is set (has been assigned a value) and false otherwise */
  public boolean isSetFsUsed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FSUSED_ISSET_ID);
  }

  public void setFsUsedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FSUSED_ISSET_ID, value);
  }

  public double getFsUsedPerc() {
    return this.fsUsedPerc;
  }

  public NodeInfo setFsUsedPerc(double fsUsedPerc) {
    this.fsUsedPerc = fsUsedPerc;
    setFsUsedPercIsSet(true);
    return this;
  }

  public void unsetFsUsedPerc() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FSUSEDPERC_ISSET_ID);
  }

  /** Returns true if field fsUsedPerc is set (has been assigned a value) and false otherwise */
  public boolean isSetFsUsedPerc() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FSUSEDPERC_ISSET_ID);
  }

  public void setFsUsedPercIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FSUSEDPERC_ISSET_ID, value);
  }

  public NodePayload getNodePayload() {
    return this.nodePayload;
  }

  public NodeInfo setNodePayload(NodePayload nodePayload) {
    this.nodePayload = nodePayload;
    return this;
  }

  public void unsetNodePayload() {
    this.nodePayload = null;
  }

  /** Returns true if field nodePayload is set (has been assigned a value) and false otherwise */
  public boolean isSetNodePayload() {
    return this.nodePayload != null;
  }

  public void setNodePayloadIsSet(boolean value) {
    if (!value) {
      this.nodePayload = null;
    }
  }

  public long getConfigUpdated() {
    return this.configUpdated;
  }

  public NodeInfo setConfigUpdated(long configUpdated) {
    this.configUpdated = configUpdated;
    setConfigUpdatedIsSet(true);
    return this;
  }

  public void unsetConfigUpdated() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONFIGUPDATED_ISSET_ID);
  }

  /** Returns true if field configUpdated is set (has been assigned a value) and false otherwise */
  public boolean isSetConfigUpdated() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONFIGUPDATED_ISSET_ID);
  }

  public void setConfigUpdatedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONFIGUPDATED_ISSET_ID, value);
  }

  public long getPayloadUpdated() {
    return this.payloadUpdated;
  }

  public NodeInfo setPayloadUpdated(long payloadUpdated) {
    this.payloadUpdated = payloadUpdated;
    setPayloadUpdatedIsSet(true);
    return this;
  }

  public void unsetPayloadUpdated() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAYLOADUPDATED_ISSET_ID);
  }

  /** Returns true if field payloadUpdated is set (has been assigned a value) and false otherwise */
  public boolean isSetPayloadUpdated() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAYLOADUPDATED_ISSET_ID);
  }

  public void setPayloadUpdatedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAYLOADUPDATED_ISSET_ID, value);
  }

  public int getValid() {
    return this.valid;
  }

  public NodeInfo setValid(int valid) {
    this.valid = valid;
    setValidIsSet(true);
    return this;
  }

  public void unsetValid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  /** Returns true if field valid is set (has been assigned a value) and false otherwise */
  public boolean isSetValid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALID_ISSET_ID);
  }

  public void setValidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((java.lang.String)value);
      }
      break;

    case CPU_VENDOR:
      if (value == null) {
        unsetCpuVendor();
      } else {
        setCpuVendor((java.lang.String)value);
      }
      break;

    case CPU_MODEL:
      if (value == null) {
        unsetCpuModel();
      } else {
        setCpuModel((java.lang.String)value);
      }
      break;

    case MEM_SIZE:
      if (value == null) {
        unsetMemSize();
      } else {
        setMemSize((java.lang.Integer)value);
      }
      break;

    case FS_NAME:
      if (value == null) {
        unsetFsName();
      } else {
        setFsName((java.lang.String)value);
      }
      break;

    case FS_TYPE:
      if (value == null) {
        unsetFsType();
      } else {
        setFsType((java.lang.String)value);
      }
      break;

    case FS_FORMAT:
      if (value == null) {
        unsetFsFormat();
      } else {
        setFsFormat((java.lang.String)value);
      }
      break;

    case FS_SIZE:
      if (value == null) {
        unsetFsSize();
      } else {
        setFsSize((java.lang.Integer)value);
      }
      break;

    case OS_ARCH:
      if (value == null) {
        unsetOsArch();
      } else {
        setOsArch((java.lang.String)value);
      }
      break;

    case OS_NAME:
      if (value == null) {
        unsetOsName();
      } else {
        setOsName((java.lang.String)value);
      }
      break;

    case OS_DESC:
      if (value == null) {
        unsetOsDesc();
      } else {
        setOsDesc((java.lang.String)value);
      }
      break;

    case OS_VERSION:
      if (value == null) {
        unsetOsVersion();
      } else {
        setOsVersion((java.lang.String)value);
      }
      break;

    case JVM_NAME:
      if (value == null) {
        unsetJvmName();
      } else {
        setJvmName((java.lang.String)value);
      }
      break;

    case JVM_VERSION:
      if (value == null) {
        unsetJvmVersion();
      } else {
        setJvmVersion((java.lang.String)value);
      }
      break;

    case JVM_MAX_MEM:
      if (value == null) {
        unsetJvmMaxMem();
      } else {
        setJvmMaxMem((java.lang.Integer)value);
      }
      break;

    case NODE_TYPE:
      if (value == null) {
        unsetNodeType();
      } else {
        setNodeType((java.lang.Integer)value);
      }
      break;

    case DOMAIN:
      if (value == null) {
        unsetDomain();
      } else {
        setDomain((java.lang.String)value);
      }
      break;

    case MAC_ADDRESS:
      if (value == null) {
        unsetMacAddress();
      } else {
        setMacAddress((java.lang.String)value);
      }
      break;

    case INTERNET_CONNECTIVITY:
      if (value == null) {
        unsetInternetConnectivity();
      } else {
        setInternetConnectivity((java.lang.Integer)value);
      }
      break;

    case IP_ADDRESS:
      if (value == null) {
        unsetIpAddress();
      } else {
        setIpAddress((java.lang.String)value);
      }
      break;

    case RPC_PORT:
      if (value == null) {
        unsetRpcPort();
      } else {
        setRpcPort((java.lang.Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((java.lang.Integer)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((java.lang.String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((java.lang.String)value);
      }
      break;

    case PROC_NAME:
      if (value == null) {
        unsetProcName();
      } else {
        setProcName((java.lang.String)value);
      }
      break;

    case CPU_PERC:
      if (value == null) {
        unsetCpuPerc();
      } else {
        setCpuPerc((java.lang.Double)value);
      }
      break;

    case MEM_USED:
      if (value == null) {
        unsetMemUsed();
      } else {
        setMemUsed((java.lang.Integer)value);
      }
      break;

    case JVM_ALLOC_MEM:
      if (value == null) {
        unsetJvmAllocMem();
      } else {
        setJvmAllocMem((java.lang.Integer)value);
      }
      break;

    case FS_AVAIL:
      if (value == null) {
        unsetFsAvail();
      } else {
        setFsAvail((java.lang.Integer)value);
      }
      break;

    case FS_USED:
      if (value == null) {
        unsetFsUsed();
      } else {
        setFsUsed((java.lang.Integer)value);
      }
      break;

    case FS_USED_PERC:
      if (value == null) {
        unsetFsUsedPerc();
      } else {
        setFsUsedPerc((java.lang.Double)value);
      }
      break;

    case NODE_PAYLOAD:
      if (value == null) {
        unsetNodePayload();
      } else {
        setNodePayload((NodePayload)value);
      }
      break;

    case CONFIG_UPDATED:
      if (value == null) {
        unsetConfigUpdated();
      } else {
        setConfigUpdated((java.lang.Long)value);
      }
      break;

    case PAYLOAD_UPDATED:
      if (value == null) {
        unsetPayloadUpdated();
      } else {
        setPayloadUpdated((java.lang.Long)value);
      }
      break;

    case VALID:
      if (value == null) {
        unsetValid();
      } else {
        setValid((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNodeId();

    case CPU_VENDOR:
      return getCpuVendor();

    case CPU_MODEL:
      return getCpuModel();

    case MEM_SIZE:
      return getMemSize();

    case FS_NAME:
      return getFsName();

    case FS_TYPE:
      return getFsType();

    case FS_FORMAT:
      return getFsFormat();

    case FS_SIZE:
      return getFsSize();

    case OS_ARCH:
      return getOsArch();

    case OS_NAME:
      return getOsName();

    case OS_DESC:
      return getOsDesc();

    case OS_VERSION:
      return getOsVersion();

    case JVM_NAME:
      return getJvmName();

    case JVM_VERSION:
      return getJvmVersion();

    case JVM_MAX_MEM:
      return getJvmMaxMem();

    case NODE_TYPE:
      return getNodeType();

    case DOMAIN:
      return getDomain();

    case MAC_ADDRESS:
      return getMacAddress();

    case INTERNET_CONNECTIVITY:
      return getInternetConnectivity();

    case IP_ADDRESS:
      return getIpAddress();

    case RPC_PORT:
      return getRpcPort();

    case PID:
      return getPid();

    case USER:
      return getUser();

    case START_TIME:
      return getStartTime();

    case PROC_NAME:
      return getProcName();

    case CPU_PERC:
      return getCpuPerc();

    case MEM_USED:
      return getMemUsed();

    case JVM_ALLOC_MEM:
      return getJvmAllocMem();

    case FS_AVAIL:
      return getFsAvail();

    case FS_USED:
      return getFsUsed();

    case FS_USED_PERC:
      return getFsUsedPerc();

    case NODE_PAYLOAD:
      return getNodePayload();

    case CONFIG_UPDATED:
      return getConfigUpdated();

    case PAYLOAD_UPDATED:
      return getPayloadUpdated();

    case VALID:
      return getValid();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNodeId();
    case CPU_VENDOR:
      return isSetCpuVendor();
    case CPU_MODEL:
      return isSetCpuModel();
    case MEM_SIZE:
      return isSetMemSize();
    case FS_NAME:
      return isSetFsName();
    case FS_TYPE:
      return isSetFsType();
    case FS_FORMAT:
      return isSetFsFormat();
    case FS_SIZE:
      return isSetFsSize();
    case OS_ARCH:
      return isSetOsArch();
    case OS_NAME:
      return isSetOsName();
    case OS_DESC:
      return isSetOsDesc();
    case OS_VERSION:
      return isSetOsVersion();
    case JVM_NAME:
      return isSetJvmName();
    case JVM_VERSION:
      return isSetJvmVersion();
    case JVM_MAX_MEM:
      return isSetJvmMaxMem();
    case NODE_TYPE:
      return isSetNodeType();
    case DOMAIN:
      return isSetDomain();
    case MAC_ADDRESS:
      return isSetMacAddress();
    case INTERNET_CONNECTIVITY:
      return isSetInternetConnectivity();
    case IP_ADDRESS:
      return isSetIpAddress();
    case RPC_PORT:
      return isSetRpcPort();
    case PID:
      return isSetPid();
    case USER:
      return isSetUser();
    case START_TIME:
      return isSetStartTime();
    case PROC_NAME:
      return isSetProcName();
    case CPU_PERC:
      return isSetCpuPerc();
    case MEM_USED:
      return isSetMemUsed();
    case JVM_ALLOC_MEM:
      return isSetJvmAllocMem();
    case FS_AVAIL:
      return isSetFsAvail();
    case FS_USED:
      return isSetFsUsed();
    case FS_USED_PERC:
      return isSetFsUsedPerc();
    case NODE_PAYLOAD:
      return isSetNodePayload();
    case CONFIG_UPDATED:
      return isSetConfigUpdated();
    case PAYLOAD_UPDATED:
      return isSetPayloadUpdated();
    case VALID:
      return isSetValid();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeInfo)
      return this.equals((NodeInfo)that);
    return false;
  }

  public boolean equals(NodeInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nodeId = true && this.isSetNodeId();
    boolean that_present_nodeId = true && that.isSetNodeId();
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (!this.nodeId.equals(that.nodeId))
        return false;
    }

    boolean this_present_cpuVendor = true && this.isSetCpuVendor();
    boolean that_present_cpuVendor = true && that.isSetCpuVendor();
    if (this_present_cpuVendor || that_present_cpuVendor) {
      if (!(this_present_cpuVendor && that_present_cpuVendor))
        return false;
      if (!this.cpuVendor.equals(that.cpuVendor))
        return false;
    }

    boolean this_present_cpuModel = true && this.isSetCpuModel();
    boolean that_present_cpuModel = true && that.isSetCpuModel();
    if (this_present_cpuModel || that_present_cpuModel) {
      if (!(this_present_cpuModel && that_present_cpuModel))
        return false;
      if (!this.cpuModel.equals(that.cpuModel))
        return false;
    }

    boolean this_present_memSize = true;
    boolean that_present_memSize = true;
    if (this_present_memSize || that_present_memSize) {
      if (!(this_present_memSize && that_present_memSize))
        return false;
      if (this.memSize != that.memSize)
        return false;
    }

    boolean this_present_fsName = true && this.isSetFsName();
    boolean that_present_fsName = true && that.isSetFsName();
    if (this_present_fsName || that_present_fsName) {
      if (!(this_present_fsName && that_present_fsName))
        return false;
      if (!this.fsName.equals(that.fsName))
        return false;
    }

    boolean this_present_fsType = true && this.isSetFsType();
    boolean that_present_fsType = true && that.isSetFsType();
    if (this_present_fsType || that_present_fsType) {
      if (!(this_present_fsType && that_present_fsType))
        return false;
      if (!this.fsType.equals(that.fsType))
        return false;
    }

    boolean this_present_fsFormat = true && this.isSetFsFormat();
    boolean that_present_fsFormat = true && that.isSetFsFormat();
    if (this_present_fsFormat || that_present_fsFormat) {
      if (!(this_present_fsFormat && that_present_fsFormat))
        return false;
      if (!this.fsFormat.equals(that.fsFormat))
        return false;
    }

    boolean this_present_fsSize = true;
    boolean that_present_fsSize = true;
    if (this_present_fsSize || that_present_fsSize) {
      if (!(this_present_fsSize && that_present_fsSize))
        return false;
      if (this.fsSize != that.fsSize)
        return false;
    }

    boolean this_present_osArch = true && this.isSetOsArch();
    boolean that_present_osArch = true && that.isSetOsArch();
    if (this_present_osArch || that_present_osArch) {
      if (!(this_present_osArch && that_present_osArch))
        return false;
      if (!this.osArch.equals(that.osArch))
        return false;
    }

    boolean this_present_osName = true && this.isSetOsName();
    boolean that_present_osName = true && that.isSetOsName();
    if (this_present_osName || that_present_osName) {
      if (!(this_present_osName && that_present_osName))
        return false;
      if (!this.osName.equals(that.osName))
        return false;
    }

    boolean this_present_osDesc = true && this.isSetOsDesc();
    boolean that_present_osDesc = true && that.isSetOsDesc();
    if (this_present_osDesc || that_present_osDesc) {
      if (!(this_present_osDesc && that_present_osDesc))
        return false;
      if (!this.osDesc.equals(that.osDesc))
        return false;
    }

    boolean this_present_osVersion = true && this.isSetOsVersion();
    boolean that_present_osVersion = true && that.isSetOsVersion();
    if (this_present_osVersion || that_present_osVersion) {
      if (!(this_present_osVersion && that_present_osVersion))
        return false;
      if (!this.osVersion.equals(that.osVersion))
        return false;
    }

    boolean this_present_jvmName = true && this.isSetJvmName();
    boolean that_present_jvmName = true && that.isSetJvmName();
    if (this_present_jvmName || that_present_jvmName) {
      if (!(this_present_jvmName && that_present_jvmName))
        return false;
      if (!this.jvmName.equals(that.jvmName))
        return false;
    }

    boolean this_present_jvmVersion = true && this.isSetJvmVersion();
    boolean that_present_jvmVersion = true && that.isSetJvmVersion();
    if (this_present_jvmVersion || that_present_jvmVersion) {
      if (!(this_present_jvmVersion && that_present_jvmVersion))
        return false;
      if (!this.jvmVersion.equals(that.jvmVersion))
        return false;
    }

    boolean this_present_jvmMaxMem = true;
    boolean that_present_jvmMaxMem = true;
    if (this_present_jvmMaxMem || that_present_jvmMaxMem) {
      if (!(this_present_jvmMaxMem && that_present_jvmMaxMem))
        return false;
      if (this.jvmMaxMem != that.jvmMaxMem)
        return false;
    }

    boolean this_present_nodeType = true;
    boolean that_present_nodeType = true;
    if (this_present_nodeType || that_present_nodeType) {
      if (!(this_present_nodeType && that_present_nodeType))
        return false;
      if (this.nodeType != that.nodeType)
        return false;
    }

    boolean this_present_domain = true && this.isSetDomain();
    boolean that_present_domain = true && that.isSetDomain();
    if (this_present_domain || that_present_domain) {
      if (!(this_present_domain && that_present_domain))
        return false;
      if (!this.domain.equals(that.domain))
        return false;
    }

    boolean this_present_macAddress = true && this.isSetMacAddress();
    boolean that_present_macAddress = true && that.isSetMacAddress();
    if (this_present_macAddress || that_present_macAddress) {
      if (!(this_present_macAddress && that_present_macAddress))
        return false;
      if (!this.macAddress.equals(that.macAddress))
        return false;
    }

    boolean this_present_internetConnectivity = true;
    boolean that_present_internetConnectivity = true;
    if (this_present_internetConnectivity || that_present_internetConnectivity) {
      if (!(this_present_internetConnectivity && that_present_internetConnectivity))
        return false;
      if (this.internetConnectivity != that.internetConnectivity)
        return false;
    }

    boolean this_present_ipAddress = true && this.isSetIpAddress();
    boolean that_present_ipAddress = true && that.isSetIpAddress();
    if (this_present_ipAddress || that_present_ipAddress) {
      if (!(this_present_ipAddress && that_present_ipAddress))
        return false;
      if (!this.ipAddress.equals(that.ipAddress))
        return false;
    }

    boolean this_present_rpcPort = true;
    boolean that_present_rpcPort = true;
    if (this_present_rpcPort || that_present_rpcPort) {
      if (!(this_present_rpcPort && that_present_rpcPort))
        return false;
      if (this.rpcPort != that.rpcPort)
        return false;
    }

    boolean this_present_pid = true && this.isSetPid();
    boolean that_present_pid = true && that.isSetPid();
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_procName = true && this.isSetProcName();
    boolean that_present_procName = true && that.isSetProcName();
    if (this_present_procName || that_present_procName) {
      if (!(this_present_procName && that_present_procName))
        return false;
      if (!this.procName.equals(that.procName))
        return false;
    }

    boolean this_present_cpuPerc = true && this.isSetCpuPerc();
    boolean that_present_cpuPerc = true && that.isSetCpuPerc();
    if (this_present_cpuPerc || that_present_cpuPerc) {
      if (!(this_present_cpuPerc && that_present_cpuPerc))
        return false;
      if (this.cpuPerc != that.cpuPerc)
        return false;
    }

    boolean this_present_memUsed = true && this.isSetMemUsed();
    boolean that_present_memUsed = true && that.isSetMemUsed();
    if (this_present_memUsed || that_present_memUsed) {
      if (!(this_present_memUsed && that_present_memUsed))
        return false;
      if (this.memUsed != that.memUsed)
        return false;
    }

    boolean this_present_jvmAllocMem = true && this.isSetJvmAllocMem();
    boolean that_present_jvmAllocMem = true && that.isSetJvmAllocMem();
    if (this_present_jvmAllocMem || that_present_jvmAllocMem) {
      if (!(this_present_jvmAllocMem && that_present_jvmAllocMem))
        return false;
      if (this.jvmAllocMem != that.jvmAllocMem)
        return false;
    }

    boolean this_present_fsAvail = true && this.isSetFsAvail();
    boolean that_present_fsAvail = true && that.isSetFsAvail();
    if (this_present_fsAvail || that_present_fsAvail) {
      if (!(this_present_fsAvail && that_present_fsAvail))
        return false;
      if (this.fsAvail != that.fsAvail)
        return false;
    }

    boolean this_present_fsUsed = true && this.isSetFsUsed();
    boolean that_present_fsUsed = true && that.isSetFsUsed();
    if (this_present_fsUsed || that_present_fsUsed) {
      if (!(this_present_fsUsed && that_present_fsUsed))
        return false;
      if (this.fsUsed != that.fsUsed)
        return false;
    }

    boolean this_present_fsUsedPerc = true && this.isSetFsUsedPerc();
    boolean that_present_fsUsedPerc = true && that.isSetFsUsedPerc();
    if (this_present_fsUsedPerc || that_present_fsUsedPerc) {
      if (!(this_present_fsUsedPerc && that_present_fsUsedPerc))
        return false;
      if (this.fsUsedPerc != that.fsUsedPerc)
        return false;
    }

    boolean this_present_nodePayload = true && this.isSetNodePayload();
    boolean that_present_nodePayload = true && that.isSetNodePayload();
    if (this_present_nodePayload || that_present_nodePayload) {
      if (!(this_present_nodePayload && that_present_nodePayload))
        return false;
      if (!this.nodePayload.equals(that.nodePayload))
        return false;
    }

    boolean this_present_configUpdated = true;
    boolean that_present_configUpdated = true;
    if (this_present_configUpdated || that_present_configUpdated) {
      if (!(this_present_configUpdated && that_present_configUpdated))
        return false;
      if (this.configUpdated != that.configUpdated)
        return false;
    }

    boolean this_present_payloadUpdated = true;
    boolean that_present_payloadUpdated = true;
    if (this_present_payloadUpdated || that_present_payloadUpdated) {
      if (!(this_present_payloadUpdated && that_present_payloadUpdated))
        return false;
      if (this.payloadUpdated != that.payloadUpdated)
        return false;
    }

    boolean this_present_valid = true;
    boolean that_present_valid = true;
    if (this_present_valid || that_present_valid) {
      if (!(this_present_valid && that_present_valid))
        return false;
      if (this.valid != that.valid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNodeId()) ? 131071 : 524287);
    if (isSetNodeId())
      hashCode = hashCode * 8191 + nodeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetCpuVendor()) ? 131071 : 524287);
    if (isSetCpuVendor())
      hashCode = hashCode * 8191 + cpuVendor.hashCode();

    hashCode = hashCode * 8191 + ((isSetCpuModel()) ? 131071 : 524287);
    if (isSetCpuModel())
      hashCode = hashCode * 8191 + cpuModel.hashCode();

    hashCode = hashCode * 8191 + memSize;

    hashCode = hashCode * 8191 + ((isSetFsName()) ? 131071 : 524287);
    if (isSetFsName())
      hashCode = hashCode * 8191 + fsName.hashCode();

    hashCode = hashCode * 8191 + ((isSetFsType()) ? 131071 : 524287);
    if (isSetFsType())
      hashCode = hashCode * 8191 + fsType.hashCode();

    hashCode = hashCode * 8191 + ((isSetFsFormat()) ? 131071 : 524287);
    if (isSetFsFormat())
      hashCode = hashCode * 8191 + fsFormat.hashCode();

    hashCode = hashCode * 8191 + fsSize;

    hashCode = hashCode * 8191 + ((isSetOsArch()) ? 131071 : 524287);
    if (isSetOsArch())
      hashCode = hashCode * 8191 + osArch.hashCode();

    hashCode = hashCode * 8191 + ((isSetOsName()) ? 131071 : 524287);
    if (isSetOsName())
      hashCode = hashCode * 8191 + osName.hashCode();

    hashCode = hashCode * 8191 + ((isSetOsDesc()) ? 131071 : 524287);
    if (isSetOsDesc())
      hashCode = hashCode * 8191 + osDesc.hashCode();

    hashCode = hashCode * 8191 + ((isSetOsVersion()) ? 131071 : 524287);
    if (isSetOsVersion())
      hashCode = hashCode * 8191 + osVersion.hashCode();

    hashCode = hashCode * 8191 + ((isSetJvmName()) ? 131071 : 524287);
    if (isSetJvmName())
      hashCode = hashCode * 8191 + jvmName.hashCode();

    hashCode = hashCode * 8191 + ((isSetJvmVersion()) ? 131071 : 524287);
    if (isSetJvmVersion())
      hashCode = hashCode * 8191 + jvmVersion.hashCode();

    hashCode = hashCode * 8191 + jvmMaxMem;

    hashCode = hashCode * 8191 + nodeType;

    hashCode = hashCode * 8191 + ((isSetDomain()) ? 131071 : 524287);
    if (isSetDomain())
      hashCode = hashCode * 8191 + domain.hashCode();

    hashCode = hashCode * 8191 + ((isSetMacAddress()) ? 131071 : 524287);
    if (isSetMacAddress())
      hashCode = hashCode * 8191 + macAddress.hashCode();

    hashCode = hashCode * 8191 + internetConnectivity;

    hashCode = hashCode * 8191 + ((isSetIpAddress()) ? 131071 : 524287);
    if (isSetIpAddress())
      hashCode = hashCode * 8191 + ipAddress.hashCode();

    hashCode = hashCode * 8191 + rpcPort;

    hashCode = hashCode * 8191 + ((isSetPid()) ? 131071 : 524287);
    if (isSetPid())
      hashCode = hashCode * 8191 + pid;

    hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
    if (isSetUser())
      hashCode = hashCode * 8191 + user.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
    if (isSetStartTime())
      hashCode = hashCode * 8191 + startTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetProcName()) ? 131071 : 524287);
    if (isSetProcName())
      hashCode = hashCode * 8191 + procName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCpuPerc()) ? 131071 : 524287);
    if (isSetCpuPerc())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cpuPerc);

    hashCode = hashCode * 8191 + ((isSetMemUsed()) ? 131071 : 524287);
    if (isSetMemUsed())
      hashCode = hashCode * 8191 + memUsed;

    hashCode = hashCode * 8191 + ((isSetJvmAllocMem()) ? 131071 : 524287);
    if (isSetJvmAllocMem())
      hashCode = hashCode * 8191 + jvmAllocMem;

    hashCode = hashCode * 8191 + ((isSetFsAvail()) ? 131071 : 524287);
    if (isSetFsAvail())
      hashCode = hashCode * 8191 + fsAvail;

    hashCode = hashCode * 8191 + ((isSetFsUsed()) ? 131071 : 524287);
    if (isSetFsUsed())
      hashCode = hashCode * 8191 + fsUsed;

    hashCode = hashCode * 8191 + ((isSetFsUsedPerc()) ? 131071 : 524287);
    if (isSetFsUsedPerc())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fsUsedPerc);

    hashCode = hashCode * 8191 + ((isSetNodePayload()) ? 131071 : 524287);
    if (isSetNodePayload())
      hashCode = hashCode * 8191 + nodePayload.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(configUpdated);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(payloadUpdated);

    hashCode = hashCode * 8191 + valid;

    return hashCode;
  }

  @Override
  public int compareTo(NodeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCpuVendor()).compareTo(other.isSetCpuVendor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuVendor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuVendor, other.cpuVendor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCpuModel()).compareTo(other.isSetCpuModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuModel, other.cpuModel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMemSize()).compareTo(other.isSetMemSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memSize, other.memSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFsName()).compareTo(other.isSetFsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsName, other.fsName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFsType()).compareTo(other.isSetFsType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsType, other.fsType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFsFormat()).compareTo(other.isSetFsFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsFormat, other.fsFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFsSize()).compareTo(other.isSetFsSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsSize, other.fsSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOsArch()).compareTo(other.isSetOsArch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsArch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osArch, other.osArch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOsName()).compareTo(other.isSetOsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osName, other.osName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOsDesc()).compareTo(other.isSetOsDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osDesc, other.osDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOsVersion()).compareTo(other.isSetOsVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osVersion, other.osVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJvmName()).compareTo(other.isSetJvmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmName, other.jvmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJvmVersion()).compareTo(other.isSetJvmVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmVersion, other.jvmVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJvmMaxMem()).compareTo(other.isSetJvmMaxMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmMaxMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmMaxMem, other.jvmMaxMem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodeType()).compareTo(other.isSetNodeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeType, other.nodeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDomain()).compareTo(other.isSetDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domain, other.domain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMacAddress()).compareTo(other.isSetMacAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMacAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macAddress, other.macAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInternetConnectivity()).compareTo(other.isSetInternetConnectivity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInternetConnectivity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internetConnectivity, other.internetConnectivity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIpAddress()).compareTo(other.isSetIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddress, other.ipAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRpcPort()).compareTo(other.isSetRpcPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpcPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcPort, other.rpcPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProcName()).compareTo(other.isSetProcName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.procName, other.procName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCpuPerc()).compareTo(other.isSetCpuPerc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuPerc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuPerc, other.cpuPerc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMemUsed()).compareTo(other.isSetMemUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memUsed, other.memUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJvmAllocMem()).compareTo(other.isSetJvmAllocMem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJvmAllocMem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jvmAllocMem, other.jvmAllocMem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFsAvail()).compareTo(other.isSetFsAvail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsAvail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsAvail, other.fsAvail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFsUsed()).compareTo(other.isSetFsUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsUsed, other.fsUsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFsUsedPerc()).compareTo(other.isSetFsUsedPerc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFsUsedPerc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fsUsedPerc, other.fsUsedPerc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodePayload()).compareTo(other.isSetNodePayload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodePayload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodePayload, other.nodePayload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfigUpdated()).compareTo(other.isSetConfigUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfigUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configUpdated, other.configUpdated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPayloadUpdated()).compareTo(other.isSetPayloadUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayloadUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payloadUpdated, other.payloadUpdated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValid()).compareTo(other.isSetValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valid, other.valid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NodeInfo(");
    boolean first = true;

    sb.append("nodeId:");
    if (this.nodeId == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuVendor:");
    if (this.cpuVendor == null) {
      sb.append("null");
    } else {
      sb.append(this.cpuVendor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuModel:");
    if (this.cpuModel == null) {
      sb.append("null");
    } else {
      sb.append(this.cpuModel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memSize:");
    sb.append(this.memSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fsName:");
    if (this.fsName == null) {
      sb.append("null");
    } else {
      sb.append(this.fsName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fsType:");
    if (this.fsType == null) {
      sb.append("null");
    } else {
      sb.append(this.fsType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fsFormat:");
    if (this.fsFormat == null) {
      sb.append("null");
    } else {
      sb.append(this.fsFormat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fsSize:");
    sb.append(this.fsSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("osArch:");
    if (this.osArch == null) {
      sb.append("null");
    } else {
      sb.append(this.osArch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osName:");
    if (this.osName == null) {
      sb.append("null");
    } else {
      sb.append(this.osName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osDesc:");
    if (this.osDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.osDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osVersion:");
    if (this.osVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.osVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmName:");
    if (this.jvmName == null) {
      sb.append("null");
    } else {
      sb.append(this.jvmName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmVersion:");
    if (this.jvmVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.jvmVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jvmMaxMem:");
    sb.append(this.jvmMaxMem);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeType:");
    sb.append(this.nodeType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("domain:");
    if (this.domain == null) {
      sb.append("null");
    } else {
      sb.append(this.domain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("macAddress:");
    if (this.macAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.macAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("internetConnectivity:");
    sb.append(this.internetConnectivity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ipAddress:");
    if (this.ipAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.ipAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rpcPort:");
    sb.append(this.rpcPort);
    first = false;
    if (isSetPid()) {
      if (!first) sb.append(", ");
      sb.append("pid:");
      sb.append(this.pid);
      first = false;
    }
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetProcName()) {
      if (!first) sb.append(", ");
      sb.append("procName:");
      if (this.procName == null) {
        sb.append("null");
      } else {
        sb.append(this.procName);
      }
      first = false;
    }
    if (isSetCpuPerc()) {
      if (!first) sb.append(", ");
      sb.append("cpuPerc:");
      sb.append(this.cpuPerc);
      first = false;
    }
    if (isSetMemUsed()) {
      if (!first) sb.append(", ");
      sb.append("memUsed:");
      sb.append(this.memUsed);
      first = false;
    }
    if (isSetJvmAllocMem()) {
      if (!first) sb.append(", ");
      sb.append("jvmAllocMem:");
      sb.append(this.jvmAllocMem);
      first = false;
    }
    if (isSetFsAvail()) {
      if (!first) sb.append(", ");
      sb.append("fsAvail:");
      sb.append(this.fsAvail);
      first = false;
    }
    if (isSetFsUsed()) {
      if (!first) sb.append(", ");
      sb.append("fsUsed:");
      sb.append(this.fsUsed);
      first = false;
    }
    if (isSetFsUsedPerc()) {
      if (!first) sb.append(", ");
      sb.append("fsUsedPerc:");
      sb.append(this.fsUsedPerc);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("nodePayload:");
    if (this.nodePayload == null) {
      sb.append("null");
    } else {
      sb.append(this.nodePayload);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("configUpdated:");
    sb.append(this.configUpdated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payloadUpdated:");
    sb.append(this.payloadUpdated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("valid:");
    sb.append(this.valid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (nodeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeId' was not present! Struct: " + toString());
    }
    if (cpuVendor == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpuVendor' was not present! Struct: " + toString());
    }
    if (cpuModel == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpuModel' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'memSize' because it's a primitive and you chose the non-beans generator.
    if (fsName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fsName' was not present! Struct: " + toString());
    }
    if (fsType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fsType' was not present! Struct: " + toString());
    }
    if (fsFormat == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fsFormat' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'fsSize' because it's a primitive and you chose the non-beans generator.
    if (osArch == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'osArch' was not present! Struct: " + toString());
    }
    if (osName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'osName' was not present! Struct: " + toString());
    }
    if (osDesc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'osDesc' was not present! Struct: " + toString());
    }
    if (osVersion == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'osVersion' was not present! Struct: " + toString());
    }
    if (jvmName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jvmName' was not present! Struct: " + toString());
    }
    if (jvmVersion == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'jvmVersion' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'jvmMaxMem' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'nodeType' because it's a primitive and you chose the non-beans generator.
    if (domain == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'domain' was not present! Struct: " + toString());
    }
    if (macAddress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'macAddress' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'internetConnectivity' because it's a primitive and you chose the non-beans generator.
    if (ipAddress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ipAddress' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'rpcPort' because it's a primitive and you chose the non-beans generator.
    if (nodePayload == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodePayload' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'configUpdated' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'payloadUpdated' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'valid' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (nodePayload != null) {
      nodePayload.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodeInfoStandardScheme getScheme() {
      return new NodeInfoStandardScheme();
    }
  }

  private static class NodeInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<NodeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeId = iprot.readString();
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CPU_VENDOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpuVendor = iprot.readString();
              struct.setCpuVendorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CPU_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpuModel = iprot.readString();
              struct.setCpuModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEM_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memSize = iprot.readI32();
              struct.setMemSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fsName = iprot.readString();
              struct.setFsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fsType = iprot.readString();
              struct.setFsTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FS_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fsFormat = iprot.readString();
              struct.setFsFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FS_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fsSize = iprot.readI32();
              struct.setFsSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OS_ARCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osArch = iprot.readString();
              struct.setOsArchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osName = iprot.readString();
              struct.setOsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OS_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osDesc = iprot.readString();
              struct.setOsDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osVersion = iprot.readString();
              struct.setOsVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // JVM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jvmName = iprot.readString();
              struct.setJvmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // JVM_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jvmVersion = iprot.readString();
              struct.setJvmVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // JVM_MAX_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jvmMaxMem = iprot.readI32();
              struct.setJvmMaxMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NODE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeType = iprot.readI32();
              struct.setNodeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.domain = iprot.readString();
              struct.setDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MAC_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.macAddress = iprot.readString();
              struct.setMacAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // INTERNET_CONNECTIVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.internetConnectivity = iprot.readI32();
              struct.setInternetConnectivityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipAddress = iprot.readString();
              struct.setIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // RPC_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rpcPort = iprot.readI32();
              struct.setRpcPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PROC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.procName = iprot.readString();
              struct.setProcNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CPU_PERC
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpuPerc = iprot.readDouble();
              struct.setCpuPercIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MEM_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memUsed = iprot.readI32();
              struct.setMemUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // JVM_ALLOC_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jvmAllocMem = iprot.readI32();
              struct.setJvmAllocMemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // FS_AVAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fsAvail = iprot.readI32();
              struct.setFsAvailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // FS_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fsUsed = iprot.readI32();
              struct.setFsUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // FS_USED_PERC
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fsUsedPerc = iprot.readDouble();
              struct.setFsUsedPercIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // NODE_PAYLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodePayload = new NodePayload();
              struct.nodePayload.read(iprot);
              struct.setNodePayloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // CONFIG_UPDATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.configUpdated = iprot.readI64();
              struct.setConfigUpdatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // PAYLOAD_UPDATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.payloadUpdated = iprot.readI64();
              struct.setPayloadUpdatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valid = iprot.readI32();
              struct.setValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMemSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'memSize' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFsSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fsSize' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetJvmMaxMem()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jvmMaxMem' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNodeType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInternetConnectivity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'internetConnectivity' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRpcPort()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rpcPort' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetConfigUpdated()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'configUpdated' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPayloadUpdated()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'payloadUpdated' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetValid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'valid' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeId != null) {
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeString(struct.nodeId);
        oprot.writeFieldEnd();
      }
      if (struct.cpuVendor != null) {
        oprot.writeFieldBegin(CPU_VENDOR_FIELD_DESC);
        oprot.writeString(struct.cpuVendor);
        oprot.writeFieldEnd();
      }
      if (struct.cpuModel != null) {
        oprot.writeFieldBegin(CPU_MODEL_FIELD_DESC);
        oprot.writeString(struct.cpuModel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEM_SIZE_FIELD_DESC);
      oprot.writeI32(struct.memSize);
      oprot.writeFieldEnd();
      if (struct.fsName != null) {
        oprot.writeFieldBegin(FS_NAME_FIELD_DESC);
        oprot.writeString(struct.fsName);
        oprot.writeFieldEnd();
      }
      if (struct.fsType != null) {
        oprot.writeFieldBegin(FS_TYPE_FIELD_DESC);
        oprot.writeString(struct.fsType);
        oprot.writeFieldEnd();
      }
      if (struct.fsFormat != null) {
        oprot.writeFieldBegin(FS_FORMAT_FIELD_DESC);
        oprot.writeString(struct.fsFormat);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FS_SIZE_FIELD_DESC);
      oprot.writeI32(struct.fsSize);
      oprot.writeFieldEnd();
      if (struct.osArch != null) {
        oprot.writeFieldBegin(OS_ARCH_FIELD_DESC);
        oprot.writeString(struct.osArch);
        oprot.writeFieldEnd();
      }
      if (struct.osName != null) {
        oprot.writeFieldBegin(OS_NAME_FIELD_DESC);
        oprot.writeString(struct.osName);
        oprot.writeFieldEnd();
      }
      if (struct.osDesc != null) {
        oprot.writeFieldBegin(OS_DESC_FIELD_DESC);
        oprot.writeString(struct.osDesc);
        oprot.writeFieldEnd();
      }
      if (struct.osVersion != null) {
        oprot.writeFieldBegin(OS_VERSION_FIELD_DESC);
        oprot.writeString(struct.osVersion);
        oprot.writeFieldEnd();
      }
      if (struct.jvmName != null) {
        oprot.writeFieldBegin(JVM_NAME_FIELD_DESC);
        oprot.writeString(struct.jvmName);
        oprot.writeFieldEnd();
      }
      if (struct.jvmVersion != null) {
        oprot.writeFieldBegin(JVM_VERSION_FIELD_DESC);
        oprot.writeString(struct.jvmVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(JVM_MAX_MEM_FIELD_DESC);
      oprot.writeI32(struct.jvmMaxMem);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.nodeType);
      oprot.writeFieldEnd();
      if (struct.domain != null) {
        oprot.writeFieldBegin(DOMAIN_FIELD_DESC);
        oprot.writeString(struct.domain);
        oprot.writeFieldEnd();
      }
      if (struct.macAddress != null) {
        oprot.writeFieldBegin(MAC_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.macAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTERNET_CONNECTIVITY_FIELD_DESC);
      oprot.writeI32(struct.internetConnectivity);
      oprot.writeFieldEnd();
      if (struct.ipAddress != null) {
        oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.ipAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RPC_PORT_FIELD_DESC);
      oprot.writeI32(struct.rpcPort);
      oprot.writeFieldEnd();
      if (struct.isSetPid()) {
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.procName != null) {
        if (struct.isSetProcName()) {
          oprot.writeFieldBegin(PROC_NAME_FIELD_DESC);
          oprot.writeString(struct.procName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCpuPerc()) {
        oprot.writeFieldBegin(CPU_PERC_FIELD_DESC);
        oprot.writeDouble(struct.cpuPerc);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemUsed()) {
        oprot.writeFieldBegin(MEM_USED_FIELD_DESC);
        oprot.writeI32(struct.memUsed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetJvmAllocMem()) {
        oprot.writeFieldBegin(JVM_ALLOC_MEM_FIELD_DESC);
        oprot.writeI32(struct.jvmAllocMem);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFsAvail()) {
        oprot.writeFieldBegin(FS_AVAIL_FIELD_DESC);
        oprot.writeI32(struct.fsAvail);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFsUsed()) {
        oprot.writeFieldBegin(FS_USED_FIELD_DESC);
        oprot.writeI32(struct.fsUsed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFsUsedPerc()) {
        oprot.writeFieldBegin(FS_USED_PERC_FIELD_DESC);
        oprot.writeDouble(struct.fsUsedPerc);
        oprot.writeFieldEnd();
      }
      if (struct.nodePayload != null) {
        oprot.writeFieldBegin(NODE_PAYLOAD_FIELD_DESC);
        struct.nodePayload.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONFIG_UPDATED_FIELD_DESC);
      oprot.writeI64(struct.configUpdated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYLOAD_UPDATED_FIELD_DESC);
      oprot.writeI64(struct.payloadUpdated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALID_FIELD_DESC);
      oprot.writeI32(struct.valid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodeInfoTupleScheme getScheme() {
      return new NodeInfoTupleScheme();
    }
  }

  private static class NodeInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<NodeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.nodeId);
      oprot.writeString(struct.cpuVendor);
      oprot.writeString(struct.cpuModel);
      oprot.writeI32(struct.memSize);
      oprot.writeString(struct.fsName);
      oprot.writeString(struct.fsType);
      oprot.writeString(struct.fsFormat);
      oprot.writeI32(struct.fsSize);
      oprot.writeString(struct.osArch);
      oprot.writeString(struct.osName);
      oprot.writeString(struct.osDesc);
      oprot.writeString(struct.osVersion);
      oprot.writeString(struct.jvmName);
      oprot.writeString(struct.jvmVersion);
      oprot.writeI32(struct.jvmMaxMem);
      oprot.writeI32(struct.nodeType);
      oprot.writeString(struct.domain);
      oprot.writeString(struct.macAddress);
      oprot.writeI32(struct.internetConnectivity);
      oprot.writeString(struct.ipAddress);
      oprot.writeI32(struct.rpcPort);
      struct.nodePayload.write(oprot);
      oprot.writeI64(struct.configUpdated);
      oprot.writeI64(struct.payloadUpdated);
      oprot.writeI32(struct.valid);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetUser()) {
        optionals.set(1);
      }
      if (struct.isSetStartTime()) {
        optionals.set(2);
      }
      if (struct.isSetProcName()) {
        optionals.set(3);
      }
      if (struct.isSetCpuPerc()) {
        optionals.set(4);
      }
      if (struct.isSetMemUsed()) {
        optionals.set(5);
      }
      if (struct.isSetJvmAllocMem()) {
        optionals.set(6);
      }
      if (struct.isSetFsAvail()) {
        optionals.set(7);
      }
      if (struct.isSetFsUsed()) {
        optionals.set(8);
      }
      if (struct.isSetFsUsedPerc()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetUser()) {
        oprot.writeString(struct.user);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetProcName()) {
        oprot.writeString(struct.procName);
      }
      if (struct.isSetCpuPerc()) {
        oprot.writeDouble(struct.cpuPerc);
      }
      if (struct.isSetMemUsed()) {
        oprot.writeI32(struct.memUsed);
      }
      if (struct.isSetJvmAllocMem()) {
        oprot.writeI32(struct.jvmAllocMem);
      }
      if (struct.isSetFsAvail()) {
        oprot.writeI32(struct.fsAvail);
      }
      if (struct.isSetFsUsed()) {
        oprot.writeI32(struct.fsUsed);
      }
      if (struct.isSetFsUsedPerc()) {
        oprot.writeDouble(struct.fsUsedPerc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.nodeId = iprot.readString();
      struct.setNodeIdIsSet(true);
      struct.cpuVendor = iprot.readString();
      struct.setCpuVendorIsSet(true);
      struct.cpuModel = iprot.readString();
      struct.setCpuModelIsSet(true);
      struct.memSize = iprot.readI32();
      struct.setMemSizeIsSet(true);
      struct.fsName = iprot.readString();
      struct.setFsNameIsSet(true);
      struct.fsType = iprot.readString();
      struct.setFsTypeIsSet(true);
      struct.fsFormat = iprot.readString();
      struct.setFsFormatIsSet(true);
      struct.fsSize = iprot.readI32();
      struct.setFsSizeIsSet(true);
      struct.osArch = iprot.readString();
      struct.setOsArchIsSet(true);
      struct.osName = iprot.readString();
      struct.setOsNameIsSet(true);
      struct.osDesc = iprot.readString();
      struct.setOsDescIsSet(true);
      struct.osVersion = iprot.readString();
      struct.setOsVersionIsSet(true);
      struct.jvmName = iprot.readString();
      struct.setJvmNameIsSet(true);
      struct.jvmVersion = iprot.readString();
      struct.setJvmVersionIsSet(true);
      struct.jvmMaxMem = iprot.readI32();
      struct.setJvmMaxMemIsSet(true);
      struct.nodeType = iprot.readI32();
      struct.setNodeTypeIsSet(true);
      struct.domain = iprot.readString();
      struct.setDomainIsSet(true);
      struct.macAddress = iprot.readString();
      struct.setMacAddressIsSet(true);
      struct.internetConnectivity = iprot.readI32();
      struct.setInternetConnectivityIsSet(true);
      struct.ipAddress = iprot.readString();
      struct.setIpAddressIsSet(true);
      struct.rpcPort = iprot.readI32();
      struct.setRpcPortIsSet(true);
      struct.nodePayload = new NodePayload();
      struct.nodePayload.read(iprot);
      struct.setNodePayloadIsSet(true);
      struct.configUpdated = iprot.readI64();
      struct.setConfigUpdatedIsSet(true);
      struct.payloadUpdated = iprot.readI64();
      struct.setPayloadUpdatedIsSet(true);
      struct.valid = iprot.readI32();
      struct.setValidIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user = iprot.readString();
        struct.setUserIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.procName = iprot.readString();
        struct.setProcNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cpuPerc = iprot.readDouble();
        struct.setCpuPercIsSet(true);
      }
      if (incoming.get(5)) {
        struct.memUsed = iprot.readI32();
        struct.setMemUsedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.jvmAllocMem = iprot.readI32();
        struct.setJvmAllocMemIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fsAvail = iprot.readI32();
        struct.setFsAvailIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fsUsed = iprot.readI32();
        struct.setFsUsedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fsUsedPerc = iprot.readDouble();
        struct.setFsUsedPercIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

