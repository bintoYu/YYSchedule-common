/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.binto.YYSchedule.common.rpc.domain.node;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-06-11")
public class NodePayload implements org.apache.thrift.TBase<NodePayload, NodePayload._Fields>, java.io.Serializable, Cloneable, Comparable<NodePayload> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodePayload");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_RUNTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeRuntime", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField QUEUE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("queueLimit", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField QUEUE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("queueNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EXPECTED_DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("expectedDelay", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField PREFERRED_PROGRAM_TYPE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("preferredProgramTypeList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField PREFERRED_PROGRAM_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("preferredProgramIdList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField FUNCTION_NAME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("functionNameList", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NodePayloadStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NodePayloadTupleSchemeFactory();

  public java.lang.String nodeId; // required
  public NodeRuntime nodeRuntime; // required
  public int queueLimit; // required
  public int queueNum; // required
  public long expectedDelay; // required
  public java.util.List<java.lang.Integer> preferredProgramTypeList; // required
  public java.util.List<java.lang.Long> preferredProgramIdList; // required
  public java.util.List<java.lang.String> functionNameList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "nodeId"),
    NODE_RUNTIME((short)2, "nodeRuntime"),
    QUEUE_LIMIT((short)3, "queueLimit"),
    QUEUE_NUM((short)4, "queueNum"),
    EXPECTED_DELAY((short)5, "expectedDelay"),
    PREFERRED_PROGRAM_TYPE_LIST((short)6, "preferredProgramTypeList"),
    PREFERRED_PROGRAM_ID_LIST((short)7, "preferredProgramIdList"),
    FUNCTION_NAME_LIST((short)8, "functionNameList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // NODE_RUNTIME
          return NODE_RUNTIME;
        case 3: // QUEUE_LIMIT
          return QUEUE_LIMIT;
        case 4: // QUEUE_NUM
          return QUEUE_NUM;
        case 5: // EXPECTED_DELAY
          return EXPECTED_DELAY;
        case 6: // PREFERRED_PROGRAM_TYPE_LIST
          return PREFERRED_PROGRAM_TYPE_LIST;
        case 7: // PREFERRED_PROGRAM_ID_LIST
          return PREFERRED_PROGRAM_ID_LIST;
        case 8: // FUNCTION_NAME_LIST
          return FUNCTION_NAME_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUEUELIMIT_ISSET_ID = 0;
  private static final int __QUEUENUM_ISSET_ID = 1;
  private static final int __EXPECTEDDELAY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FUNCTION_NAME_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_RUNTIME, new org.apache.thrift.meta_data.FieldMetaData("nodeRuntime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeRuntime.class)));
    tmpMap.put(_Fields.QUEUE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("queueLimit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUEUE_NUM, new org.apache.thrift.meta_data.FieldMetaData("queueNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPECTED_DELAY, new org.apache.thrift.meta_data.FieldMetaData("expectedDelay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PREFERRED_PROGRAM_TYPE_LIST, new org.apache.thrift.meta_data.FieldMetaData("preferredProgramTypeList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PREFERRED_PROGRAM_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("preferredProgramIdList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.FUNCTION_NAME_LIST, new org.apache.thrift.meta_data.FieldMetaData("functionNameList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodePayload.class, metaDataMap);
  }

  public NodePayload() {
  }

  public NodePayload(
    java.lang.String nodeId,
    NodeRuntime nodeRuntime,
    int queueLimit,
    int queueNum,
    long expectedDelay,
    java.util.List<java.lang.Integer> preferredProgramTypeList,
    java.util.List<java.lang.Long> preferredProgramIdList)
  {
    this();
    this.nodeId = nodeId;
    this.nodeRuntime = nodeRuntime;
    this.queueLimit = queueLimit;
    setQueueLimitIsSet(true);
    this.queueNum = queueNum;
    setQueueNumIsSet(true);
    this.expectedDelay = expectedDelay;
    setExpectedDelayIsSet(true);
    this.preferredProgramTypeList = preferredProgramTypeList;
    this.preferredProgramIdList = preferredProgramIdList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodePayload(NodePayload other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNodeId()) {
      this.nodeId = other.nodeId;
    }
    if (other.isSetNodeRuntime()) {
      this.nodeRuntime = new NodeRuntime(other.nodeRuntime);
    }
    this.queueLimit = other.queueLimit;
    this.queueNum = other.queueNum;
    this.expectedDelay = other.expectedDelay;
    if (other.isSetPreferredProgramTypeList()) {
      java.util.List<java.lang.Integer> __this__preferredProgramTypeList = new java.util.ArrayList<java.lang.Integer>(other.preferredProgramTypeList);
      this.preferredProgramTypeList = __this__preferredProgramTypeList;
    }
    if (other.isSetPreferredProgramIdList()) {
      java.util.List<java.lang.Long> __this__preferredProgramIdList = new java.util.ArrayList<java.lang.Long>(other.preferredProgramIdList);
      this.preferredProgramIdList = __this__preferredProgramIdList;
    }
    if (other.isSetFunctionNameList()) {
      java.util.List<java.lang.String> __this__functionNameList = new java.util.ArrayList<java.lang.String>(other.functionNameList);
      this.functionNameList = __this__functionNameList;
    }
  }

  public NodePayload deepCopy() {
    return new NodePayload(this);
  }

  @Override
  public void clear() {
    this.nodeId = null;
    this.nodeRuntime = null;
    setQueueLimitIsSet(false);
    this.queueLimit = 0;
    setQueueNumIsSet(false);
    this.queueNum = 0;
    setExpectedDelayIsSet(false);
    this.expectedDelay = 0;
    this.preferredProgramTypeList = null;
    this.preferredProgramIdList = null;
    this.functionNameList = null;
  }

  public java.lang.String getNodeId() {
    return this.nodeId;
  }

  public NodePayload setNodeId(java.lang.String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  public void unsetNodeId() {
    this.nodeId = null;
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return this.nodeId != null;
  }

  public void setNodeIdIsSet(boolean value) {
    if (!value) {
      this.nodeId = null;
    }
  }

  public NodeRuntime getNodeRuntime() {
    return this.nodeRuntime;
  }

  public NodePayload setNodeRuntime(NodeRuntime nodeRuntime) {
    this.nodeRuntime = nodeRuntime;
    return this;
  }

  public void unsetNodeRuntime() {
    this.nodeRuntime = null;
  }

  /** Returns true if field nodeRuntime is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeRuntime() {
    return this.nodeRuntime != null;
  }

  public void setNodeRuntimeIsSet(boolean value) {
    if (!value) {
      this.nodeRuntime = null;
    }
  }

  public int getQueueLimit() {
    return this.queueLimit;
  }

  public NodePayload setQueueLimit(int queueLimit) {
    this.queueLimit = queueLimit;
    setQueueLimitIsSet(true);
    return this;
  }

  public void unsetQueueLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUEUELIMIT_ISSET_ID);
  }

  /** Returns true if field queueLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUEUELIMIT_ISSET_ID);
  }

  public void setQueueLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUEUELIMIT_ISSET_ID, value);
  }

  public int getQueueNum() {
    return this.queueNum;
  }

  public NodePayload setQueueNum(int queueNum) {
    this.queueNum = queueNum;
    setQueueNumIsSet(true);
    return this;
  }

  public void unsetQueueNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUEUENUM_ISSET_ID);
  }

  /** Returns true if field queueNum is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUEUENUM_ISSET_ID);
  }

  public void setQueueNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUEUENUM_ISSET_ID, value);
  }

  public long getExpectedDelay() {
    return this.expectedDelay;
  }

  public NodePayload setExpectedDelay(long expectedDelay) {
    this.expectedDelay = expectedDelay;
    setExpectedDelayIsSet(true);
    return this;
  }

  public void unsetExpectedDelay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPECTEDDELAY_ISSET_ID);
  }

  /** Returns true if field expectedDelay is set (has been assigned a value) and false otherwise */
  public boolean isSetExpectedDelay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPECTEDDELAY_ISSET_ID);
  }

  public void setExpectedDelayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPECTEDDELAY_ISSET_ID, value);
  }

  public int getPreferredProgramTypeListSize() {
    return (this.preferredProgramTypeList == null) ? 0 : this.preferredProgramTypeList.size();
  }

  public java.util.Iterator<java.lang.Integer> getPreferredProgramTypeListIterator() {
    return (this.preferredProgramTypeList == null) ? null : this.preferredProgramTypeList.iterator();
  }

  public void addToPreferredProgramTypeList(int elem) {
    if (this.preferredProgramTypeList == null) {
      this.preferredProgramTypeList = new java.util.ArrayList<java.lang.Integer>();
    }
    this.preferredProgramTypeList.add(elem);
  }

  public java.util.List<java.lang.Integer> getPreferredProgramTypeList() {
    return this.preferredProgramTypeList;
  }

  public NodePayload setPreferredProgramTypeList(java.util.List<java.lang.Integer> preferredProgramTypeList) {
    this.preferredProgramTypeList = preferredProgramTypeList;
    return this;
  }

  public void unsetPreferredProgramTypeList() {
    this.preferredProgramTypeList = null;
  }

  /** Returns true if field preferredProgramTypeList is set (has been assigned a value) and false otherwise */
  public boolean isSetPreferredProgramTypeList() {
    return this.preferredProgramTypeList != null;
  }

  public void setPreferredProgramTypeListIsSet(boolean value) {
    if (!value) {
      this.preferredProgramTypeList = null;
    }
  }

  public int getPreferredProgramIdListSize() {
    return (this.preferredProgramIdList == null) ? 0 : this.preferredProgramIdList.size();
  }

  public java.util.Iterator<java.lang.Long> getPreferredProgramIdListIterator() {
    return (this.preferredProgramIdList == null) ? null : this.preferredProgramIdList.iterator();
  }

  public void addToPreferredProgramIdList(long elem) {
    if (this.preferredProgramIdList == null) {
      this.preferredProgramIdList = new java.util.ArrayList<java.lang.Long>();
    }
    this.preferredProgramIdList.add(elem);
  }

  public java.util.List<java.lang.Long> getPreferredProgramIdList() {
    return this.preferredProgramIdList;
  }

  public NodePayload setPreferredProgramIdList(java.util.List<java.lang.Long> preferredProgramIdList) {
    this.preferredProgramIdList = preferredProgramIdList;
    return this;
  }

  public void unsetPreferredProgramIdList() {
    this.preferredProgramIdList = null;
  }

  /** Returns true if field preferredProgramIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetPreferredProgramIdList() {
    return this.preferredProgramIdList != null;
  }

  public void setPreferredProgramIdListIsSet(boolean value) {
    if (!value) {
      this.preferredProgramIdList = null;
    }
  }

  public int getFunctionNameListSize() {
    return (this.functionNameList == null) ? 0 : this.functionNameList.size();
  }

  public java.util.Iterator<java.lang.String> getFunctionNameListIterator() {
    return (this.functionNameList == null) ? null : this.functionNameList.iterator();
  }

  public void addToFunctionNameList(java.lang.String elem) {
    if (this.functionNameList == null) {
      this.functionNameList = new java.util.ArrayList<java.lang.String>();
    }
    this.functionNameList.add(elem);
  }

  public java.util.List<java.lang.String> getFunctionNameList() {
    return this.functionNameList;
  }

  public NodePayload setFunctionNameList(java.util.List<java.lang.String> functionNameList) {
    this.functionNameList = functionNameList;
    return this;
  }

  public void unsetFunctionNameList() {
    this.functionNameList = null;
  }

  /** Returns true if field functionNameList is set (has been assigned a value) and false otherwise */
  public boolean isSetFunctionNameList() {
    return this.functionNameList != null;
  }

  public void setFunctionNameListIsSet(boolean value) {
    if (!value) {
      this.functionNameList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((java.lang.String)value);
      }
      break;

    case NODE_RUNTIME:
      if (value == null) {
        unsetNodeRuntime();
      } else {
        setNodeRuntime((NodeRuntime)value);
      }
      break;

    case QUEUE_LIMIT:
      if (value == null) {
        unsetQueueLimit();
      } else {
        setQueueLimit((java.lang.Integer)value);
      }
      break;

    case QUEUE_NUM:
      if (value == null) {
        unsetQueueNum();
      } else {
        setQueueNum((java.lang.Integer)value);
      }
      break;

    case EXPECTED_DELAY:
      if (value == null) {
        unsetExpectedDelay();
      } else {
        setExpectedDelay((java.lang.Long)value);
      }
      break;

    case PREFERRED_PROGRAM_TYPE_LIST:
      if (value == null) {
        unsetPreferredProgramTypeList();
      } else {
        setPreferredProgramTypeList((java.util.List<java.lang.Integer>)value);
      }
      break;

    case PREFERRED_PROGRAM_ID_LIST:
      if (value == null) {
        unsetPreferredProgramIdList();
      } else {
        setPreferredProgramIdList((java.util.List<java.lang.Long>)value);
      }
      break;

    case FUNCTION_NAME_LIST:
      if (value == null) {
        unsetFunctionNameList();
      } else {
        setFunctionNameList((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNodeId();

    case NODE_RUNTIME:
      return getNodeRuntime();

    case QUEUE_LIMIT:
      return getQueueLimit();

    case QUEUE_NUM:
      return getQueueNum();

    case EXPECTED_DELAY:
      return getExpectedDelay();

    case PREFERRED_PROGRAM_TYPE_LIST:
      return getPreferredProgramTypeList();

    case PREFERRED_PROGRAM_ID_LIST:
      return getPreferredProgramIdList();

    case FUNCTION_NAME_LIST:
      return getFunctionNameList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNodeId();
    case NODE_RUNTIME:
      return isSetNodeRuntime();
    case QUEUE_LIMIT:
      return isSetQueueLimit();
    case QUEUE_NUM:
      return isSetQueueNum();
    case EXPECTED_DELAY:
      return isSetExpectedDelay();
    case PREFERRED_PROGRAM_TYPE_LIST:
      return isSetPreferredProgramTypeList();
    case PREFERRED_PROGRAM_ID_LIST:
      return isSetPreferredProgramIdList();
    case FUNCTION_NAME_LIST:
      return isSetFunctionNameList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NodePayload)
      return this.equals((NodePayload)that);
    return false;
  }

  public boolean equals(NodePayload that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nodeId = true && this.isSetNodeId();
    boolean that_present_nodeId = true && that.isSetNodeId();
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (!this.nodeId.equals(that.nodeId))
        return false;
    }

    boolean this_present_nodeRuntime = true && this.isSetNodeRuntime();
    boolean that_present_nodeRuntime = true && that.isSetNodeRuntime();
    if (this_present_nodeRuntime || that_present_nodeRuntime) {
      if (!(this_present_nodeRuntime && that_present_nodeRuntime))
        return false;
      if (!this.nodeRuntime.equals(that.nodeRuntime))
        return false;
    }

    boolean this_present_queueLimit = true;
    boolean that_present_queueLimit = true;
    if (this_present_queueLimit || that_present_queueLimit) {
      if (!(this_present_queueLimit && that_present_queueLimit))
        return false;
      if (this.queueLimit != that.queueLimit)
        return false;
    }

    boolean this_present_queueNum = true;
    boolean that_present_queueNum = true;
    if (this_present_queueNum || that_present_queueNum) {
      if (!(this_present_queueNum && that_present_queueNum))
        return false;
      if (this.queueNum != that.queueNum)
        return false;
    }

    boolean this_present_expectedDelay = true;
    boolean that_present_expectedDelay = true;
    if (this_present_expectedDelay || that_present_expectedDelay) {
      if (!(this_present_expectedDelay && that_present_expectedDelay))
        return false;
      if (this.expectedDelay != that.expectedDelay)
        return false;
    }

    boolean this_present_preferredProgramTypeList = true && this.isSetPreferredProgramTypeList();
    boolean that_present_preferredProgramTypeList = true && that.isSetPreferredProgramTypeList();
    if (this_present_preferredProgramTypeList || that_present_preferredProgramTypeList) {
      if (!(this_present_preferredProgramTypeList && that_present_preferredProgramTypeList))
        return false;
      if (!this.preferredProgramTypeList.equals(that.preferredProgramTypeList))
        return false;
    }

    boolean this_present_preferredProgramIdList = true && this.isSetPreferredProgramIdList();
    boolean that_present_preferredProgramIdList = true && that.isSetPreferredProgramIdList();
    if (this_present_preferredProgramIdList || that_present_preferredProgramIdList) {
      if (!(this_present_preferredProgramIdList && that_present_preferredProgramIdList))
        return false;
      if (!this.preferredProgramIdList.equals(that.preferredProgramIdList))
        return false;
    }

    boolean this_present_functionNameList = true && this.isSetFunctionNameList();
    boolean that_present_functionNameList = true && that.isSetFunctionNameList();
    if (this_present_functionNameList || that_present_functionNameList) {
      if (!(this_present_functionNameList && that_present_functionNameList))
        return false;
      if (!this.functionNameList.equals(that.functionNameList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNodeId()) ? 131071 : 524287);
    if (isSetNodeId())
      hashCode = hashCode * 8191 + nodeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetNodeRuntime()) ? 131071 : 524287);
    if (isSetNodeRuntime())
      hashCode = hashCode * 8191 + nodeRuntime.hashCode();

    hashCode = hashCode * 8191 + queueLimit;

    hashCode = hashCode * 8191 + queueNum;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expectedDelay);

    hashCode = hashCode * 8191 + ((isSetPreferredProgramTypeList()) ? 131071 : 524287);
    if (isSetPreferredProgramTypeList())
      hashCode = hashCode * 8191 + preferredProgramTypeList.hashCode();

    hashCode = hashCode * 8191 + ((isSetPreferredProgramIdList()) ? 131071 : 524287);
    if (isSetPreferredProgramIdList())
      hashCode = hashCode * 8191 + preferredProgramIdList.hashCode();

    hashCode = hashCode * 8191 + ((isSetFunctionNameList()) ? 131071 : 524287);
    if (isSetFunctionNameList())
      hashCode = hashCode * 8191 + functionNameList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NodePayload other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodeRuntime()).compareTo(other.isSetNodeRuntime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeRuntime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeRuntime, other.nodeRuntime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQueueLimit()).compareTo(other.isSetQueueLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueLimit, other.queueLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQueueNum()).compareTo(other.isSetQueueNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueNum, other.queueNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExpectedDelay()).compareTo(other.isSetExpectedDelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpectedDelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectedDelay, other.expectedDelay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPreferredProgramTypeList()).compareTo(other.isSetPreferredProgramTypeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferredProgramTypeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preferredProgramTypeList, other.preferredProgramTypeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPreferredProgramIdList()).compareTo(other.isSetPreferredProgramIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferredProgramIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preferredProgramIdList, other.preferredProgramIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFunctionNameList()).compareTo(other.isSetFunctionNameList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunctionNameList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functionNameList, other.functionNameList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NodePayload(");
    boolean first = true;

    sb.append("nodeId:");
    if (this.nodeId == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeRuntime:");
    if (this.nodeRuntime == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeRuntime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueLimit:");
    sb.append(this.queueLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queueNum:");
    sb.append(this.queueNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expectedDelay:");
    sb.append(this.expectedDelay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preferredProgramTypeList:");
    if (this.preferredProgramTypeList == null) {
      sb.append("null");
    } else {
      sb.append(this.preferredProgramTypeList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preferredProgramIdList:");
    if (this.preferredProgramIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.preferredProgramIdList);
    }
    first = false;
    if (isSetFunctionNameList()) {
      if (!first) sb.append(", ");
      sb.append("functionNameList:");
      if (this.functionNameList == null) {
        sb.append("null");
      } else {
        sb.append(this.functionNameList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (nodeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeId' was not present! Struct: " + toString());
    }
    if (nodeRuntime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeRuntime' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'queueLimit' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'queueNum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'expectedDelay' because it's a primitive and you chose the non-beans generator.
    if (preferredProgramTypeList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'preferredProgramTypeList' was not present! Struct: " + toString());
    }
    if (preferredProgramIdList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'preferredProgramIdList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (nodeRuntime != null) {
      nodeRuntime.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodePayloadStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodePayloadStandardScheme getScheme() {
      return new NodePayloadStandardScheme();
    }
  }

  private static class NodePayloadStandardScheme extends org.apache.thrift.scheme.StandardScheme<NodePayload> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodePayload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeId = iprot.readString();
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_RUNTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeRuntime = new NodeRuntime();
              struct.nodeRuntime.read(iprot);
              struct.setNodeRuntimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUEUE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queueLimit = iprot.readI32();
              struct.setQueueLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUEUE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queueNum = iprot.readI32();
              struct.setQueueNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXPECTED_DELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expectedDelay = iprot.readI64();
              struct.setExpectedDelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PREFERRED_PROGRAM_TYPE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.preferredProgramTypeList = new java.util.ArrayList<java.lang.Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.preferredProgramTypeList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPreferredProgramTypeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PREFERRED_PROGRAM_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.preferredProgramIdList = new java.util.ArrayList<java.lang.Long>(_list3.size);
                long _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI64();
                  struct.preferredProgramIdList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setPreferredProgramIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FUNCTION_NAME_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.functionNameList = new java.util.ArrayList<java.lang.String>(_list6.size);
                java.lang.String _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.functionNameList.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setFunctionNameListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetQueueLimit()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'queueLimit' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetQueueNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'queueNum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetExpectedDelay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'expectedDelay' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodePayload struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeId != null) {
        oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
        oprot.writeString(struct.nodeId);
        oprot.writeFieldEnd();
      }
      if (struct.nodeRuntime != null) {
        oprot.writeFieldBegin(NODE_RUNTIME_FIELD_DESC);
        struct.nodeRuntime.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUEUE_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.queueLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUEUE_NUM_FIELD_DESC);
      oprot.writeI32(struct.queueNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPECTED_DELAY_FIELD_DESC);
      oprot.writeI64(struct.expectedDelay);
      oprot.writeFieldEnd();
      if (struct.preferredProgramTypeList != null) {
        oprot.writeFieldBegin(PREFERRED_PROGRAM_TYPE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.preferredProgramTypeList.size()));
          for (int _iter9 : struct.preferredProgramTypeList)
          {
            oprot.writeI32(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.preferredProgramIdList != null) {
        oprot.writeFieldBegin(PREFERRED_PROGRAM_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.preferredProgramIdList.size()));
          for (long _iter10 : struct.preferredProgramIdList)
          {
            oprot.writeI64(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.functionNameList != null) {
        if (struct.isSetFunctionNameList()) {
          oprot.writeFieldBegin(FUNCTION_NAME_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.functionNameList.size()));
            for (java.lang.String _iter11 : struct.functionNameList)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodePayloadTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NodePayloadTupleScheme getScheme() {
      return new NodePayloadTupleScheme();
    }
  }

  private static class NodePayloadTupleScheme extends org.apache.thrift.scheme.TupleScheme<NodePayload> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodePayload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.nodeId);
      struct.nodeRuntime.write(oprot);
      oprot.writeI32(struct.queueLimit);
      oprot.writeI32(struct.queueNum);
      oprot.writeI64(struct.expectedDelay);
      {
        oprot.writeI32(struct.preferredProgramTypeList.size());
        for (int _iter12 : struct.preferredProgramTypeList)
        {
          oprot.writeI32(_iter12);
        }
      }
      {
        oprot.writeI32(struct.preferredProgramIdList.size());
        for (long _iter13 : struct.preferredProgramIdList)
        {
          oprot.writeI64(_iter13);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFunctionNameList()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetFunctionNameList()) {
        {
          oprot.writeI32(struct.functionNameList.size());
          for (java.lang.String _iter14 : struct.functionNameList)
          {
            oprot.writeString(_iter14);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodePayload struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.nodeId = iprot.readString();
      struct.setNodeIdIsSet(true);
      struct.nodeRuntime = new NodeRuntime();
      struct.nodeRuntime.read(iprot);
      struct.setNodeRuntimeIsSet(true);
      struct.queueLimit = iprot.readI32();
      struct.setQueueLimitIsSet(true);
      struct.queueNum = iprot.readI32();
      struct.setQueueNumIsSet(true);
      struct.expectedDelay = iprot.readI64();
      struct.setExpectedDelayIsSet(true);
      {
        org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.preferredProgramTypeList = new java.util.ArrayList<java.lang.Integer>(_list15.size);
        int _elem16;
        for (int _i17 = 0; _i17 < _list15.size; ++_i17)
        {
          _elem16 = iprot.readI32();
          struct.preferredProgramTypeList.add(_elem16);
        }
      }
      struct.setPreferredProgramTypeListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.preferredProgramIdList = new java.util.ArrayList<java.lang.Long>(_list18.size);
        long _elem19;
        for (int _i20 = 0; _i20 < _list18.size; ++_i20)
        {
          _elem19 = iprot.readI64();
          struct.preferredProgramIdList.add(_elem19);
        }
      }
      struct.setPreferredProgramIdListIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.functionNameList = new java.util.ArrayList<java.lang.String>(_list21.size);
          java.lang.String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.functionNameList.add(_elem22);
          }
        }
        struct.setFunctionNameListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

