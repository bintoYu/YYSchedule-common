/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.binto.YYSchedule.common.rpc.service.task;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-06-11")
public class UserCallTaskService {

  /**
   * taskmanager作为服务端,User远程rpc调用
   */
  public interface Iface {

    /**
     * check network connectivity manually
     */
    public java.lang.String ping() throws com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * job submit
     * @param	userId
     * @param	taskPhaseList
     * @param	jobDistributionMode
     * @param	jobPriority
     * @param	jobOperationRequirementList
     * @param	jobResourceRequirementList
     * @param	parameterList
     * @param	impatienceTime
     * @return	jobId
     * 
     * @param userId
     * @param taskPhaseList
     * @param jobDistributionMode
     * @param jobPriority
     * @param jobOperationRequirementList
     * @param jobResourceRequirementList
     * @param parameterList
     * @param impatienceTime
     */
    public long submitJob(int userId, java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList, long impatienceTime) throws com.binto.YYSchedule.common.rpc.exception.InvalidRequestException, com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * mission submit
     * @param	userId
     * @param	taskPhaseList
     * @param	jobDistributionMode
     * @param	jobPriority
     * @param	jobOperationRequirementList
     * @param	jobResourceRequirementList
     * @param	parameterList
     * @param	impatienceTime
     * @return	missionId
     * 
     * @param userId
     * @param taskPhaseList
     * @param jobDistributionMode
     * @param jobPriority
     * @param jobOperationRequirementList
     * @param jobResourceRequirementList
     * @param parameterList
     * @param impatienceTime
     */
    public long submitJobForMission(int userId, java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList, long impatienceTime) throws com.binto.YYSchedule.common.rpc.exception.InvalidRequestException, com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * job termination
     * @param	jobIdList
     * @return	succeed or not
     * 
     * @param jobIdList
     */
    public int terminateJobs(java.util.List<java.lang.Long> jobIdList) throws com.binto.YYSchedule.common.rpc.exception.InvalidRequestException, com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.NotFoundException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * obtaining queue information
     * @return queue information in json
     */
    public java.lang.String obtainQueueInfo() throws com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

    /**
     * obtaining cluster statistics
     * @param
     * @return cluster statistic in json
     */
    public java.lang.String obtainClusterStat() throws com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void submitJob(int userId, java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList, long impatienceTime, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void submitJobForMission(int userId, java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList, long impatienceTime, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void terminateJobs(java.util.List<java.lang.Long> jobIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void obtainQueueInfo(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void obtainClusterStat(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String ping() throws com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public java.lang.String recv_ping() throws com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public long submitJob(int userId, java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList, long impatienceTime) throws com.binto.YYSchedule.common.rpc.exception.InvalidRequestException, com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_submitJob(userId, taskPhaseList, jobDistributionMode, jobPriority, jobOperationRequirementList, jobResourceRequirementList, parameterList, impatienceTime);
      return recv_submitJob();
    }

    public void send_submitJob(int userId, java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList, long impatienceTime) throws org.apache.thrift.TException
    {
      submitJob_args args = new submitJob_args();
      args.setUserId(userId);
      args.setTaskPhaseList(taskPhaseList);
      args.setJobDistributionMode(jobDistributionMode);
      args.setJobPriority(jobPriority);
      args.setJobOperationRequirementList(jobOperationRequirementList);
      args.setJobResourceRequirementList(jobResourceRequirementList);
      args.setParameterList(parameterList);
      args.setImpatienceTime(impatienceTime);
      sendBase("submitJob", args);
    }

    public long recv_submitJob() throws com.binto.YYSchedule.common.rpc.exception.InvalidRequestException, com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      submitJob_result result = new submitJob_result();
      receiveBase(result, "submitJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitJob failed: unknown result");
    }

    public long submitJobForMission(int userId, java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList, long impatienceTime) throws com.binto.YYSchedule.common.rpc.exception.InvalidRequestException, com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_submitJobForMission(userId, taskPhaseList, jobDistributionMode, jobPriority, jobOperationRequirementList, jobResourceRequirementList, parameterList, impatienceTime);
      return recv_submitJobForMission();
    }

    public void send_submitJobForMission(int userId, java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList, long impatienceTime) throws org.apache.thrift.TException
    {
      submitJobForMission_args args = new submitJobForMission_args();
      args.setUserId(userId);
      args.setTaskPhaseList(taskPhaseList);
      args.setJobDistributionMode(jobDistributionMode);
      args.setJobPriority(jobPriority);
      args.setJobOperationRequirementList(jobOperationRequirementList);
      args.setJobResourceRequirementList(jobResourceRequirementList);
      args.setParameterList(parameterList);
      args.setImpatienceTime(impatienceTime);
      sendBase("submitJobForMission", args);
    }

    public long recv_submitJobForMission() throws com.binto.YYSchedule.common.rpc.exception.InvalidRequestException, com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      submitJobForMission_result result = new submitJobForMission_result();
      receiveBase(result, "submitJobForMission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitJobForMission failed: unknown result");
    }

    public int terminateJobs(java.util.List<java.lang.Long> jobIdList) throws com.binto.YYSchedule.common.rpc.exception.InvalidRequestException, com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.NotFoundException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_terminateJobs(jobIdList);
      return recv_terminateJobs();
    }

    public void send_terminateJobs(java.util.List<java.lang.Long> jobIdList) throws org.apache.thrift.TException
    {
      terminateJobs_args args = new terminateJobs_args();
      args.setJobIdList(jobIdList);
      sendBase("terminateJobs", args);
    }

    public int recv_terminateJobs() throws com.binto.YYSchedule.common.rpc.exception.InvalidRequestException, com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.NotFoundException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      terminateJobs_result result = new terminateJobs_result();
      receiveBase(result, "terminateJobs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.nfe != null) {
        throw result.nfe;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "terminateJobs failed: unknown result");
    }

    public java.lang.String obtainQueueInfo() throws com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_obtainQueueInfo();
      return recv_obtainQueueInfo();
    }

    public void send_obtainQueueInfo() throws org.apache.thrift.TException
    {
      obtainQueueInfo_args args = new obtainQueueInfo_args();
      sendBase("obtainQueueInfo", args);
    }

    public java.lang.String recv_obtainQueueInfo() throws com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      obtainQueueInfo_result result = new obtainQueueInfo_result();
      receiveBase(result, "obtainQueueInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainQueueInfo failed: unknown result");
    }

    public java.lang.String obtainClusterStat() throws com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      send_obtainClusterStat();
      return recv_obtainClusterStat();
    }

    public void send_obtainClusterStat() throws org.apache.thrift.TException
    {
      obtainClusterStat_args args = new obtainClusterStat_args();
      sendBase("obtainClusterStat", args);
    }

    public java.lang.String recv_obtainClusterStat() throws com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException
    {
      obtainClusterStat_result result = new obtainClusterStat_result();
      receiveBase(result, "obtainClusterStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainClusterStat failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void submitJob(int userId, java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList, long impatienceTime, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitJob_call method_call = new submitJob_call(userId, taskPhaseList, jobDistributionMode, jobPriority, jobOperationRequirementList, jobResourceRequirementList, parameterList, impatienceTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitJob_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private int userId;
      private java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList;
      private com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode;
      private com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority;
      private java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList;
      private java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList;
      private java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList;
      private long impatienceTime;
      public submitJob_call(int userId, java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList, long impatienceTime, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.taskPhaseList = taskPhaseList;
        this.jobDistributionMode = jobDistributionMode;
        this.jobPriority = jobPriority;
        this.jobOperationRequirementList = jobOperationRequirementList;
        this.jobResourceRequirementList = jobResourceRequirementList;
        this.parameterList = parameterList;
        this.impatienceTime = impatienceTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitJob_args args = new submitJob_args();
        args.setUserId(userId);
        args.setTaskPhaseList(taskPhaseList);
        args.setJobDistributionMode(jobDistributionMode);
        args.setJobPriority(jobPriority);
        args.setJobOperationRequirementList(jobOperationRequirementList);
        args.setJobResourceRequirementList(jobResourceRequirementList);
        args.setParameterList(parameterList);
        args.setImpatienceTime(impatienceTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws com.binto.YYSchedule.common.rpc.exception.InvalidRequestException, com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitJob();
      }
    }

    public void submitJobForMission(int userId, java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList, long impatienceTime, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitJobForMission_call method_call = new submitJobForMission_call(userId, taskPhaseList, jobDistributionMode, jobPriority, jobOperationRequirementList, jobResourceRequirementList, parameterList, impatienceTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitJobForMission_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private int userId;
      private java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList;
      private com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode;
      private com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority;
      private java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList;
      private java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList;
      private java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList;
      private long impatienceTime;
      public submitJobForMission_call(int userId, java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode, com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList, java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList, long impatienceTime, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.taskPhaseList = taskPhaseList;
        this.jobDistributionMode = jobDistributionMode;
        this.jobPriority = jobPriority;
        this.jobOperationRequirementList = jobOperationRequirementList;
        this.jobResourceRequirementList = jobResourceRequirementList;
        this.parameterList = parameterList;
        this.impatienceTime = impatienceTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitJobForMission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitJobForMission_args args = new submitJobForMission_args();
        args.setUserId(userId);
        args.setTaskPhaseList(taskPhaseList);
        args.setJobDistributionMode(jobDistributionMode);
        args.setJobPriority(jobPriority);
        args.setJobOperationRequirementList(jobOperationRequirementList);
        args.setJobResourceRequirementList(jobResourceRequirementList);
        args.setParameterList(parameterList);
        args.setImpatienceTime(impatienceTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws com.binto.YYSchedule.common.rpc.exception.InvalidRequestException, com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitJobForMission();
      }
    }

    public void terminateJobs(java.util.List<java.lang.Long> jobIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      terminateJobs_call method_call = new terminateJobs_call(jobIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class terminateJobs_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.util.List<java.lang.Long> jobIdList;
      public terminateJobs_call(java.util.List<java.lang.Long> jobIdList, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobIdList = jobIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("terminateJobs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        terminateJobs_args args = new terminateJobs_args();
        args.setJobIdList(jobIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws com.binto.YYSchedule.common.rpc.exception.InvalidRequestException, com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.NotFoundException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_terminateJobs();
      }
    }

    public void obtainQueueInfo(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainQueueInfo_call method_call = new obtainQueueInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainQueueInfo_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public obtainQueueInfo_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainQueueInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainQueueInfo_args args = new obtainQueueInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainQueueInfo();
      }
    }

    public void obtainClusterStat(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainClusterStat_call method_call = new obtainClusterStat_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainClusterStat_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public obtainClusterStat_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainClusterStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainClusterStat_args args = new obtainClusterStat_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws com.binto.YYSchedule.common.rpc.exception.UnavailableException, com.binto.YYSchedule.common.rpc.exception.TimeoutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainClusterStat();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("submitJob", new submitJob());
      processMap.put("submitJobForMission", new submitJobForMission());
      processMap.put("terminateJobs", new terminateJobs());
      processMap.put("obtainQueueInfo", new obtainQueueInfo());
      processMap.put("obtainClusterStat", new obtainClusterStat());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        try {
          result.success = iface.ping();
        } catch (com.binto.YYSchedule.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.binto.YYSchedule.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class submitJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitJob_args> {
      public submitJob() {
        super("submitJob");
      }

      public submitJob_args getEmptyArgsInstance() {
        return new submitJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitJob_result getResult(I iface, submitJob_args args) throws org.apache.thrift.TException {
        submitJob_result result = new submitJob_result();
        try {
          result.success = iface.submitJob(args.userId, args.taskPhaseList, args.jobDistributionMode, args.jobPriority, args.jobOperationRequirementList, args.jobResourceRequirementList, args.parameterList, args.impatienceTime);
          result.setSuccessIsSet(true);
        } catch (com.binto.YYSchedule.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.binto.YYSchedule.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.binto.YYSchedule.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class submitJobForMission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitJobForMission_args> {
      public submitJobForMission() {
        super("submitJobForMission");
      }

      public submitJobForMission_args getEmptyArgsInstance() {
        return new submitJobForMission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitJobForMission_result getResult(I iface, submitJobForMission_args args) throws org.apache.thrift.TException {
        submitJobForMission_result result = new submitJobForMission_result();
        try {
          result.success = iface.submitJobForMission(args.userId, args.taskPhaseList, args.jobDistributionMode, args.jobPriority, args.jobOperationRequirementList, args.jobResourceRequirementList, args.parameterList, args.impatienceTime);
          result.setSuccessIsSet(true);
        } catch (com.binto.YYSchedule.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.binto.YYSchedule.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.binto.YYSchedule.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class terminateJobs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, terminateJobs_args> {
      public terminateJobs() {
        super("terminateJobs");
      }

      public terminateJobs_args getEmptyArgsInstance() {
        return new terminateJobs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public terminateJobs_result getResult(I iface, terminateJobs_args args) throws org.apache.thrift.TException {
        terminateJobs_result result = new terminateJobs_result();
        try {
          result.success = iface.terminateJobs(args.jobIdList);
          result.setSuccessIsSet(true);
        } catch (com.binto.YYSchedule.common.rpc.exception.InvalidRequestException ire) {
          result.ire = ire;
        } catch (com.binto.YYSchedule.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.binto.YYSchedule.common.rpc.exception.NotFoundException nfe) {
          result.nfe = nfe;
        } catch (com.binto.YYSchedule.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class obtainQueueInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainQueueInfo_args> {
      public obtainQueueInfo() {
        super("obtainQueueInfo");
      }

      public obtainQueueInfo_args getEmptyArgsInstance() {
        return new obtainQueueInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainQueueInfo_result getResult(I iface, obtainQueueInfo_args args) throws org.apache.thrift.TException {
        obtainQueueInfo_result result = new obtainQueueInfo_result();
        try {
          result.success = iface.obtainQueueInfo();
        } catch (com.binto.YYSchedule.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.binto.YYSchedule.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

    public static class obtainClusterStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainClusterStat_args> {
      public obtainClusterStat() {
        super("obtainClusterStat");
      }

      public obtainClusterStat_args getEmptyArgsInstance() {
        return new obtainClusterStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainClusterStat_result getResult(I iface, obtainClusterStat_args args) throws org.apache.thrift.TException {
        obtainClusterStat_result result = new obtainClusterStat_result();
        try {
          result.success = iface.obtainClusterStat();
        } catch (com.binto.YYSchedule.common.rpc.exception.UnavailableException ue) {
          result.ue = ue;
        } catch (com.binto.YYSchedule.common.rpc.exception.TimeoutException te) {
          result.te = te;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("submitJob", new submitJob());
      processMap.put("submitJobForMission", new submitJobForMission());
      processMap.put("terminateJobs", new terminateJobs());
      processMap.put("obtainQueueInfo", new obtainQueueInfo());
      processMap.put("obtainClusterStat", new obtainClusterStat());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, java.lang.String> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            ping_result result = new ping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof com.binto.YYSchedule.common.rpc.exception.UnavailableException) {
              result.ue = (com.binto.YYSchedule.common.rpc.exception.UnavailableException) e;
              result.setUeIsSet(true);
              msg = result;
            } else if (e instanceof com.binto.YYSchedule.common.rpc.exception.TimeoutException) {
              result.te = (com.binto.YYSchedule.common.rpc.exception.TimeoutException) e;
              result.setTeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class submitJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitJob_args, java.lang.Long> {
      public submitJob() {
        super("submitJob");
      }

      public submitJob_args getEmptyArgsInstance() {
        return new submitJob_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            submitJob_result result = new submitJob_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            submitJob_result result = new submitJob_result();
            if (e instanceof com.binto.YYSchedule.common.rpc.exception.InvalidRequestException) {
              result.ire = (com.binto.YYSchedule.common.rpc.exception.InvalidRequestException) e;
              result.setIreIsSet(true);
              msg = result;
            } else if (e instanceof com.binto.YYSchedule.common.rpc.exception.UnavailableException) {
              result.ue = (com.binto.YYSchedule.common.rpc.exception.UnavailableException) e;
              result.setUeIsSet(true);
              msg = result;
            } else if (e instanceof com.binto.YYSchedule.common.rpc.exception.TimeoutException) {
              result.te = (com.binto.YYSchedule.common.rpc.exception.TimeoutException) e;
              result.setTeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitJob_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.submitJob(args.userId, args.taskPhaseList, args.jobDistributionMode, args.jobPriority, args.jobOperationRequirementList, args.jobResourceRequirementList, args.parameterList, args.impatienceTime,resultHandler);
      }
    }

    public static class submitJobForMission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitJobForMission_args, java.lang.Long> {
      public submitJobForMission() {
        super("submitJobForMission");
      }

      public submitJobForMission_args getEmptyArgsInstance() {
        return new submitJobForMission_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            submitJobForMission_result result = new submitJobForMission_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            submitJobForMission_result result = new submitJobForMission_result();
            if (e instanceof com.binto.YYSchedule.common.rpc.exception.InvalidRequestException) {
              result.ire = (com.binto.YYSchedule.common.rpc.exception.InvalidRequestException) e;
              result.setIreIsSet(true);
              msg = result;
            } else if (e instanceof com.binto.YYSchedule.common.rpc.exception.UnavailableException) {
              result.ue = (com.binto.YYSchedule.common.rpc.exception.UnavailableException) e;
              result.setUeIsSet(true);
              msg = result;
            } else if (e instanceof com.binto.YYSchedule.common.rpc.exception.TimeoutException) {
              result.te = (com.binto.YYSchedule.common.rpc.exception.TimeoutException) e;
              result.setTeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitJobForMission_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.submitJobForMission(args.userId, args.taskPhaseList, args.jobDistributionMode, args.jobPriority, args.jobOperationRequirementList, args.jobResourceRequirementList, args.parameterList, args.impatienceTime,resultHandler);
      }
    }

    public static class terminateJobs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, terminateJobs_args, java.lang.Integer> {
      public terminateJobs() {
        super("terminateJobs");
      }

      public terminateJobs_args getEmptyArgsInstance() {
        return new terminateJobs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            terminateJobs_result result = new terminateJobs_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            terminateJobs_result result = new terminateJobs_result();
            if (e instanceof com.binto.YYSchedule.common.rpc.exception.InvalidRequestException) {
              result.ire = (com.binto.YYSchedule.common.rpc.exception.InvalidRequestException) e;
              result.setIreIsSet(true);
              msg = result;
            } else if (e instanceof com.binto.YYSchedule.common.rpc.exception.UnavailableException) {
              result.ue = (com.binto.YYSchedule.common.rpc.exception.UnavailableException) e;
              result.setUeIsSet(true);
              msg = result;
            } else if (e instanceof com.binto.YYSchedule.common.rpc.exception.NotFoundException) {
              result.nfe = (com.binto.YYSchedule.common.rpc.exception.NotFoundException) e;
              result.setNfeIsSet(true);
              msg = result;
            } else if (e instanceof com.binto.YYSchedule.common.rpc.exception.TimeoutException) {
              result.te = (com.binto.YYSchedule.common.rpc.exception.TimeoutException) e;
              result.setTeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, terminateJobs_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.terminateJobs(args.jobIdList,resultHandler);
      }
    }

    public static class obtainQueueInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainQueueInfo_args, java.lang.String> {
      public obtainQueueInfo() {
        super("obtainQueueInfo");
      }

      public obtainQueueInfo_args getEmptyArgsInstance() {
        return new obtainQueueInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            obtainQueueInfo_result result = new obtainQueueInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            obtainQueueInfo_result result = new obtainQueueInfo_result();
            if (e instanceof com.binto.YYSchedule.common.rpc.exception.UnavailableException) {
              result.ue = (com.binto.YYSchedule.common.rpc.exception.UnavailableException) e;
              result.setUeIsSet(true);
              msg = result;
            } else if (e instanceof com.binto.YYSchedule.common.rpc.exception.TimeoutException) {
              result.te = (com.binto.YYSchedule.common.rpc.exception.TimeoutException) e;
              result.setTeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainQueueInfo_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.obtainQueueInfo(resultHandler);
      }
    }

    public static class obtainClusterStat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainClusterStat_args, java.lang.String> {
      public obtainClusterStat() {
        super("obtainClusterStat");
      }

      public obtainClusterStat_args getEmptyArgsInstance() {
        return new obtainClusterStat_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            obtainClusterStat_result result = new obtainClusterStat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            obtainClusterStat_result result = new obtainClusterStat_result();
            if (e instanceof com.binto.YYSchedule.common.rpc.exception.UnavailableException) {
              result.ue = (com.binto.YYSchedule.common.rpc.exception.UnavailableException) e;
              result.setUeIsSet(true);
              msg = result;
            } else if (e instanceof com.binto.YYSchedule.common.rpc.exception.TimeoutException) {
              result.te = (com.binto.YYSchedule.common.rpc.exception.TimeoutException) e;
              result.setTeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainClusterStat_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.obtainClusterStat(resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public com.binto.YYSchedule.common.rpc.exception.UnavailableException ue; // required
    public com.binto.YYSchedule.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue"),
      TE((short)2, "te");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          case 2: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.UnavailableException.class)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.TimeoutException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      java.lang.String success,
      com.binto.YYSchedule.common.rpc.exception.UnavailableException ue,
      com.binto.YYSchedule.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUe()) {
        this.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ue = null;
      this.te = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.binto.YYSchedule.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public ping_result setUe(com.binto.YYSchedule.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.binto.YYSchedule.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public ping_result setTe(com.binto.YYSchedule.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.binto.YYSchedule.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.binto.YYSchedule.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetUe()) ? 131071 : 524287);
      if (isSetUe())
        hashCode = hashCode * 8191 + ue.hashCode();

      hashCode = hashCode * 8191 + ((isSetTe()) ? 131071 : 524287);
      if (isSetTe())
        hashCode = hashCode * 8191 + te.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        if (struct.isSetTe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class submitJob_args implements org.apache.thrift.TBase<submitJob_args, submitJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitJob_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_PHASE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("taskPhaseList", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField JOB_DISTRIBUTION_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobDistributionMode", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField JOB_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("jobPriority", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField JOB_OPERATION_REQUIREMENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("jobOperationRequirementList", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField JOB_RESOURCE_REQUIREMENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("jobResourceRequirementList", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField PARAMETER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterList", org.apache.thrift.protocol.TType.LIST, (short)7);
    private static final org.apache.thrift.protocol.TField IMPATIENCE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("impatienceTime", org.apache.thrift.protocol.TType.I64, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new submitJob_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new submitJob_argsTupleSchemeFactory();

    public int userId; // required
    public java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList; // required
    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode
     */
    public com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode; // required
    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.job.JobPriority
     */
    public com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority; // required
    public java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList; // required
    public java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList; // required
    public java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList; // required
    public long impatienceTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      TASK_PHASE_LIST((short)2, "taskPhaseList"),
      /**
       * 
       * @see com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode
       */
      JOB_DISTRIBUTION_MODE((short)3, "jobDistributionMode"),
      /**
       * 
       * @see com.binto.YYSchedule.common.rpc.domain.job.JobPriority
       */
      JOB_PRIORITY((short)4, "jobPriority"),
      JOB_OPERATION_REQUIREMENT_LIST((short)5, "jobOperationRequirementList"),
      JOB_RESOURCE_REQUIREMENT_LIST((short)6, "jobResourceRequirementList"),
      PARAMETER_LIST((short)7, "parameterList"),
      IMPATIENCE_TIME((short)8, "impatienceTime");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // TASK_PHASE_LIST
            return TASK_PHASE_LIST;
          case 3: // JOB_DISTRIBUTION_MODE
            return JOB_DISTRIBUTION_MODE;
          case 4: // JOB_PRIORITY
            return JOB_PRIORITY;
          case 5: // JOB_OPERATION_REQUIREMENT_LIST
            return JOB_OPERATION_REQUIREMENT_LIST;
          case 6: // JOB_RESOURCE_REQUIREMENT_LIST
            return JOB_RESOURCE_REQUIREMENT_LIST;
          case 7: // PARAMETER_LIST
            return PARAMETER_LIST;
          case 8: // IMPATIENCE_TIME
            return IMPATIENCE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __IMPATIENCETIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TASK_PHASE_LIST, new org.apache.thrift.meta_data.FieldMetaData("taskPhaseList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.binto.YYSchedule.common.rpc.domain.task.TaskPhase.class))));
      tmpMap.put(_Fields.JOB_DISTRIBUTION_MODE, new org.apache.thrift.meta_data.FieldMetaData("jobDistributionMode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode.class)));
      tmpMap.put(_Fields.JOB_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("jobPriority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.binto.YYSchedule.common.rpc.domain.job.JobPriority.class)));
      tmpMap.put(_Fields.JOB_OPERATION_REQUIREMENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("jobOperationRequirementList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement.class))));
      tmpMap.put(_Fields.JOB_RESOURCE_REQUIREMENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("jobResourceRequirementList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement.class))));
      tmpMap.put(_Fields.PARAMETER_LIST, new org.apache.thrift.meta_data.FieldMetaData("parameterList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter.class))));
      tmpMap.put(_Fields.IMPATIENCE_TIME, new org.apache.thrift.meta_data.FieldMetaData("impatienceTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitJob_args.class, metaDataMap);
    }

    public submitJob_args() {
    }

    public submitJob_args(
      int userId,
      java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList,
      com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode,
      com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority,
      java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList,
      java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList,
      java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList,
      long impatienceTime)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.taskPhaseList = taskPhaseList;
      this.jobDistributionMode = jobDistributionMode;
      this.jobPriority = jobPriority;
      this.jobOperationRequirementList = jobOperationRequirementList;
      this.jobResourceRequirementList = jobResourceRequirementList;
      this.parameterList = parameterList;
      this.impatienceTime = impatienceTime;
      setImpatienceTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitJob_args(submitJob_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.isSetTaskPhaseList()) {
        java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> __this__taskPhaseList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase>(other.taskPhaseList.size());
        for (com.binto.YYSchedule.common.rpc.domain.task.TaskPhase other_element : other.taskPhaseList) {
          __this__taskPhaseList.add(other_element);
        }
        this.taskPhaseList = __this__taskPhaseList;
      }
      if (other.isSetJobDistributionMode()) {
        this.jobDistributionMode = other.jobDistributionMode;
      }
      if (other.isSetJobPriority()) {
        this.jobPriority = other.jobPriority;
      }
      if (other.isSetJobOperationRequirementList()) {
        java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> __this__jobOperationRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement>(other.jobOperationRequirementList.size());
        for (com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement other_element : other.jobOperationRequirementList) {
          __this__jobOperationRequirementList.add(new com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement(other_element));
        }
        this.jobOperationRequirementList = __this__jobOperationRequirementList;
      }
      if (other.isSetJobResourceRequirementList()) {
        java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> __this__jobResourceRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement>(other.jobResourceRequirementList.size());
        for (com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement other_element : other.jobResourceRequirementList) {
          __this__jobResourceRequirementList.add(new com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement(other_element));
        }
        this.jobResourceRequirementList = __this__jobResourceRequirementList;
      }
      if (other.isSetParameterList()) {
        java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> __this__parameterList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter>(other.parameterList.size());
        for (com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter other_element : other.parameterList) {
          __this__parameterList.add(new com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter(other_element));
        }
        this.parameterList = __this__parameterList;
      }
      this.impatienceTime = other.impatienceTime;
    }

    public submitJob_args deepCopy() {
      return new submitJob_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.taskPhaseList = null;
      this.jobDistributionMode = null;
      this.jobPriority = null;
      this.jobOperationRequirementList = null;
      this.jobResourceRequirementList = null;
      this.parameterList = null;
      setImpatienceTimeIsSet(false);
      this.impatienceTime = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public submitJob_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getTaskPhaseListSize() {
      return (this.taskPhaseList == null) ? 0 : this.taskPhaseList.size();
    }

    public java.util.Iterator<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> getTaskPhaseListIterator() {
      return (this.taskPhaseList == null) ? null : this.taskPhaseList.iterator();
    }

    public void addToTaskPhaseList(com.binto.YYSchedule.common.rpc.domain.task.TaskPhase elem) {
      if (this.taskPhaseList == null) {
        this.taskPhaseList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase>();
      }
      this.taskPhaseList.add(elem);
    }

    public java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> getTaskPhaseList() {
      return this.taskPhaseList;
    }

    public submitJob_args setTaskPhaseList(java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList) {
      this.taskPhaseList = taskPhaseList;
      return this;
    }

    public void unsetTaskPhaseList() {
      this.taskPhaseList = null;
    }

    /** Returns true if field taskPhaseList is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskPhaseList() {
      return this.taskPhaseList != null;
    }

    public void setTaskPhaseListIsSet(boolean value) {
      if (!value) {
        this.taskPhaseList = null;
      }
    }

    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode
     */
    public com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode getJobDistributionMode() {
      return this.jobDistributionMode;
    }

    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode
     */
    public submitJob_args setJobDistributionMode(com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode) {
      this.jobDistributionMode = jobDistributionMode;
      return this;
    }

    public void unsetJobDistributionMode() {
      this.jobDistributionMode = null;
    }

    /** Returns true if field jobDistributionMode is set (has been assigned a value) and false otherwise */
    public boolean isSetJobDistributionMode() {
      return this.jobDistributionMode != null;
    }

    public void setJobDistributionModeIsSet(boolean value) {
      if (!value) {
        this.jobDistributionMode = null;
      }
    }

    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.job.JobPriority
     */
    public com.binto.YYSchedule.common.rpc.domain.job.JobPriority getJobPriority() {
      return this.jobPriority;
    }

    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.job.JobPriority
     */
    public submitJob_args setJobPriority(com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority) {
      this.jobPriority = jobPriority;
      return this;
    }

    public void unsetJobPriority() {
      this.jobPriority = null;
    }

    /** Returns true if field jobPriority is set (has been assigned a value) and false otherwise */
    public boolean isSetJobPriority() {
      return this.jobPriority != null;
    }

    public void setJobPriorityIsSet(boolean value) {
      if (!value) {
        this.jobPriority = null;
      }
    }

    public int getJobOperationRequirementListSize() {
      return (this.jobOperationRequirementList == null) ? 0 : this.jobOperationRequirementList.size();
    }

    public java.util.Iterator<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> getJobOperationRequirementListIterator() {
      return (this.jobOperationRequirementList == null) ? null : this.jobOperationRequirementList.iterator();
    }

    public void addToJobOperationRequirementList(com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement elem) {
      if (this.jobOperationRequirementList == null) {
        this.jobOperationRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement>();
      }
      this.jobOperationRequirementList.add(elem);
    }

    public java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> getJobOperationRequirementList() {
      return this.jobOperationRequirementList;
    }

    public submitJob_args setJobOperationRequirementList(java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList) {
      this.jobOperationRequirementList = jobOperationRequirementList;
      return this;
    }

    public void unsetJobOperationRequirementList() {
      this.jobOperationRequirementList = null;
    }

    /** Returns true if field jobOperationRequirementList is set (has been assigned a value) and false otherwise */
    public boolean isSetJobOperationRequirementList() {
      return this.jobOperationRequirementList != null;
    }

    public void setJobOperationRequirementListIsSet(boolean value) {
      if (!value) {
        this.jobOperationRequirementList = null;
      }
    }

    public int getJobResourceRequirementListSize() {
      return (this.jobResourceRequirementList == null) ? 0 : this.jobResourceRequirementList.size();
    }

    public java.util.Iterator<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> getJobResourceRequirementListIterator() {
      return (this.jobResourceRequirementList == null) ? null : this.jobResourceRequirementList.iterator();
    }

    public void addToJobResourceRequirementList(com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement elem) {
      if (this.jobResourceRequirementList == null) {
        this.jobResourceRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement>();
      }
      this.jobResourceRequirementList.add(elem);
    }

    public java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> getJobResourceRequirementList() {
      return this.jobResourceRequirementList;
    }

    public submitJob_args setJobResourceRequirementList(java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList) {
      this.jobResourceRequirementList = jobResourceRequirementList;
      return this;
    }

    public void unsetJobResourceRequirementList() {
      this.jobResourceRequirementList = null;
    }

    /** Returns true if field jobResourceRequirementList is set (has been assigned a value) and false otherwise */
    public boolean isSetJobResourceRequirementList() {
      return this.jobResourceRequirementList != null;
    }

    public void setJobResourceRequirementListIsSet(boolean value) {
      if (!value) {
        this.jobResourceRequirementList = null;
      }
    }

    public int getParameterListSize() {
      return (this.parameterList == null) ? 0 : this.parameterList.size();
    }

    public java.util.Iterator<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> getParameterListIterator() {
      return (this.parameterList == null) ? null : this.parameterList.iterator();
    }

    public void addToParameterList(com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter elem) {
      if (this.parameterList == null) {
        this.parameterList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter>();
      }
      this.parameterList.add(elem);
    }

    public java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> getParameterList() {
      return this.parameterList;
    }

    public submitJob_args setParameterList(java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList) {
      this.parameterList = parameterList;
      return this;
    }

    public void unsetParameterList() {
      this.parameterList = null;
    }

    /** Returns true if field parameterList is set (has been assigned a value) and false otherwise */
    public boolean isSetParameterList() {
      return this.parameterList != null;
    }

    public void setParameterListIsSet(boolean value) {
      if (!value) {
        this.parameterList = null;
      }
    }

    public long getImpatienceTime() {
      return this.impatienceTime;
    }

    public submitJob_args setImpatienceTime(long impatienceTime) {
      this.impatienceTime = impatienceTime;
      setImpatienceTimeIsSet(true);
      return this;
    }

    public void unsetImpatienceTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IMPATIENCETIME_ISSET_ID);
    }

    /** Returns true if field impatienceTime is set (has been assigned a value) and false otherwise */
    public boolean isSetImpatienceTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IMPATIENCETIME_ISSET_ID);
    }

    public void setImpatienceTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IMPATIENCETIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case TASK_PHASE_LIST:
        if (value == null) {
          unsetTaskPhaseList();
        } else {
          setTaskPhaseList((java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase>)value);
        }
        break;

      case JOB_DISTRIBUTION_MODE:
        if (value == null) {
          unsetJobDistributionMode();
        } else {
          setJobDistributionMode((com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode)value);
        }
        break;

      case JOB_PRIORITY:
        if (value == null) {
          unsetJobPriority();
        } else {
          setJobPriority((com.binto.YYSchedule.common.rpc.domain.job.JobPriority)value);
        }
        break;

      case JOB_OPERATION_REQUIREMENT_LIST:
        if (value == null) {
          unsetJobOperationRequirementList();
        } else {
          setJobOperationRequirementList((java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement>)value);
        }
        break;

      case JOB_RESOURCE_REQUIREMENT_LIST:
        if (value == null) {
          unsetJobResourceRequirementList();
        } else {
          setJobResourceRequirementList((java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement>)value);
        }
        break;

      case PARAMETER_LIST:
        if (value == null) {
          unsetParameterList();
        } else {
          setParameterList((java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter>)value);
        }
        break;

      case IMPATIENCE_TIME:
        if (value == null) {
          unsetImpatienceTime();
        } else {
          setImpatienceTime((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case TASK_PHASE_LIST:
        return getTaskPhaseList();

      case JOB_DISTRIBUTION_MODE:
        return getJobDistributionMode();

      case JOB_PRIORITY:
        return getJobPriority();

      case JOB_OPERATION_REQUIREMENT_LIST:
        return getJobOperationRequirementList();

      case JOB_RESOURCE_REQUIREMENT_LIST:
        return getJobResourceRequirementList();

      case PARAMETER_LIST:
        return getParameterList();

      case IMPATIENCE_TIME:
        return getImpatienceTime();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case TASK_PHASE_LIST:
        return isSetTaskPhaseList();
      case JOB_DISTRIBUTION_MODE:
        return isSetJobDistributionMode();
      case JOB_PRIORITY:
        return isSetJobPriority();
      case JOB_OPERATION_REQUIREMENT_LIST:
        return isSetJobOperationRequirementList();
      case JOB_RESOURCE_REQUIREMENT_LIST:
        return isSetJobResourceRequirementList();
      case PARAMETER_LIST:
        return isSetParameterList();
      case IMPATIENCE_TIME:
        return isSetImpatienceTime();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof submitJob_args)
        return this.equals((submitJob_args)that);
      return false;
    }

    public boolean equals(submitJob_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_taskPhaseList = true && this.isSetTaskPhaseList();
      boolean that_present_taskPhaseList = true && that.isSetTaskPhaseList();
      if (this_present_taskPhaseList || that_present_taskPhaseList) {
        if (!(this_present_taskPhaseList && that_present_taskPhaseList))
          return false;
        if (!this.taskPhaseList.equals(that.taskPhaseList))
          return false;
      }

      boolean this_present_jobDistributionMode = true && this.isSetJobDistributionMode();
      boolean that_present_jobDistributionMode = true && that.isSetJobDistributionMode();
      if (this_present_jobDistributionMode || that_present_jobDistributionMode) {
        if (!(this_present_jobDistributionMode && that_present_jobDistributionMode))
          return false;
        if (!this.jobDistributionMode.equals(that.jobDistributionMode))
          return false;
      }

      boolean this_present_jobPriority = true && this.isSetJobPriority();
      boolean that_present_jobPriority = true && that.isSetJobPriority();
      if (this_present_jobPriority || that_present_jobPriority) {
        if (!(this_present_jobPriority && that_present_jobPriority))
          return false;
        if (!this.jobPriority.equals(that.jobPriority))
          return false;
      }

      boolean this_present_jobOperationRequirementList = true && this.isSetJobOperationRequirementList();
      boolean that_present_jobOperationRequirementList = true && that.isSetJobOperationRequirementList();
      if (this_present_jobOperationRequirementList || that_present_jobOperationRequirementList) {
        if (!(this_present_jobOperationRequirementList && that_present_jobOperationRequirementList))
          return false;
        if (!this.jobOperationRequirementList.equals(that.jobOperationRequirementList))
          return false;
      }

      boolean this_present_jobResourceRequirementList = true && this.isSetJobResourceRequirementList();
      boolean that_present_jobResourceRequirementList = true && that.isSetJobResourceRequirementList();
      if (this_present_jobResourceRequirementList || that_present_jobResourceRequirementList) {
        if (!(this_present_jobResourceRequirementList && that_present_jobResourceRequirementList))
          return false;
        if (!this.jobResourceRequirementList.equals(that.jobResourceRequirementList))
          return false;
      }

      boolean this_present_parameterList = true && this.isSetParameterList();
      boolean that_present_parameterList = true && that.isSetParameterList();
      if (this_present_parameterList || that_present_parameterList) {
        if (!(this_present_parameterList && that_present_parameterList))
          return false;
        if (!this.parameterList.equals(that.parameterList))
          return false;
      }

      boolean this_present_impatienceTime = true;
      boolean that_present_impatienceTime = true;
      if (this_present_impatienceTime || that_present_impatienceTime) {
        if (!(this_present_impatienceTime && that_present_impatienceTime))
          return false;
        if (this.impatienceTime != that.impatienceTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + ((isSetTaskPhaseList()) ? 131071 : 524287);
      if (isSetTaskPhaseList())
        hashCode = hashCode * 8191 + taskPhaseList.hashCode();

      hashCode = hashCode * 8191 + ((isSetJobDistributionMode()) ? 131071 : 524287);
      if (isSetJobDistributionMode())
        hashCode = hashCode * 8191 + jobDistributionMode.getValue();

      hashCode = hashCode * 8191 + ((isSetJobPriority()) ? 131071 : 524287);
      if (isSetJobPriority())
        hashCode = hashCode * 8191 + jobPriority.getValue();

      hashCode = hashCode * 8191 + ((isSetJobOperationRequirementList()) ? 131071 : 524287);
      if (isSetJobOperationRequirementList())
        hashCode = hashCode * 8191 + jobOperationRequirementList.hashCode();

      hashCode = hashCode * 8191 + ((isSetJobResourceRequirementList()) ? 131071 : 524287);
      if (isSetJobResourceRequirementList())
        hashCode = hashCode * 8191 + jobResourceRequirementList.hashCode();

      hashCode = hashCode * 8191 + ((isSetParameterList()) ? 131071 : 524287);
      if (isSetParameterList())
        hashCode = hashCode * 8191 + parameterList.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(impatienceTime);

      return hashCode;
    }

    @Override
    public int compareTo(submitJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTaskPhaseList()).compareTo(other.isSetTaskPhaseList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskPhaseList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskPhaseList, other.taskPhaseList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJobDistributionMode()).compareTo(other.isSetJobDistributionMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobDistributionMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobDistributionMode, other.jobDistributionMode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJobPriority()).compareTo(other.isSetJobPriority());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobPriority()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobPriority, other.jobPriority);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJobOperationRequirementList()).compareTo(other.isSetJobOperationRequirementList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobOperationRequirementList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobOperationRequirementList, other.jobOperationRequirementList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJobResourceRequirementList()).compareTo(other.isSetJobResourceRequirementList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobResourceRequirementList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobResourceRequirementList, other.jobResourceRequirementList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParameterList()).compareTo(other.isSetParameterList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameterList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterList, other.parameterList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetImpatienceTime()).compareTo(other.isSetImpatienceTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImpatienceTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impatienceTime, other.impatienceTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("submitJob_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskPhaseList:");
      if (this.taskPhaseList == null) {
        sb.append("null");
      } else {
        sb.append(this.taskPhaseList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobDistributionMode:");
      if (this.jobDistributionMode == null) {
        sb.append("null");
      } else {
        sb.append(this.jobDistributionMode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobPriority:");
      if (this.jobPriority == null) {
        sb.append("null");
      } else {
        sb.append(this.jobPriority);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobOperationRequirementList:");
      if (this.jobOperationRequirementList == null) {
        sb.append("null");
      } else {
        sb.append(this.jobOperationRequirementList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobResourceRequirementList:");
      if (this.jobResourceRequirementList == null) {
        sb.append("null");
      } else {
        sb.append(this.jobResourceRequirementList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameterList:");
      if (this.parameterList == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("impatienceTime:");
      sb.append(this.impatienceTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
      if (taskPhaseList == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskPhaseList' was not present! Struct: " + toString());
      }
      if (jobDistributionMode == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobDistributionMode' was not present! Struct: " + toString());
      }
      if (jobPriority == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobPriority' was not present! Struct: " + toString());
      }
      if (jobOperationRequirementList == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobOperationRequirementList' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitJob_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public submitJob_argsStandardScheme getScheme() {
        return new submitJob_argsStandardScheme();
      }
    }

    private static class submitJob_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<submitJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_PHASE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.taskPhaseList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase>(_list0.size);
                  com.binto.YYSchedule.common.rpc.domain.task.TaskPhase _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = com.binto.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
                    struct.taskPhaseList.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setTaskPhaseListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JOB_DISTRIBUTION_MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.jobDistributionMode = com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode.findByValue(iprot.readI32());
                struct.setJobDistributionModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // JOB_PRIORITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.jobPriority = com.binto.YYSchedule.common.rpc.domain.job.JobPriority.findByValue(iprot.readI32());
                struct.setJobPriorityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // JOB_OPERATION_REQUIREMENT_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                  struct.jobOperationRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement>(_list3.size);
                  com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement _elem4;
                  for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                  {
                    _elem4 = new com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement();
                    _elem4.read(iprot);
                    struct.jobOperationRequirementList.add(_elem4);
                  }
                  iprot.readListEnd();
                }
                struct.setJobOperationRequirementListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // JOB_RESOURCE_REQUIREMENT_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                  struct.jobResourceRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement>(_list6.size);
                  com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement _elem7;
                  for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                  {
                    _elem7 = new com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement();
                    _elem7.read(iprot);
                    struct.jobResourceRequirementList.add(_elem7);
                  }
                  iprot.readListEnd();
                }
                struct.setJobResourceRequirementListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // PARAMETER_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                  struct.parameterList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter>(_list9.size);
                  com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter _elem10;
                  for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                  {
                    _elem10 = new com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter();
                    _elem10.read(iprot);
                    struct.parameterList.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setParameterListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // IMPATIENCE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.impatienceTime = iprot.readI64();
                struct.setImpatienceTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetUserId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.taskPhaseList != null) {
          oprot.writeFieldBegin(TASK_PHASE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.taskPhaseList.size()));
            for (com.binto.YYSchedule.common.rpc.domain.task.TaskPhase _iter12 : struct.taskPhaseList)
            {
              oprot.writeI32(_iter12.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.jobDistributionMode != null) {
          oprot.writeFieldBegin(JOB_DISTRIBUTION_MODE_FIELD_DESC);
          oprot.writeI32(struct.jobDistributionMode.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.jobPriority != null) {
          oprot.writeFieldBegin(JOB_PRIORITY_FIELD_DESC);
          oprot.writeI32(struct.jobPriority.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.jobOperationRequirementList != null) {
          oprot.writeFieldBegin(JOB_OPERATION_REQUIREMENT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobOperationRequirementList.size()));
            for (com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement _iter13 : struct.jobOperationRequirementList)
            {
              _iter13.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.jobResourceRequirementList != null) {
          oprot.writeFieldBegin(JOB_RESOURCE_REQUIREMENT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobResourceRequirementList.size()));
            for (com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement _iter14 : struct.jobResourceRequirementList)
            {
              _iter14.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.parameterList != null) {
          oprot.writeFieldBegin(PARAMETER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.parameterList.size()));
            for (com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter _iter15 : struct.parameterList)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IMPATIENCE_TIME_FIELD_DESC);
        oprot.writeI64(struct.impatienceTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitJob_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public submitJob_argsTupleScheme getScheme() {
        return new submitJob_argsTupleScheme();
      }
    }

    private static class submitJob_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<submitJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeI32(struct.userId);
        {
          oprot.writeI32(struct.taskPhaseList.size());
          for (com.binto.YYSchedule.common.rpc.domain.task.TaskPhase _iter16 : struct.taskPhaseList)
          {
            oprot.writeI32(_iter16.getValue());
          }
        }
        oprot.writeI32(struct.jobDistributionMode.getValue());
        oprot.writeI32(struct.jobPriority.getValue());
        {
          oprot.writeI32(struct.jobOperationRequirementList.size());
          for (com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement _iter17 : struct.jobOperationRequirementList)
          {
            _iter17.write(oprot);
          }
        }
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetJobResourceRequirementList()) {
          optionals.set(0);
        }
        if (struct.isSetParameterList()) {
          optionals.set(1);
        }
        if (struct.isSetImpatienceTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetJobResourceRequirementList()) {
          {
            oprot.writeI32(struct.jobResourceRequirementList.size());
            for (com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement _iter18 : struct.jobResourceRequirementList)
            {
              _iter18.write(oprot);
            }
          }
        }
        if (struct.isSetParameterList()) {
          {
            oprot.writeI32(struct.parameterList.size());
            for (com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter _iter19 : struct.parameterList)
            {
              _iter19.write(oprot);
            }
          }
        }
        if (struct.isSetImpatienceTime()) {
          oprot.writeI64(struct.impatienceTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.taskPhaseList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase>(_list20.size);
          com.binto.YYSchedule.common.rpc.domain.task.TaskPhase _elem21;
          for (int _i22 = 0; _i22 < _list20.size; ++_i22)
          {
            _elem21 = com.binto.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
            struct.taskPhaseList.add(_elem21);
          }
        }
        struct.setTaskPhaseListIsSet(true);
        struct.jobDistributionMode = com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode.findByValue(iprot.readI32());
        struct.setJobDistributionModeIsSet(true);
        struct.jobPriority = com.binto.YYSchedule.common.rpc.domain.job.JobPriority.findByValue(iprot.readI32());
        struct.setJobPriorityIsSet(true);
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.jobOperationRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement>(_list23.size);
          com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = new com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement();
            _elem24.read(iprot);
            struct.jobOperationRequirementList.add(_elem24);
          }
        }
        struct.setJobOperationRequirementListIsSet(true);
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.jobResourceRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement>(_list26.size);
            com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement _elem27;
            for (int _i28 = 0; _i28 < _list26.size; ++_i28)
            {
              _elem27 = new com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement();
              _elem27.read(iprot);
              struct.jobResourceRequirementList.add(_elem27);
            }
          }
          struct.setJobResourceRequirementListIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.parameterList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter>(_list29.size);
            com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter();
              _elem30.read(iprot);
              struct.parameterList.add(_elem30);
            }
          }
          struct.setParameterListIsSet(true);
        }
        if (incoming.get(2)) {
          struct.impatienceTime = iprot.readI64();
          struct.setImpatienceTimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class submitJob_result implements org.apache.thrift.TBase<submitJob_result, submitJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new submitJob_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new submitJob_resultTupleSchemeFactory();

    public long success; // required
    public com.binto.YYSchedule.common.rpc.exception.InvalidRequestException ire; // required
    public com.binto.YYSchedule.common.rpc.exception.UnavailableException ue; // required
    public com.binto.YYSchedule.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      TE((short)3, "te");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.InvalidRequestException.class)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.UnavailableException.class)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.TimeoutException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitJob_result.class, metaDataMap);
    }

    public submitJob_result() {
    }

    public submitJob_result(
      long success,
      com.binto.YYSchedule.common.rpc.exception.InvalidRequestException ire,
      com.binto.YYSchedule.common.rpc.exception.UnavailableException ue,
      com.binto.YYSchedule.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitJob_result(submitJob_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new com.binto.YYSchedule.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public submitJob_result deepCopy() {
      return new submitJob_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ire = null;
      this.ue = null;
      this.te = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public submitJob_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.binto.YYSchedule.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public submitJob_result setIre(com.binto.YYSchedule.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.binto.YYSchedule.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public submitJob_result setUe(com.binto.YYSchedule.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.binto.YYSchedule.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public submitJob_result setTe(com.binto.YYSchedule.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.binto.YYSchedule.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.binto.YYSchedule.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.binto.YYSchedule.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof submitJob_result)
        return this.equals((submitJob_result)that);
      return false;
    }

    public boolean equals(submitJob_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetIre()) ? 131071 : 524287);
      if (isSetIre())
        hashCode = hashCode * 8191 + ire.hashCode();

      hashCode = hashCode * 8191 + ((isSetUe()) ? 131071 : 524287);
      if (isSetUe())
        hashCode = hashCode * 8191 + ue.hashCode();

      hashCode = hashCode * 8191 + ((isSetTe()) ? 131071 : 524287);
      if (isSetTe())
        hashCode = hashCode * 8191 + te.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(submitJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("submitJob_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitJob_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public submitJob_resultStandardScheme getScheme() {
        return new submitJob_resultStandardScheme();
      }
    }

    private static class submitJob_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<submitJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.binto.YYSchedule.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitJob_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public submitJob_resultTupleScheme getScheme() {
        return new submitJob_resultTupleScheme();
      }
    }

    private static class submitJob_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<submitJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.binto.YYSchedule.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class submitJobForMission_args implements org.apache.thrift.TBase<submitJobForMission_args, submitJobForMission_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitJobForMission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitJobForMission_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_PHASE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("taskPhaseList", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField JOB_DISTRIBUTION_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobDistributionMode", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField JOB_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("jobPriority", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField JOB_OPERATION_REQUIREMENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("jobOperationRequirementList", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField JOB_RESOURCE_REQUIREMENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("jobResourceRequirementList", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField PARAMETER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterList", org.apache.thrift.protocol.TType.LIST, (short)7);
    private static final org.apache.thrift.protocol.TField IMPATIENCE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("impatienceTime", org.apache.thrift.protocol.TType.I64, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new submitJobForMission_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new submitJobForMission_argsTupleSchemeFactory();

    public int userId; // required
    public java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList; // required
    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode
     */
    public com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode; // required
    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.job.JobPriority
     */
    public com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority; // required
    public java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList; // required
    public java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList; // required
    public java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList; // required
    public long impatienceTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      TASK_PHASE_LIST((short)2, "taskPhaseList"),
      /**
       * 
       * @see com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode
       */
      JOB_DISTRIBUTION_MODE((short)3, "jobDistributionMode"),
      /**
       * 
       * @see com.binto.YYSchedule.common.rpc.domain.job.JobPriority
       */
      JOB_PRIORITY((short)4, "jobPriority"),
      JOB_OPERATION_REQUIREMENT_LIST((short)5, "jobOperationRequirementList"),
      JOB_RESOURCE_REQUIREMENT_LIST((short)6, "jobResourceRequirementList"),
      PARAMETER_LIST((short)7, "parameterList"),
      IMPATIENCE_TIME((short)8, "impatienceTime");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // TASK_PHASE_LIST
            return TASK_PHASE_LIST;
          case 3: // JOB_DISTRIBUTION_MODE
            return JOB_DISTRIBUTION_MODE;
          case 4: // JOB_PRIORITY
            return JOB_PRIORITY;
          case 5: // JOB_OPERATION_REQUIREMENT_LIST
            return JOB_OPERATION_REQUIREMENT_LIST;
          case 6: // JOB_RESOURCE_REQUIREMENT_LIST
            return JOB_RESOURCE_REQUIREMENT_LIST;
          case 7: // PARAMETER_LIST
            return PARAMETER_LIST;
          case 8: // IMPATIENCE_TIME
            return IMPATIENCE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __IMPATIENCETIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TASK_PHASE_LIST, new org.apache.thrift.meta_data.FieldMetaData("taskPhaseList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.binto.YYSchedule.common.rpc.domain.task.TaskPhase.class))));
      tmpMap.put(_Fields.JOB_DISTRIBUTION_MODE, new org.apache.thrift.meta_data.FieldMetaData("jobDistributionMode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode.class)));
      tmpMap.put(_Fields.JOB_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("jobPriority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.binto.YYSchedule.common.rpc.domain.job.JobPriority.class)));
      tmpMap.put(_Fields.JOB_OPERATION_REQUIREMENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("jobOperationRequirementList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement.class))));
      tmpMap.put(_Fields.JOB_RESOURCE_REQUIREMENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("jobResourceRequirementList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement.class))));
      tmpMap.put(_Fields.PARAMETER_LIST, new org.apache.thrift.meta_data.FieldMetaData("parameterList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter.class))));
      tmpMap.put(_Fields.IMPATIENCE_TIME, new org.apache.thrift.meta_data.FieldMetaData("impatienceTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitJobForMission_args.class, metaDataMap);
    }

    public submitJobForMission_args() {
    }

    public submitJobForMission_args(
      int userId,
      java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList,
      com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode,
      com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority,
      java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList,
      java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList,
      java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList,
      long impatienceTime)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.taskPhaseList = taskPhaseList;
      this.jobDistributionMode = jobDistributionMode;
      this.jobPriority = jobPriority;
      this.jobOperationRequirementList = jobOperationRequirementList;
      this.jobResourceRequirementList = jobResourceRequirementList;
      this.parameterList = parameterList;
      this.impatienceTime = impatienceTime;
      setImpatienceTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitJobForMission_args(submitJobForMission_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      if (other.isSetTaskPhaseList()) {
        java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> __this__taskPhaseList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase>(other.taskPhaseList.size());
        for (com.binto.YYSchedule.common.rpc.domain.task.TaskPhase other_element : other.taskPhaseList) {
          __this__taskPhaseList.add(other_element);
        }
        this.taskPhaseList = __this__taskPhaseList;
      }
      if (other.isSetJobDistributionMode()) {
        this.jobDistributionMode = other.jobDistributionMode;
      }
      if (other.isSetJobPriority()) {
        this.jobPriority = other.jobPriority;
      }
      if (other.isSetJobOperationRequirementList()) {
        java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> __this__jobOperationRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement>(other.jobOperationRequirementList.size());
        for (com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement other_element : other.jobOperationRequirementList) {
          __this__jobOperationRequirementList.add(new com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement(other_element));
        }
        this.jobOperationRequirementList = __this__jobOperationRequirementList;
      }
      if (other.isSetJobResourceRequirementList()) {
        java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> __this__jobResourceRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement>(other.jobResourceRequirementList.size());
        for (com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement other_element : other.jobResourceRequirementList) {
          __this__jobResourceRequirementList.add(new com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement(other_element));
        }
        this.jobResourceRequirementList = __this__jobResourceRequirementList;
      }
      if (other.isSetParameterList()) {
        java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> __this__parameterList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter>(other.parameterList.size());
        for (com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter other_element : other.parameterList) {
          __this__parameterList.add(new com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter(other_element));
        }
        this.parameterList = __this__parameterList;
      }
      this.impatienceTime = other.impatienceTime;
    }

    public submitJobForMission_args deepCopy() {
      return new submitJobForMission_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.taskPhaseList = null;
      this.jobDistributionMode = null;
      this.jobPriority = null;
      this.jobOperationRequirementList = null;
      this.jobResourceRequirementList = null;
      this.parameterList = null;
      setImpatienceTimeIsSet(false);
      this.impatienceTime = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public submitJobForMission_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getTaskPhaseListSize() {
      return (this.taskPhaseList == null) ? 0 : this.taskPhaseList.size();
    }

    public java.util.Iterator<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> getTaskPhaseListIterator() {
      return (this.taskPhaseList == null) ? null : this.taskPhaseList.iterator();
    }

    public void addToTaskPhaseList(com.binto.YYSchedule.common.rpc.domain.task.TaskPhase elem) {
      if (this.taskPhaseList == null) {
        this.taskPhaseList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase>();
      }
      this.taskPhaseList.add(elem);
    }

    public java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> getTaskPhaseList() {
      return this.taskPhaseList;
    }

    public submitJobForMission_args setTaskPhaseList(java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase> taskPhaseList) {
      this.taskPhaseList = taskPhaseList;
      return this;
    }

    public void unsetTaskPhaseList() {
      this.taskPhaseList = null;
    }

    /** Returns true if field taskPhaseList is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskPhaseList() {
      return this.taskPhaseList != null;
    }

    public void setTaskPhaseListIsSet(boolean value) {
      if (!value) {
        this.taskPhaseList = null;
      }
    }

    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode
     */
    public com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode getJobDistributionMode() {
      return this.jobDistributionMode;
    }

    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode
     */
    public submitJobForMission_args setJobDistributionMode(com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode jobDistributionMode) {
      this.jobDistributionMode = jobDistributionMode;
      return this;
    }

    public void unsetJobDistributionMode() {
      this.jobDistributionMode = null;
    }

    /** Returns true if field jobDistributionMode is set (has been assigned a value) and false otherwise */
    public boolean isSetJobDistributionMode() {
      return this.jobDistributionMode != null;
    }

    public void setJobDistributionModeIsSet(boolean value) {
      if (!value) {
        this.jobDistributionMode = null;
      }
    }

    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.job.JobPriority
     */
    public com.binto.YYSchedule.common.rpc.domain.job.JobPriority getJobPriority() {
      return this.jobPriority;
    }

    /**
     * 
     * @see com.binto.YYSchedule.common.rpc.domain.job.JobPriority
     */
    public submitJobForMission_args setJobPriority(com.binto.YYSchedule.common.rpc.domain.job.JobPriority jobPriority) {
      this.jobPriority = jobPriority;
      return this;
    }

    public void unsetJobPriority() {
      this.jobPriority = null;
    }

    /** Returns true if field jobPriority is set (has been assigned a value) and false otherwise */
    public boolean isSetJobPriority() {
      return this.jobPriority != null;
    }

    public void setJobPriorityIsSet(boolean value) {
      if (!value) {
        this.jobPriority = null;
      }
    }

    public int getJobOperationRequirementListSize() {
      return (this.jobOperationRequirementList == null) ? 0 : this.jobOperationRequirementList.size();
    }

    public java.util.Iterator<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> getJobOperationRequirementListIterator() {
      return (this.jobOperationRequirementList == null) ? null : this.jobOperationRequirementList.iterator();
    }

    public void addToJobOperationRequirementList(com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement elem) {
      if (this.jobOperationRequirementList == null) {
        this.jobOperationRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement>();
      }
      this.jobOperationRequirementList.add(elem);
    }

    public java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> getJobOperationRequirementList() {
      return this.jobOperationRequirementList;
    }

    public submitJobForMission_args setJobOperationRequirementList(java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement> jobOperationRequirementList) {
      this.jobOperationRequirementList = jobOperationRequirementList;
      return this;
    }

    public void unsetJobOperationRequirementList() {
      this.jobOperationRequirementList = null;
    }

    /** Returns true if field jobOperationRequirementList is set (has been assigned a value) and false otherwise */
    public boolean isSetJobOperationRequirementList() {
      return this.jobOperationRequirementList != null;
    }

    public void setJobOperationRequirementListIsSet(boolean value) {
      if (!value) {
        this.jobOperationRequirementList = null;
      }
    }

    public int getJobResourceRequirementListSize() {
      return (this.jobResourceRequirementList == null) ? 0 : this.jobResourceRequirementList.size();
    }

    public java.util.Iterator<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> getJobResourceRequirementListIterator() {
      return (this.jobResourceRequirementList == null) ? null : this.jobResourceRequirementList.iterator();
    }

    public void addToJobResourceRequirementList(com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement elem) {
      if (this.jobResourceRequirementList == null) {
        this.jobResourceRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement>();
      }
      this.jobResourceRequirementList.add(elem);
    }

    public java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> getJobResourceRequirementList() {
      return this.jobResourceRequirementList;
    }

    public submitJobForMission_args setJobResourceRequirementList(java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement> jobResourceRequirementList) {
      this.jobResourceRequirementList = jobResourceRequirementList;
      return this;
    }

    public void unsetJobResourceRequirementList() {
      this.jobResourceRequirementList = null;
    }

    /** Returns true if field jobResourceRequirementList is set (has been assigned a value) and false otherwise */
    public boolean isSetJobResourceRequirementList() {
      return this.jobResourceRequirementList != null;
    }

    public void setJobResourceRequirementListIsSet(boolean value) {
      if (!value) {
        this.jobResourceRequirementList = null;
      }
    }

    public int getParameterListSize() {
      return (this.parameterList == null) ? 0 : this.parameterList.size();
    }

    public java.util.Iterator<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> getParameterListIterator() {
      return (this.parameterList == null) ? null : this.parameterList.iterator();
    }

    public void addToParameterList(com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter elem) {
      if (this.parameterList == null) {
        this.parameterList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter>();
      }
      this.parameterList.add(elem);
    }

    public java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> getParameterList() {
      return this.parameterList;
    }

    public submitJobForMission_args setParameterList(java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter> parameterList) {
      this.parameterList = parameterList;
      return this;
    }

    public void unsetParameterList() {
      this.parameterList = null;
    }

    /** Returns true if field parameterList is set (has been assigned a value) and false otherwise */
    public boolean isSetParameterList() {
      return this.parameterList != null;
    }

    public void setParameterListIsSet(boolean value) {
      if (!value) {
        this.parameterList = null;
      }
    }

    public long getImpatienceTime() {
      return this.impatienceTime;
    }

    public submitJobForMission_args setImpatienceTime(long impatienceTime) {
      this.impatienceTime = impatienceTime;
      setImpatienceTimeIsSet(true);
      return this;
    }

    public void unsetImpatienceTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IMPATIENCETIME_ISSET_ID);
    }

    /** Returns true if field impatienceTime is set (has been assigned a value) and false otherwise */
    public boolean isSetImpatienceTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IMPATIENCETIME_ISSET_ID);
    }

    public void setImpatienceTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IMPATIENCETIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.Integer)value);
        }
        break;

      case TASK_PHASE_LIST:
        if (value == null) {
          unsetTaskPhaseList();
        } else {
          setTaskPhaseList((java.util.List<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase>)value);
        }
        break;

      case JOB_DISTRIBUTION_MODE:
        if (value == null) {
          unsetJobDistributionMode();
        } else {
          setJobDistributionMode((com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode)value);
        }
        break;

      case JOB_PRIORITY:
        if (value == null) {
          unsetJobPriority();
        } else {
          setJobPriority((com.binto.YYSchedule.common.rpc.domain.job.JobPriority)value);
        }
        break;

      case JOB_OPERATION_REQUIREMENT_LIST:
        if (value == null) {
          unsetJobOperationRequirementList();
        } else {
          setJobOperationRequirementList((java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement>)value);
        }
        break;

      case JOB_RESOURCE_REQUIREMENT_LIST:
        if (value == null) {
          unsetJobResourceRequirementList();
        } else {
          setJobResourceRequirementList((java.util.List<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement>)value);
        }
        break;

      case PARAMETER_LIST:
        if (value == null) {
          unsetParameterList();
        } else {
          setParameterList((java.util.List<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter>)value);
        }
        break;

      case IMPATIENCE_TIME:
        if (value == null) {
          unsetImpatienceTime();
        } else {
          setImpatienceTime((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case TASK_PHASE_LIST:
        return getTaskPhaseList();

      case JOB_DISTRIBUTION_MODE:
        return getJobDistributionMode();

      case JOB_PRIORITY:
        return getJobPriority();

      case JOB_OPERATION_REQUIREMENT_LIST:
        return getJobOperationRequirementList();

      case JOB_RESOURCE_REQUIREMENT_LIST:
        return getJobResourceRequirementList();

      case PARAMETER_LIST:
        return getParameterList();

      case IMPATIENCE_TIME:
        return getImpatienceTime();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case TASK_PHASE_LIST:
        return isSetTaskPhaseList();
      case JOB_DISTRIBUTION_MODE:
        return isSetJobDistributionMode();
      case JOB_PRIORITY:
        return isSetJobPriority();
      case JOB_OPERATION_REQUIREMENT_LIST:
        return isSetJobOperationRequirementList();
      case JOB_RESOURCE_REQUIREMENT_LIST:
        return isSetJobResourceRequirementList();
      case PARAMETER_LIST:
        return isSetParameterList();
      case IMPATIENCE_TIME:
        return isSetImpatienceTime();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof submitJobForMission_args)
        return this.equals((submitJobForMission_args)that);
      return false;
    }

    public boolean equals(submitJobForMission_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_taskPhaseList = true && this.isSetTaskPhaseList();
      boolean that_present_taskPhaseList = true && that.isSetTaskPhaseList();
      if (this_present_taskPhaseList || that_present_taskPhaseList) {
        if (!(this_present_taskPhaseList && that_present_taskPhaseList))
          return false;
        if (!this.taskPhaseList.equals(that.taskPhaseList))
          return false;
      }

      boolean this_present_jobDistributionMode = true && this.isSetJobDistributionMode();
      boolean that_present_jobDistributionMode = true && that.isSetJobDistributionMode();
      if (this_present_jobDistributionMode || that_present_jobDistributionMode) {
        if (!(this_present_jobDistributionMode && that_present_jobDistributionMode))
          return false;
        if (!this.jobDistributionMode.equals(that.jobDistributionMode))
          return false;
      }

      boolean this_present_jobPriority = true && this.isSetJobPriority();
      boolean that_present_jobPriority = true && that.isSetJobPriority();
      if (this_present_jobPriority || that_present_jobPriority) {
        if (!(this_present_jobPriority && that_present_jobPriority))
          return false;
        if (!this.jobPriority.equals(that.jobPriority))
          return false;
      }

      boolean this_present_jobOperationRequirementList = true && this.isSetJobOperationRequirementList();
      boolean that_present_jobOperationRequirementList = true && that.isSetJobOperationRequirementList();
      if (this_present_jobOperationRequirementList || that_present_jobOperationRequirementList) {
        if (!(this_present_jobOperationRequirementList && that_present_jobOperationRequirementList))
          return false;
        if (!this.jobOperationRequirementList.equals(that.jobOperationRequirementList))
          return false;
      }

      boolean this_present_jobResourceRequirementList = true && this.isSetJobResourceRequirementList();
      boolean that_present_jobResourceRequirementList = true && that.isSetJobResourceRequirementList();
      if (this_present_jobResourceRequirementList || that_present_jobResourceRequirementList) {
        if (!(this_present_jobResourceRequirementList && that_present_jobResourceRequirementList))
          return false;
        if (!this.jobResourceRequirementList.equals(that.jobResourceRequirementList))
          return false;
      }

      boolean this_present_parameterList = true && this.isSetParameterList();
      boolean that_present_parameterList = true && that.isSetParameterList();
      if (this_present_parameterList || that_present_parameterList) {
        if (!(this_present_parameterList && that_present_parameterList))
          return false;
        if (!this.parameterList.equals(that.parameterList))
          return false;
      }

      boolean this_present_impatienceTime = true;
      boolean that_present_impatienceTime = true;
      if (this_present_impatienceTime || that_present_impatienceTime) {
        if (!(this_present_impatienceTime && that_present_impatienceTime))
          return false;
        if (this.impatienceTime != that.impatienceTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + userId;

      hashCode = hashCode * 8191 + ((isSetTaskPhaseList()) ? 131071 : 524287);
      if (isSetTaskPhaseList())
        hashCode = hashCode * 8191 + taskPhaseList.hashCode();

      hashCode = hashCode * 8191 + ((isSetJobDistributionMode()) ? 131071 : 524287);
      if (isSetJobDistributionMode())
        hashCode = hashCode * 8191 + jobDistributionMode.getValue();

      hashCode = hashCode * 8191 + ((isSetJobPriority()) ? 131071 : 524287);
      if (isSetJobPriority())
        hashCode = hashCode * 8191 + jobPriority.getValue();

      hashCode = hashCode * 8191 + ((isSetJobOperationRequirementList()) ? 131071 : 524287);
      if (isSetJobOperationRequirementList())
        hashCode = hashCode * 8191 + jobOperationRequirementList.hashCode();

      hashCode = hashCode * 8191 + ((isSetJobResourceRequirementList()) ? 131071 : 524287);
      if (isSetJobResourceRequirementList())
        hashCode = hashCode * 8191 + jobResourceRequirementList.hashCode();

      hashCode = hashCode * 8191 + ((isSetParameterList()) ? 131071 : 524287);
      if (isSetParameterList())
        hashCode = hashCode * 8191 + parameterList.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(impatienceTime);

      return hashCode;
    }

    @Override
    public int compareTo(submitJobForMission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTaskPhaseList()).compareTo(other.isSetTaskPhaseList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskPhaseList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskPhaseList, other.taskPhaseList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJobDistributionMode()).compareTo(other.isSetJobDistributionMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobDistributionMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobDistributionMode, other.jobDistributionMode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJobPriority()).compareTo(other.isSetJobPriority());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobPriority()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobPriority, other.jobPriority);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJobOperationRequirementList()).compareTo(other.isSetJobOperationRequirementList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobOperationRequirementList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobOperationRequirementList, other.jobOperationRequirementList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJobResourceRequirementList()).compareTo(other.isSetJobResourceRequirementList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobResourceRequirementList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobResourceRequirementList, other.jobResourceRequirementList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParameterList()).compareTo(other.isSetParameterList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameterList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterList, other.parameterList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetImpatienceTime()).compareTo(other.isSetImpatienceTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImpatienceTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impatienceTime, other.impatienceTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("submitJobForMission_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskPhaseList:");
      if (this.taskPhaseList == null) {
        sb.append("null");
      } else {
        sb.append(this.taskPhaseList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobDistributionMode:");
      if (this.jobDistributionMode == null) {
        sb.append("null");
      } else {
        sb.append(this.jobDistributionMode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobPriority:");
      if (this.jobPriority == null) {
        sb.append("null");
      } else {
        sb.append(this.jobPriority);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobOperationRequirementList:");
      if (this.jobOperationRequirementList == null) {
        sb.append("null");
      } else {
        sb.append(this.jobOperationRequirementList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobResourceRequirementList:");
      if (this.jobResourceRequirementList == null) {
        sb.append("null");
      } else {
        sb.append(this.jobResourceRequirementList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameterList:");
      if (this.parameterList == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("impatienceTime:");
      sb.append(this.impatienceTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
      if (taskPhaseList == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskPhaseList' was not present! Struct: " + toString());
      }
      if (jobDistributionMode == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobDistributionMode' was not present! Struct: " + toString());
      }
      if (jobPriority == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobPriority' was not present! Struct: " + toString());
      }
      if (jobOperationRequirementList == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobOperationRequirementList' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitJobForMission_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public submitJobForMission_argsStandardScheme getScheme() {
        return new submitJobForMission_argsStandardScheme();
      }
    }

    private static class submitJobForMission_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<submitJobForMission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitJobForMission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_PHASE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.taskPhaseList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase>(_list32.size);
                  com.binto.YYSchedule.common.rpc.domain.task.TaskPhase _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = com.binto.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
                    struct.taskPhaseList.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setTaskPhaseListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JOB_DISTRIBUTION_MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.jobDistributionMode = com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode.findByValue(iprot.readI32());
                struct.setJobDistributionModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // JOB_PRIORITY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.jobPriority = com.binto.YYSchedule.common.rpc.domain.job.JobPriority.findByValue(iprot.readI32());
                struct.setJobPriorityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // JOB_OPERATION_REQUIREMENT_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                  struct.jobOperationRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement>(_list35.size);
                  com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement _elem36;
                  for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                  {
                    _elem36 = new com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement();
                    _elem36.read(iprot);
                    struct.jobOperationRequirementList.add(_elem36);
                  }
                  iprot.readListEnd();
                }
                struct.setJobOperationRequirementListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // JOB_RESOURCE_REQUIREMENT_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                  struct.jobResourceRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement>(_list38.size);
                  com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement _elem39;
                  for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                  {
                    _elem39 = new com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement();
                    _elem39.read(iprot);
                    struct.jobResourceRequirementList.add(_elem39);
                  }
                  iprot.readListEnd();
                }
                struct.setJobResourceRequirementListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // PARAMETER_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                  struct.parameterList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter>(_list41.size);
                  com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter _elem42;
                  for (int _i43 = 0; _i43 < _list41.size; ++_i43)
                  {
                    _elem42 = new com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter();
                    _elem42.read(iprot);
                    struct.parameterList.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setParameterListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // IMPATIENCE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.impatienceTime = iprot.readI64();
                struct.setImpatienceTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetUserId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitJobForMission_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        if (struct.taskPhaseList != null) {
          oprot.writeFieldBegin(TASK_PHASE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.taskPhaseList.size()));
            for (com.binto.YYSchedule.common.rpc.domain.task.TaskPhase _iter44 : struct.taskPhaseList)
            {
              oprot.writeI32(_iter44.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.jobDistributionMode != null) {
          oprot.writeFieldBegin(JOB_DISTRIBUTION_MODE_FIELD_DESC);
          oprot.writeI32(struct.jobDistributionMode.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.jobPriority != null) {
          oprot.writeFieldBegin(JOB_PRIORITY_FIELD_DESC);
          oprot.writeI32(struct.jobPriority.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.jobOperationRequirementList != null) {
          oprot.writeFieldBegin(JOB_OPERATION_REQUIREMENT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobOperationRequirementList.size()));
            for (com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement _iter45 : struct.jobOperationRequirementList)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.jobResourceRequirementList != null) {
          oprot.writeFieldBegin(JOB_RESOURCE_REQUIREMENT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.jobResourceRequirementList.size()));
            for (com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement _iter46 : struct.jobResourceRequirementList)
            {
              _iter46.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.parameterList != null) {
          oprot.writeFieldBegin(PARAMETER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.parameterList.size()));
            for (com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter _iter47 : struct.parameterList)
            {
              _iter47.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IMPATIENCE_TIME_FIELD_DESC);
        oprot.writeI64(struct.impatienceTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitJobForMission_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public submitJobForMission_argsTupleScheme getScheme() {
        return new submitJobForMission_argsTupleScheme();
      }
    }

    private static class submitJobForMission_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<submitJobForMission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitJobForMission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeI32(struct.userId);
        {
          oprot.writeI32(struct.taskPhaseList.size());
          for (com.binto.YYSchedule.common.rpc.domain.task.TaskPhase _iter48 : struct.taskPhaseList)
          {
            oprot.writeI32(_iter48.getValue());
          }
        }
        oprot.writeI32(struct.jobDistributionMode.getValue());
        oprot.writeI32(struct.jobPriority.getValue());
        {
          oprot.writeI32(struct.jobOperationRequirementList.size());
          for (com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement _iter49 : struct.jobOperationRequirementList)
          {
            _iter49.write(oprot);
          }
        }
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetJobResourceRequirementList()) {
          optionals.set(0);
        }
        if (struct.isSetParameterList()) {
          optionals.set(1);
        }
        if (struct.isSetImpatienceTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetJobResourceRequirementList()) {
          {
            oprot.writeI32(struct.jobResourceRequirementList.size());
            for (com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement _iter50 : struct.jobResourceRequirementList)
            {
              _iter50.write(oprot);
            }
          }
        }
        if (struct.isSetParameterList()) {
          {
            oprot.writeI32(struct.parameterList.size());
            for (com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter _iter51 : struct.parameterList)
            {
              _iter51.write(oprot);
            }
          }
        }
        if (struct.isSetImpatienceTime()) {
          oprot.writeI64(struct.impatienceTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitJobForMission_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.taskPhaseList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.task.TaskPhase>(_list52.size);
          com.binto.YYSchedule.common.rpc.domain.task.TaskPhase _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = com.binto.YYSchedule.common.rpc.domain.task.TaskPhase.findByValue(iprot.readI32());
            struct.taskPhaseList.add(_elem53);
          }
        }
        struct.setTaskPhaseListIsSet(true);
        struct.jobDistributionMode = com.binto.YYSchedule.common.rpc.domain.job.JobDistributionMode.findByValue(iprot.readI32());
        struct.setJobDistributionModeIsSet(true);
        struct.jobPriority = com.binto.YYSchedule.common.rpc.domain.job.JobPriority.findByValue(iprot.readI32());
        struct.setJobPriorityIsSet(true);
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.jobOperationRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement>(_list55.size);
          com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = new com.binto.YYSchedule.common.rpc.domain.job.JobOperationRequirement();
            _elem56.read(iprot);
            struct.jobOperationRequirementList.add(_elem56);
          }
        }
        struct.setJobOperationRequirementListIsSet(true);
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.jobResourceRequirementList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement>(_list58.size);
            com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement _elem59;
            for (int _i60 = 0; _i60 < _list58.size; ++_i60)
            {
              _elem59 = new com.binto.YYSchedule.common.rpc.domain.job.JobResourceRequirement();
              _elem59.read(iprot);
              struct.jobResourceRequirementList.add(_elem59);
            }
          }
          struct.setJobResourceRequirementListIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.parameterList = new java.util.ArrayList<com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter>(_list61.size);
            com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new com.binto.YYSchedule.common.rpc.domain.parameter.JobParameter();
              _elem62.read(iprot);
              struct.parameterList.add(_elem62);
            }
          }
          struct.setParameterListIsSet(true);
        }
        if (incoming.get(2)) {
          struct.impatienceTime = iprot.readI64();
          struct.setImpatienceTimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class submitJobForMission_result implements org.apache.thrift.TBase<submitJobForMission_result, submitJobForMission_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitJobForMission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitJobForMission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new submitJobForMission_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new submitJobForMission_resultTupleSchemeFactory();

    public long success; // required
    public com.binto.YYSchedule.common.rpc.exception.InvalidRequestException ire; // required
    public com.binto.YYSchedule.common.rpc.exception.UnavailableException ue; // required
    public com.binto.YYSchedule.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      TE((short)3, "te");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.InvalidRequestException.class)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.UnavailableException.class)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.TimeoutException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitJobForMission_result.class, metaDataMap);
    }

    public submitJobForMission_result() {
    }

    public submitJobForMission_result(
      long success,
      com.binto.YYSchedule.common.rpc.exception.InvalidRequestException ire,
      com.binto.YYSchedule.common.rpc.exception.UnavailableException ue,
      com.binto.YYSchedule.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitJobForMission_result(submitJobForMission_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new com.binto.YYSchedule.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public submitJobForMission_result deepCopy() {
      return new submitJobForMission_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ire = null;
      this.ue = null;
      this.te = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public submitJobForMission_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.binto.YYSchedule.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public submitJobForMission_result setIre(com.binto.YYSchedule.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.binto.YYSchedule.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public submitJobForMission_result setUe(com.binto.YYSchedule.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.binto.YYSchedule.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public submitJobForMission_result setTe(com.binto.YYSchedule.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.binto.YYSchedule.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.binto.YYSchedule.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.binto.YYSchedule.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof submitJobForMission_result)
        return this.equals((submitJobForMission_result)that);
      return false;
    }

    public boolean equals(submitJobForMission_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetIre()) ? 131071 : 524287);
      if (isSetIre())
        hashCode = hashCode * 8191 + ire.hashCode();

      hashCode = hashCode * 8191 + ((isSetUe()) ? 131071 : 524287);
      if (isSetUe())
        hashCode = hashCode * 8191 + ue.hashCode();

      hashCode = hashCode * 8191 + ((isSetTe()) ? 131071 : 524287);
      if (isSetTe())
        hashCode = hashCode * 8191 + te.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(submitJobForMission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("submitJobForMission_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitJobForMission_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public submitJobForMission_resultStandardScheme getScheme() {
        return new submitJobForMission_resultStandardScheme();
      }
    }

    private static class submitJobForMission_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<submitJobForMission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitJobForMission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.binto.YYSchedule.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitJobForMission_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitJobForMission_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public submitJobForMission_resultTupleScheme getScheme() {
        return new submitJobForMission_resultTupleScheme();
      }
    }

    private static class submitJobForMission_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<submitJobForMission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitJobForMission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetTe()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitJobForMission_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.binto.YYSchedule.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminateJobs_args implements org.apache.thrift.TBase<terminateJobs_args, terminateJobs_args._Fields>, java.io.Serializable, Cloneable, Comparable<terminateJobs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateJobs_args");

    private static final org.apache.thrift.protocol.TField JOB_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("jobIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminateJobs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminateJobs_argsTupleSchemeFactory();

    public java.util.List<java.lang.Long> jobIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_ID_LIST((short)1, "jobIdList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_ID_LIST
            return JOB_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("jobIdList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateJobs_args.class, metaDataMap);
    }

    public terminateJobs_args() {
    }

    public terminateJobs_args(
      java.util.List<java.lang.Long> jobIdList)
    {
      this();
      this.jobIdList = jobIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateJobs_args(terminateJobs_args other) {
      if (other.isSetJobIdList()) {
        java.util.List<java.lang.Long> __this__jobIdList = new java.util.ArrayList<java.lang.Long>(other.jobIdList);
        this.jobIdList = __this__jobIdList;
      }
    }

    public terminateJobs_args deepCopy() {
      return new terminateJobs_args(this);
    }

    @Override
    public void clear() {
      this.jobIdList = null;
    }

    public int getJobIdListSize() {
      return (this.jobIdList == null) ? 0 : this.jobIdList.size();
    }

    public java.util.Iterator<java.lang.Long> getJobIdListIterator() {
      return (this.jobIdList == null) ? null : this.jobIdList.iterator();
    }

    public void addToJobIdList(long elem) {
      if (this.jobIdList == null) {
        this.jobIdList = new java.util.ArrayList<java.lang.Long>();
      }
      this.jobIdList.add(elem);
    }

    public java.util.List<java.lang.Long> getJobIdList() {
      return this.jobIdList;
    }

    public terminateJobs_args setJobIdList(java.util.List<java.lang.Long> jobIdList) {
      this.jobIdList = jobIdList;
      return this;
    }

    public void unsetJobIdList() {
      this.jobIdList = null;
    }

    /** Returns true if field jobIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetJobIdList() {
      return this.jobIdList != null;
    }

    public void setJobIdListIsSet(boolean value) {
      if (!value) {
        this.jobIdList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case JOB_ID_LIST:
        if (value == null) {
          unsetJobIdList();
        } else {
          setJobIdList((java.util.List<java.lang.Long>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_ID_LIST:
        return getJobIdList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case JOB_ID_LIST:
        return isSetJobIdList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateJobs_args)
        return this.equals((terminateJobs_args)that);
      return false;
    }

    public boolean equals(terminateJobs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_jobIdList = true && this.isSetJobIdList();
      boolean that_present_jobIdList = true && that.isSetJobIdList();
      if (this_present_jobIdList || that_present_jobIdList) {
        if (!(this_present_jobIdList && that_present_jobIdList))
          return false;
        if (!this.jobIdList.equals(that.jobIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetJobIdList()) ? 131071 : 524287);
      if (isSetJobIdList())
        hashCode = hashCode * 8191 + jobIdList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(terminateJobs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetJobIdList()).compareTo(other.isSetJobIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobIdList, other.jobIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminateJobs_args(");
      boolean first = true;

      sb.append("jobIdList:");
      if (this.jobIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.jobIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (jobIdList == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'jobIdList' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateJobs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateJobs_argsStandardScheme getScheme() {
        return new terminateJobs_argsStandardScheme();
      }
    }

    private static class terminateJobs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminateJobs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateJobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.jobIdList = new java.util.ArrayList<java.lang.Long>(_list64.size);
                  long _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = iprot.readI64();
                    struct.jobIdList.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setJobIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateJobs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobIdList != null) {
          oprot.writeFieldBegin(JOB_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.jobIdList.size()));
            for (long _iter67 : struct.jobIdList)
            {
              oprot.writeI64(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateJobs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateJobs_argsTupleScheme getScheme() {
        return new terminateJobs_argsTupleScheme();
      }
    }

    private static class terminateJobs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminateJobs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateJobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        {
          oprot.writeI32(struct.jobIdList.size());
          for (long _iter68 : struct.jobIdList)
          {
            oprot.writeI64(_iter68);
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateJobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.jobIdList = new java.util.ArrayList<java.lang.Long>(_list69.size);
          long _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = iprot.readI64();
            struct.jobIdList.add(_elem70);
          }
        }
        struct.setJobIdListIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminateJobs_result implements org.apache.thrift.TBase<terminateJobs_result, terminateJobs_result._Fields>, java.io.Serializable, Cloneable, Comparable<terminateJobs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateJobs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NFE_FIELD_DESC = new org.apache.thrift.protocol.TField("nfe", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminateJobs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminateJobs_resultTupleSchemeFactory();

    public int success; // required
    public com.binto.YYSchedule.common.rpc.exception.InvalidRequestException ire; // required
    public com.binto.YYSchedule.common.rpc.exception.UnavailableException ue; // required
    public com.binto.YYSchedule.common.rpc.exception.NotFoundException nfe; // required
    public com.binto.YYSchedule.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      UE((short)2, "ue"),
      NFE((short)3, "nfe"),
      TE((short)4, "te");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // NFE
            return NFE;
          case 4: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.InvalidRequestException.class)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.UnavailableException.class)));
      tmpMap.put(_Fields.NFE, new org.apache.thrift.meta_data.FieldMetaData("nfe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.NotFoundException.class)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.TimeoutException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateJobs_result.class, metaDataMap);
    }

    public terminateJobs_result() {
    }

    public terminateJobs_result(
      int success,
      com.binto.YYSchedule.common.rpc.exception.InvalidRequestException ire,
      com.binto.YYSchedule.common.rpc.exception.UnavailableException ue,
      com.binto.YYSchedule.common.rpc.exception.NotFoundException nfe,
      com.binto.YYSchedule.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.ue = ue;
      this.nfe = nfe;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateJobs_result(terminateJobs_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new com.binto.YYSchedule.common.rpc.exception.InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetNfe()) {
        this.nfe = new com.binto.YYSchedule.common.rpc.exception.NotFoundException(other.nfe);
      }
      if (other.isSetTe()) {
        this.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public terminateJobs_result deepCopy() {
      return new terminateJobs_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ire = null;
      this.ue = null;
      this.nfe = null;
      this.te = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public terminateJobs_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.binto.YYSchedule.common.rpc.exception.InvalidRequestException getIre() {
      return this.ire;
    }

    public terminateJobs_result setIre(com.binto.YYSchedule.common.rpc.exception.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public com.binto.YYSchedule.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public terminateJobs_result setUe(com.binto.YYSchedule.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.binto.YYSchedule.common.rpc.exception.NotFoundException getNfe() {
      return this.nfe;
    }

    public terminateJobs_result setNfe(com.binto.YYSchedule.common.rpc.exception.NotFoundException nfe) {
      this.nfe = nfe;
      return this;
    }

    public void unsetNfe() {
      this.nfe = null;
    }

    /** Returns true if field nfe is set (has been assigned a value) and false otherwise */
    public boolean isSetNfe() {
      return this.nfe != null;
    }

    public void setNfeIsSet(boolean value) {
      if (!value) {
        this.nfe = null;
      }
    }

    public com.binto.YYSchedule.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public terminateJobs_result setTe(com.binto.YYSchedule.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((com.binto.YYSchedule.common.rpc.exception.InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.binto.YYSchedule.common.rpc.exception.UnavailableException)value);
        }
        break;

      case NFE:
        if (value == null) {
          unsetNfe();
        } else {
          setNfe((com.binto.YYSchedule.common.rpc.exception.NotFoundException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.binto.YYSchedule.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case NFE:
        return getNfe();

      case TE:
        return getTe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case NFE:
        return isSetNfe();
      case TE:
        return isSetTe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateJobs_result)
        return this.equals((terminateJobs_result)that);
      return false;
    }

    public boolean equals(terminateJobs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_nfe = true && this.isSetNfe();
      boolean that_present_nfe = true && that.isSetNfe();
      if (this_present_nfe || that_present_nfe) {
        if (!(this_present_nfe && that_present_nfe))
          return false;
        if (!this.nfe.equals(that.nfe))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetIre()) ? 131071 : 524287);
      if (isSetIre())
        hashCode = hashCode * 8191 + ire.hashCode();

      hashCode = hashCode * 8191 + ((isSetUe()) ? 131071 : 524287);
      if (isSetUe())
        hashCode = hashCode * 8191 + ue.hashCode();

      hashCode = hashCode * 8191 + ((isSetNfe()) ? 131071 : 524287);
      if (isSetNfe())
        hashCode = hashCode * 8191 + nfe.hashCode();

      hashCode = hashCode * 8191 + ((isSetTe()) ? 131071 : 524287);
      if (isSetTe())
        hashCode = hashCode * 8191 + te.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(terminateJobs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNfe()).compareTo(other.isSetNfe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNfe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nfe, other.nfe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminateJobs_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nfe:");
      if (this.nfe == null) {
        sb.append("null");
      } else {
        sb.append(this.nfe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateJobs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateJobs_resultStandardScheme getScheme() {
        return new terminateJobs_resultStandardScheme();
      }
    }

    private static class terminateJobs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminateJobs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateJobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new com.binto.YYSchedule.common.rpc.exception.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NFE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nfe = new com.binto.YYSchedule.common.rpc.exception.NotFoundException();
                struct.nfe.read(iprot);
                struct.setNfeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateJobs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nfe != null) {
          oprot.writeFieldBegin(NFE_FIELD_DESC);
          struct.nfe.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateJobs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateJobs_resultTupleScheme getScheme() {
        return new terminateJobs_resultTupleScheme();
      }
    }

    private static class terminateJobs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminateJobs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateJobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetUe()) {
          optionals.set(2);
        }
        if (struct.isSetNfe()) {
          optionals.set(3);
        }
        if (struct.isSetTe()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetNfe()) {
          struct.nfe.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateJobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new com.binto.YYSchedule.common.rpc.exception.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.nfe = new com.binto.YYSchedule.common.rpc.exception.NotFoundException();
          struct.nfe.read(iprot);
          struct.setNfeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtainQueueInfo_args implements org.apache.thrift.TBase<obtainQueueInfo_args, obtainQueueInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainQueueInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainQueueInfo_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtainQueueInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtainQueueInfo_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainQueueInfo_args.class, metaDataMap);
    }

    public obtainQueueInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainQueueInfo_args(obtainQueueInfo_args other) {
    }

    public obtainQueueInfo_args deepCopy() {
      return new obtainQueueInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainQueueInfo_args)
        return this.equals((obtainQueueInfo_args)that);
      return false;
    }

    public boolean equals(obtainQueueInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(obtainQueueInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtainQueueInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainQueueInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtainQueueInfo_argsStandardScheme getScheme() {
        return new obtainQueueInfo_argsStandardScheme();
      }
    }

    private static class obtainQueueInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtainQueueInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainQueueInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainQueueInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainQueueInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtainQueueInfo_argsTupleScheme getScheme() {
        return new obtainQueueInfo_argsTupleScheme();
      }
    }

    private static class obtainQueueInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtainQueueInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainQueueInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainQueueInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtainQueueInfo_result implements org.apache.thrift.TBase<obtainQueueInfo_result, obtainQueueInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainQueueInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainQueueInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtainQueueInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtainQueueInfo_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public com.binto.YYSchedule.common.rpc.exception.UnavailableException ue; // required
    public com.binto.YYSchedule.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue"),
      TE((short)2, "te");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          case 2: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.UnavailableException.class)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.TimeoutException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainQueueInfo_result.class, metaDataMap);
    }

    public obtainQueueInfo_result() {
    }

    public obtainQueueInfo_result(
      java.lang.String success,
      com.binto.YYSchedule.common.rpc.exception.UnavailableException ue,
      com.binto.YYSchedule.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainQueueInfo_result(obtainQueueInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUe()) {
        this.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public obtainQueueInfo_result deepCopy() {
      return new obtainQueueInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ue = null;
      this.te = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public obtainQueueInfo_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.binto.YYSchedule.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public obtainQueueInfo_result setUe(com.binto.YYSchedule.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.binto.YYSchedule.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public obtainQueueInfo_result setTe(com.binto.YYSchedule.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.binto.YYSchedule.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.binto.YYSchedule.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainQueueInfo_result)
        return this.equals((obtainQueueInfo_result)that);
      return false;
    }

    public boolean equals(obtainQueueInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetUe()) ? 131071 : 524287);
      if (isSetUe())
        hashCode = hashCode * 8191 + ue.hashCode();

      hashCode = hashCode * 8191 + ((isSetTe()) ? 131071 : 524287);
      if (isSetTe())
        hashCode = hashCode * 8191 + te.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtainQueueInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtainQueueInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainQueueInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtainQueueInfo_resultStandardScheme getScheme() {
        return new obtainQueueInfo_resultStandardScheme();
      }
    }

    private static class obtainQueueInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtainQueueInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainQueueInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainQueueInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainQueueInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtainQueueInfo_resultTupleScheme getScheme() {
        return new obtainQueueInfo_resultTupleScheme();
      }
    }

    private static class obtainQueueInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtainQueueInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainQueueInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        if (struct.isSetTe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainQueueInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtainClusterStat_args implements org.apache.thrift.TBase<obtainClusterStat_args, obtainClusterStat_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainClusterStat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainClusterStat_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtainClusterStat_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtainClusterStat_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainClusterStat_args.class, metaDataMap);
    }

    public obtainClusterStat_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainClusterStat_args(obtainClusterStat_args other) {
    }

    public obtainClusterStat_args deepCopy() {
      return new obtainClusterStat_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainClusterStat_args)
        return this.equals((obtainClusterStat_args)that);
      return false;
    }

    public boolean equals(obtainClusterStat_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(obtainClusterStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtainClusterStat_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainClusterStat_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtainClusterStat_argsStandardScheme getScheme() {
        return new obtainClusterStat_argsStandardScheme();
      }
    }

    private static class obtainClusterStat_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtainClusterStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainClusterStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainClusterStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainClusterStat_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtainClusterStat_argsTupleScheme getScheme() {
        return new obtainClusterStat_argsTupleScheme();
      }
    }

    private static class obtainClusterStat_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtainClusterStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainClusterStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainClusterStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class obtainClusterStat_result implements org.apache.thrift.TBase<obtainClusterStat_result, obtainClusterStat_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainClusterStat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainClusterStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField UE_FIELD_DESC = new org.apache.thrift.protocol.TField("ue", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new obtainClusterStat_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new obtainClusterStat_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public com.binto.YYSchedule.common.rpc.exception.UnavailableException ue; // required
    public com.binto.YYSchedule.common.rpc.exception.TimeoutException te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UE((short)1, "ue"),
      TE((short)2, "te");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UE
            return UE;
          case 2: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UE, new org.apache.thrift.meta_data.FieldMetaData("ue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.UnavailableException.class)));
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.binto.YYSchedule.common.rpc.exception.TimeoutException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainClusterStat_result.class, metaDataMap);
    }

    public obtainClusterStat_result() {
    }

    public obtainClusterStat_result(
      java.lang.String success,
      com.binto.YYSchedule.common.rpc.exception.UnavailableException ue,
      com.binto.YYSchedule.common.rpc.exception.TimeoutException te)
    {
      this();
      this.success = success;
      this.ue = ue;
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainClusterStat_result(obtainClusterStat_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUe()) {
        this.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException(other.te);
      }
    }

    public obtainClusterStat_result deepCopy() {
      return new obtainClusterStat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ue = null;
      this.te = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public obtainClusterStat_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.binto.YYSchedule.common.rpc.exception.UnavailableException getUe() {
      return this.ue;
    }

    public obtainClusterStat_result setUe(com.binto.YYSchedule.common.rpc.exception.UnavailableException ue) {
      this.ue = ue;
      return this;
    }

    public void unsetUe() {
      this.ue = null;
    }

    /** Returns true if field ue is set (has been assigned a value) and false otherwise */
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public com.binto.YYSchedule.common.rpc.exception.TimeoutException getTe() {
      return this.te;
    }

    public obtainClusterStat_result setTe(com.binto.YYSchedule.common.rpc.exception.TimeoutException te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((com.binto.YYSchedule.common.rpc.exception.UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((com.binto.YYSchedule.common.rpc.exception.TimeoutException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainClusterStat_result)
        return this.equals((obtainClusterStat_result)that);
      return false;
    }

    public boolean equals(obtainClusterStat_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetUe()) ? 131071 : 524287);
      if (isSetUe())
        hashCode = hashCode * 8191 + ue.hashCode();

      hashCode = hashCode * 8191 + ((isSetTe()) ? 131071 : 524287);
      if (isSetTe())
        hashCode = hashCode * 8191 + te.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(obtainClusterStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUe()).compareTo(other.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, other.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("obtainClusterStat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainClusterStat_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtainClusterStat_resultStandardScheme getScheme() {
        return new obtainClusterStat_resultStandardScheme();
      }
    }

    private static class obtainClusterStat_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<obtainClusterStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainClusterStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException();
                struct.ue.read(iprot);
                struct.setUeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainClusterStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ue != null) {
          oprot.writeFieldBegin(UE_FIELD_DESC);
          struct.ue.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainClusterStat_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public obtainClusterStat_resultTupleScheme getScheme() {
        return new obtainClusterStat_resultTupleScheme();
      }
    }

    private static class obtainClusterStat_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<obtainClusterStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainClusterStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUe()) {
          optionals.set(1);
        }
        if (struct.isSetTe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetUe()) {
          struct.ue.write(oprot);
        }
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainClusterStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ue = new com.binto.YYSchedule.common.rpc.exception.UnavailableException();
          struct.ue.read(iprot);
          struct.setUeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.te = new com.binto.YYSchedule.common.rpc.exception.TimeoutException();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
